<Page 1>
Colorbar
If you create a colorbar with the colorbar() command, the created colorbar is an instance of Axes, not Subplot, so tight_layout does not work. With Matplotlib v1.1, you may create a colorbar as a subplot using the gridspec.
Matplotlib, Release 2.0.2
            2.0
1.5
1.0 2.0
1.5
1.0
0.0 0.5 x-label
1.0
0.0
0.5 1.0 x-label
          y-label y-label
    plt.close('all')
arr = np.arange(100).reshape((10,10))
fig = plt.figure(figsize=(4, 4))
im = plt.imshow(arr, interpolation="none")
plt.colorbar(im, use_gridspec=True)
plt.tight_layout()
  3.1. Introductory 53

<Page 2>
Matplotlib, Release 2.0.2
       0 2 4 6 8
80
60
40
20
0
 02468
Another option is to use AxesGrid1 toolkit to explicitly create an axes for colorbar.
    plt.close('all')
arr = np.arange(100).reshape((10,10))
fig = plt.figure(figsize=(4, 4))
im = plt.imshow(arr, interpolation="none")
from mpl_toolkits.axes_grid1 import make_axes_locatable divider = make_axes_locatable(plt.gca())
cax = divider.append_axes("right", "5%", pad="3%") plt.colorbar(im, cax=cax)
plt.tight_layout()
  54 Chapter3. Tutorials

<Page 3>
3.2 Intermediate 3.2.1 Artist tutorial
There are three layers to the matplotlib API. The matplotlib.backend_bases.FigureCanvas is the area onto which the figure is drawn, the matplotlib.backend_bases.Renderer is the object which knows how to draw on the FigureCanvas, and the matplotlib.artist.Artist is the object that knows how to use a renderer to paint onto the canvas. The FigureCanvas and Renderer handle all the details of talking to user interface toolkits like wxPython or drawing languages like PostScript®, and the Artist handles all the high level constructs like representing and laying out the figure, text, and lines. The typical user will spend 95% of their time working with the Artists.
There are two types of Artists: primitives and containers. The primitives represent the standard graphical objects we want to paint onto our canvas: Line2D, Rectangle, Text, AxesImage, etc., and the containers are places to put them (Axis, Axes and Figure). The standard use is to create a Figure instance, use the Figure to create one or more Axes or Subplot instances, and use the Axes instance helper methods to create the primitives. In the example below, we create a Figure instance using matplotlib.pyplot. figure(), which is a convenience method for instantiating Figure instances and connecting them with your user interface or drawing toolkit FigureCanvas. As we will discuss below, this is not necessary – you can work directly with PostScript, PDF Gtk+, or wxPython FigureCanvas instances, instantiate your Figures directly and connect them yourselves – but since we are focusing here on the Artist API we’ll let pyplot handle some of those details for us:
Matplotlib, Release 2.0.2
       0 2 4 6 8
80 60 40 20 0
 02468
 3.2. Intermediate 55

<Page 4>
Matplotlib, Release 2.0.2
     import matplotlib.pyplot as plt
fig = plt.figure()
ax = fig.add_subplot(2,1,1) # two rows, one column, first plot
 The Axes is probably the most important class in the matplotlib API, and the one you will be working with most of the time. This is because the Axes is the plotting area into which most of the objects go, and the Axes has many special helper methods (plot(), text(), hist(), imshow()) to create the most common graphics primitives (Line2D, Text, Rectangle, Image, respectively). These helper methods will take your data (e.g., numpy arrays and strings) and create primitive Artist instances as needed (e.g., Line2D), add them to the relevant containers, and draw them when requested. Most of you are probably familiar with the Subplot, which is just a special case of an Axes that lives on a regular rows by columns grid of Subplot instances. If you want to create an Axes at an arbitrary location, simply use the add_axes() method which takes a list of [left, bottom, width, height] values in 0-1 relative figure coordinates:
Continuing with our example:
In this example, ax is the Axes instance created by the fig.add_subplot call above (remember Subplot is just a subclass of Axes) and when you call ax.plot, it creates a Line2D instance and adds it to the Axes.lines list. In the interactive ipython session below, you can see that the Axes.lines list is length one and contains the same line that was returned by the line, = ax.plot... call:
If you make subsequent calls to ax.plot (and the hold state is “on” which is the default) then additional lines will be added to the list. You can remove lines later simply by calling the list methods; either of these will work:
The Axes also has helper methods to configure and decorate the x-axis and y-axis tick, tick labels and axis labels:
When you call ax.set_xlabel, it passes the information on the Text instance of the XAxis. Each Axes instance contains an XAxis and a YAxis instance, which handle the layout and drawing of the ticks, tick labels and axis labels.
    fig2 = plt.figure()
ax2 = fig2.add_axes([0.15, 0.1, 0.7, 0.3])
     import numpy as np
t = np.arange(0.0, 1.0, 0.01)
s = np.sin(2*np.pi*t)
line, = ax.plot(t, s, color='blue', lw=2)
     In [101]: ax.lines[0]
Out[101]: <matplotlib.lines.Line2D instance at 0x19a95710>
In [102]: line
Out[102]: <matplotlib.lines.Line2D instance at 0x19a95710>
     del ax.lines[0]
ax.lines.remove(line) # one or the other, not both!
     xtext = ax.set_xlabel('my xdata') # returns a Text instance ytext = ax.set_ylabel('my ydata')
  56 Chapter3. Tutorials

<Page 5>
Matplotlib, Release 2.0.2
 Try creating the figure below.
 1.0 0.5 0.0 0.5 1.0
60 40 20
0.0 0.2
a sine wave
0.4 0.6
0.8 1.0
0
432101234
time (s)
     volts
                    Customizing your objects
Every element in the figure is represented by a matplotlib Artist, and each has an extensive list of proper- ties to configure its appearance. The figure itself contains a Rectangle exactly the size of the figure, which you can use to set the background color and transparency of the figures. Likewise, each Axes bounding box (the standard white box with black edges in the typical matplotlib plot, has a Rectangle instance that determines the color, transparency, and other properties of the Axes. These instances are stored as mem- ber variables Figure.patch and Axes.patch (“Patch” is a name inherited from MATLAB, and is a 2D “patch” of color on the figure, e.g., rectangles, circles and polygons). Every matplotlib Artist has the following properties
 3.2. Intermediate 57

<Page 6>
Matplotlib, Release 2.0.2
  Property
alpha animated axes clip_box clip_on clip_path contains figure label picker transform visible zorder rasterized
Description
The transparency - a scalar from 0-1
A boolean that is used to facilitate animated drawing
The axes that the Artist lives in, possibly None
The bounding box that clips the Artist
Whether clipping is enabled
The path the artist is clipped to
A picking function to test whether the artist contains the pick point
The figure instance the artist lives in, possibly None
A text label (e.g., for auto-labeling)
A python object that controls object picking
The transformation
A boolean whether the artist should be drawn
A number which determines the drawing order
Boolean; Turns vectors into rastergraphics: (for compression & eps transparency)
               Each of the properties is accessed with an old-fashioned setter or getter (yes we know this irritates Python- istas and we plan to support direct access via properties or traits but it hasn’t been done yet). For example, to multiply the current alpha by a half:
If you want to set a number of properties at once, you can also use the set method with keyword arguments. For example:
o.set(alpha=0.5, zorder=2)
If you are working interactively at the python shell, a handy way to inspect the Artist properties is to use the matplotlib.artist.getp() function (simply getp() in pylab), which lists the properties and their values. This works for classes derived from Artist as well, e.g., Figure and Rectangle. Here are the Figure rectangle properties mentioned above:
    a = o.get_alpha()
o.set_alpha(0.5*a)
        In [149]: matplotlib.artist.getp(fig.patch) alpha = 1.0
    animated = False
    antialiased or aa = True
    axes = None
    clip_box = None
    clip_on = False
    clip_path = None
    contains = None
    edgecolor or ec = w
    facecolor or fc = 0.75
    figure = Figure(8.125x6.125)
    fill = 1
    hatch = None
    height = 1
    label =
    linewidth or lw = 1.0
    picker = None
  58 Chapter3. Tutorials

<Page 7>
Matplotlib, Release 2.0.2
     transform = <Affine object at 0x134cca84>
verts = ((0, 0), (0, 1), (1, 1), (1, 0))
visible = True
width = 1
window_extent = <Bbox object at 0x134acbcc> x=0
y=0
zorder = 1
 The docstrings for all of the classes also contain the Artist properties, so you can consult the interactive “help” or the artist Module for a listing of properties for a given object.
Object containers
Now that we know how to inspect and set the properties of a given object we want to configure, we need to know how to get at that object. As mentioned in the introduction, there are two kinds of objects: primitives and containers. The primitives are usually the things you want to configure (the font of a Text instance, the width of a Line2D) although the containers also have some properties as well – for example the Axes Artist is a container that contains many of the primitives in your plot, but it also has properties like the xscale to control whether the xaxis is ‘linear’ or ‘log’. In this section we’ll review where the various container objects store the Artists that you want to get at.
Figure container
The top level container Artist is the matplotlib.figure.Figure, and it contains everything in the figure. The background of the figure is a Rectangle which is stored in Figure.patch. As you add subplots (add_subplot()) and axes (add_axes()) to the figure these will be appended to the Figure. axes. These are also returned by the methods that create them:
    In [156]: fig = plt.figure()
In [157]: ax1 = fig.add_subplot(211)
In [158]: ax2 = fig.add_axes([0.1, 0.1, 0.7, 0.3])
In [159]: ax1
Out[159]: <matplotlib.axes.Subplot instance at 0xd54b26c>
In [160]: print fig.axes
[<matplotlib.axes.Subplot instance at 0xd54b26c>, <matplotlib.axes.Axes instance at␣
,→0xd3f0b2c>]
 Because the figure maintains the concept of the “current axes” (see Figure.gca and Figure.sca) to support the pylab/pyplot state machine, you should not insert or remove axes directly from the axes list, but rather use the add_subplot() and add_axes() methods to insert, and the delaxes() method to delete. You are free however, to iterate over the list of axes or index into it to get access to Axes instances you want to customize. Here is an example which turns all the axes grids on:
 3.2. Intermediate 59

<Page 8>
Matplotlib, Release 2.0.2
     for ax in fig.axes: ax.grid(True)
 The figure also has its own text, lines, patches and images, which you can use to add primitives directly. The default coordinate system for the Figure will simply be in pixels (which is not usually what you want) but you can control this by setting the transform property of the Artist you are adding to the figure.
More useful is “figure coordinates” where (0, 0) is the bottom-left of the figure and (1, 1) is the top-right of the figure which you can obtain by setting the Artist transform to fig.transFigure:
    In [191]: fig = plt.figure()
In [192]: l1 = matplotlib.lines.Line2D([0, 1], [0, 1],
           transform=fig.transFigure, figure=fig)
In [193]: l2 = matplotlib.lines.Line2D([0, 1], [1, 0], transform=fig.transFigure, figure=fig)
In [194]: fig.lines.extend([l1, l2]) In [195]: fig.canvas.draw()
  Here is a summary of the Artists the figure contains
 60 Chapter3. Tutorials

<Page 9>
Figure attribute
axes patch images legends lines patches texts
Axes container
Description
A list of Axes instances (includes Subplot)
The Rectangle background
A list of FigureImages patches - useful for raw pixel display
A list of Figure Legend instances (different from Axes.legends) A list of Figure Line2D instances (rarely used, see Axes.lines) A list of Figure patches (rarely used, see Axes.patches)
A list Figure Text instances
Matplotlib, Release 2.0.2
          The matplotlib.axes.Axes is the center of the matplotlib universe – it contains the vast majority of all the Artists used in a figure with many helper methods to create and add these Artists to itself, as well as helper methods to access and customize the Artists it contains. Like the Figure, it contains a Patch patch which is a Rectangle for Cartesian coordinates and a Circle for polar coordinates; this patch determines the shape, background and border of the plotting region:
When you call a plotting method, e.g., the canonical plot() and pass in arrays or lists of values, the method will create a matplotlib.lines.Line2D() instance, update the line with all the Line2D properties passed as keyword arguments, add the line to the Axes.lines container, and returns it to you:
plot returns a list of lines because you can pass in multiple x, y pairs to plot, and we are unpacking the first element of the length one list into the line variable. The line has been added to the Axes.lines list:
Similarly, methods that create patches, like bar() creates a list of rectangles, will add the patches to the Axes.patches list:
You should not add objects directly to the Axes.lines or Axes.patches lists unless you know exactly what you are doing, because the Axes needs to do a few things when it creates and adds an object. It sets the figure and axes property of the Artist, as well as the default Axes transformation (unless a transformation is set). It also inspects the data contained in the Artist to update the data structures controlling auto-scaling,
    ax = fig.add_subplot(111)
rect = ax.patch # a Rectangle instance rect.set_facecolor('green')
     In [213]: x, y = np.random.rand(2, 100)
In [214]: line, = ax.plot(x, y, '-', color='blue', linewidth=2)
     In [229]: print ax.lines [<matplotlib.lines.Line2D instance at 0xd378b0c>]
     In [233]: n, bins, rectangles = ax.hist(np.random.randn(1000), 50, facecolor='yellow') In [234]: rectangles
Out[234]: <a list of 50 Patch objects> In [235]: print len(ax.patches)
  3.2. Intermediate 61

<Page 10>
Matplotlib, Release 2.0.2
 so that the view limits can be adjusted to contain the plotted data. You can, nonetheless, create objects yourself and add them directly to the Axes using helper methods like add_line() and add_patch(). Here is an annotated interactive session illustrating what is going on:
    In [261]: fig = plt.figure()
In [262]: ax = fig.add_subplot(111)
# create a rectangle instance
In [263]: rect = matplotlib.patches.Rectangle( (1,1), width=5, height=12)
# by default the axes instance is None
In [264]: print rect.get_axes() None
# and the transformation instance is set to the "identity transform"
In [265]: print rect.get_transform() <Affine object at 0x13695544>
# now we add the Rectangle to the Axes
In [266]: ax.add_patch(rect)
# and notice that the ax.add_patch method has set the axes # instance
In [267]: print rect.get_axes()
Axes(0.125,0.1;0.775x0.8)
# and the transformation has been set too
In [268]: print rect.get_transform() <Affine object at 0x15009ca4>
# the default axes transformation is ax.transData
In [269]: print ax.transData <Affine object at 0x15009ca4>
# notice that the xlimits of the Axes have not been changed
In [270]: print ax.get_xlim() (0.0, 1.0)
# but the data limits have been updated to encompass the rectangle
In [271]: print ax.dataLim.bounds (1.0, 1.0, 5.0, 12.0)
# we can manually invoke the auto-scaling machinery
In [272]: ax.autoscale_view()
# and now the xlim are updated to encompass the rectangle
In [273]: print ax.get_xlim() (1.0, 6.0)
# we have to manually force a figure draw
In [274]: ax.figure.canvas.draw()
  62 Chapter3. Tutorials

<Page 11>
There are many, many Axes helper methods for creating primitive Artists and adding them to their respec- tive containers. The table below summarizes a small sampling of them, the kinds of Artist they create, and where they store them
Helper method
ax.annotate - text annotations ax.bar - bar charts ax.errorbar - error bar plots ax.fill - shared area
ax.hist - histograms ax.imshow - image data ax.legend - axes legends ax.plot - xy plots ax.scatter - scatter charts ax.text - text
Artist
Annotate
Rectangle
Line2D and Rectangle Polygon
Rectangle
AxesImage
Legend
Line2D PolygonCollection Text
Container
ax.texts
ax.patches
ax.lines and ax.patches ax.patches
ax.patches
ax.images
ax.legends
ax.lines
ax.collections
ax.texts
Matplotlib, Release 2.0.2
             In addition to all of these Artists, the Axes contains two important Artist containers: the XAxis and YAxis, which handle the drawing of the ticks and labels. These are stored as instance variables xaxis and yaxis. The XAxis and YAxis containers will be detailed below, but note that the Axes contains many helper methods which forward calls on to the Axis instances so you often do not need to work with them directly unless you want to. For example, you can set the font color of the XAxis ticklabels using the Axes helper method:
Below is a summary of the Artists that the Axes contains
    for label in ax.get_xticklabels(): label.set_color('orange')
  Axes attribute
artists patch collections images legends lines patches texts
xaxis yaxis
Axis containers
Description
A list of Artist instances
Rectangle instance for Axes background A list of Collection instances
A list of AxesImage
A list of Legend instances
A list of Line2D instances
A list of Patch instances
A list of Text instances matplotlib.axis.XAxis instance matplotlib.axis.YAxis instance
           The matplotlib.axis.Axis instances handle the drawing of the tick lines, the grid lines, the tick labels and the axis label. You can configure the left and right ticks separately for the y-axis, and the upper and lower ticks separately for the x-axis. The Axis also stores the data and view intervals used in auto-scaling, panning and zooming, as well as the Locator and Formatter instances which control where the ticks are placed and how they are represented as strings.
Each Axis object contains a label attribute (this is what pylab modifies in calls to xlabel() and 3.2. Intermediate 63

<Page 12>
Matplotlib, Release 2.0.2
 ylabel()) as well as a list of major and minor ticks. The ticks are XTick and YTick instances, which contain the actual line and text primitives that render the ticks and ticklabels. Because the ticks are dynam- ically created as needed (e.g., when panning and zooming), you should access the lists of major and minor ticks through their accessor methods get_major_ticks() and get_minor_ticks(). Although the ticks contain all the primitives and will be covered below, Axis instances have accessor methods that return the tick lines, tick labels, tick locations etc.:
    In [285]: axis = ax.xaxis
In [286]: axis.get_ticklocs()
Out[286]: array([ 0., 1., 2., 3., 4., 5., 6., 7., 8., 9.]) In [287]: axis.get_ticklabels()
Out[287]: <a list of 10 Text major ticklabel objects>
# note there are twice as many ticklines as labels because by
# default there are tick lines at the top and bottom but only tick # labels below the xaxis; this can be customized
In [288]: axis.get_ticklines()
Out[288]: <a list of 20 Line2D ticklines objects>
# by default you get the major ticks back
In [291]: axis.get_ticklines()
Out[291]: <a list of 20 Line2D ticklines objects>
# but you can also ask for the minor ticks
In [292]: axis.get_ticklines(minor=True) Out[292]: <a list of 0 Line2D ticklines objects>
 Here is a summary of some of the useful accessor methods of the Axis (these have corresponding setters where useful, such as set_major_formatter)
 Accessor method
get_scale get_view_interval get_data_interval get_gridlines get_label get_ticklabels get_ticklines get_ticklocs get_major_locator get_major_formatter get_minor_locator get_minor_formatter get_major_ticks get_minor_ticks grid
Description
The scale of the axis, e.g., ‘log’ or ‘linear’ The interval instance of the axis view limits The interval instance of the axis data limits A list of grid lines for the Axis
The axis label - a Text instance
A list of Text instances - keyword minor=True|False
A list of Line2D instances - keyword minor=True|False A list of Tick locations - keyword minor=True|False The matplotlib.ticker.Locator instance for major ticks The matplotlib.ticker.Formatter instance for major ticks The matplotlib.ticker.Locator instance for minor ticks The matplotlib.ticker.Formatter instance for minor ticks A list of Tick instances for major ticks
A list of Tick instances for minor ticks
Turn the grid on or off for the major or minor ticks
                Here is an example, not recommended for its beauty, which customizes the axes and tick properties
 64 Chapter3. Tutorials

<Page 13>
Matplotlib, Release 2.0.2
     import numpy as np
import matplotlib.pyplot as plt
# plt.figure creates a matplotlib.figure.Figure instance
fig = plt.figure()
rect = fig.patch # a rectangle instance rect.set_facecolor('lightgoldenrodyellow')
ax1 = fig.add_axes([0.1, 0.3, 0.4, 0.4]) rect = ax1.patch rect.set_facecolor('lightslategray')
for label in ax1.xaxis.get_ticklabels(): # label is a Text instance label.set_color('red') label.set_rotation(45) label.set_fontsize(16)
for line in ax1.yaxis.get_ticklines(): # line is a Line2D instance line.set_color('green') line.set_markersize(25) line.set_markeredgewidth(3)
plt.show()
  3.2. Intermediate 65

<Page 14>
Matplotlib, Release 2.0.2
  1.0 0.8 0.6 0.4 0.2 0.0
     0.0 0.2
0.4 0.6
0.8 1.0
Tick containers
The matplotlib.axis.Tick is the final container object in our descent from the Figure to the Axes to the Axis to the Tick. The Tick contains the tick and grid line instances, as well as the label instances for the upper and lower ticks. Each of these is accessible directly as an attribute of the Tick. In addition, there are boolean variables that determine whether the upper labels and ticks are on for the x-axis and whether the right labels and ticks are on for the y-axis.
 Tick attribute
tick1line tick2line gridline label1 label2 gridOn tick1On tick2On label1On label2On
Description
Line2D instance
Line2D instance
Line2D instance
Text instance
Text instance
boolean which determines whether to draw the gridline boolean which determines whether to draw the 1st tickline boolean which determines whether to draw the 2nd tickline boolean which determines whether to draw the 1st tick label boolean which determines whether to draw the 2nd tick label
           Here is an
on the right side of the yaxis
example which sets the formatter for the right side ticks with dollar signs and colors them green
 66 Chapter3. Tutorials

<Page 15>
Matplotlib, Release 2.0.2
     import numpy as np
import matplotlib.pyplot as plt
import matplotlib.ticker as ticker
# Fixing random state for reproducibility
np.random.seed(19680801)
fig = plt.figure()
ax = fig.add_subplot(111)
ax.plot(100*np.random.rand(20))
formatter = ticker.FormatStrFormatter('$%1.2f') ax.yaxis.set_major_formatter(formatter)
for tick in ax.yaxis.get_major_ticks(): tick.label1On = False
tick.label2On = True tick.label2.set_color('green')
plt.show()
       0.0 2.5
5.0 7.5
10.0 12.5 15.0 17.5
$100.
$80.0
$60.0
$40.0
$20.0
00
0
0
0
0
 3.2. Intermediate
67

<Page 16>
Matplotlib, Release 2.0.2
 3.2.2 Legend guide
This legend guide is an extension of the documentation available at legend() - please ensure you are familiar with contents of that documentation before proceeding with this guide.
This guide makes use of some common terms, which are documented here for clarity:
legend entry A legend is made up of one or more legend entries. An entry is made up of exactly one key and one label.
legend key The colored/patterned marker to the left of each legend label.
legend label The text which describes the handle represented by the key.
legend handle The original object which is used to generate an appropriate entry in the legend.
Controlling the legend entries
Calling legend() with no arguments automatically fetches the legend handles and their associated labels. This functionality is equivalent to:
The get_legend_handles_labels() function returns a list of handles/artists which exist on the Axes which can be used to generate entries for the resulting legend - it is worth noting however that not all artists can be added to a legend, at which point a “proxy” will have to be created (see Creating artists specifically for adding to the legend (aka. Proxy artists) for further details).
For full control of what is being added to the legend, it is common to pass the appropriate handles directly to legend():
In some cases, it is not possible to set the label of the handle, so it is possible to pass through the list of labels to legend():
Creating artists specifically for adding to the legend (aka. Proxy artists)
Not all handles can be turned into legend entries automatically, so it is often necessary to create an artist which can. Legend handles don’t have to exists on the Figure or Axes in order to be used.
Suppose we wanted to create a legend which has an entry for some data which is represented by a red color:
    handles, labels = ax.get_legend_handles_labels()
ax.legend(handles, labels)
     line_up, = plt.plot([1,2,3], label='Line 2') line_down, = plt.plot([3,2,1], label='Line 1') plt.legend(handles=[line_up, line_down])
     line_up, = plt.plot([1,2,3], label='Line 2')
line_down, = plt.plot([3,2,1], label='Line 1') plt.legend([line_up, line_down], ['Line Up', 'Line Down'])
  68 Chapter3. Tutorials

There are many supported legend handles, instead of creating a patch of color we could have created a line with a marker:
<Page 17>
Matplotlib, Release 2.0.2
     import matplotlib.patches as mpatches
import matplotlib.pyplot as plt
red_patch = mpatches.Patch(color='red', label='The red data') plt.legend(handles=[red_patch])
plt.show()
  1.0
0.8
0.6
0.4
0.2
0.0
0.0 0.2
0.4 0.6
0.8 1.0
    The red data
     import matplotlib.lines as mlines
import matplotlib.pyplot as plt
blue_line = mlines.Line2D([], [], color='blue', marker='*', markersize=15, label='Blue stars')
plt.legend(handles=[blue_line])
plt.show()
  3.2. Intermediate 69

<Page 18>
Matplotlib, Release 2.0.2
  1.0
0.8
0.6
0.4
0.2
0.0
0.0 0.2
0.4 0.6
0.8 1.0
 Blue stars
Legend location
The location of the legend can be specified by the keyword argument loc. Please see the documentation at legend() for more details.
The bbox_to_anchor keyword gives a great degree of control for manual legend placement. For example, if you want your axes legend located at the figure’s top right-hand corner instead of the axes’ corner, simply specify the corner’s location, and the coordinate system of that location:
More examples of custom legend placement:
    plt.legend(bbox_to_anchor=(1, 1),
           bbox_transform=plt.gcf().transFigure)
     import matplotlib.pyplot as plt
plt.subplot(211)
plt.plot([1,2,3], label="test1")
plt.plot([3,2,1], label="test2")
# Place a legend above this subplot, expanding itself to # fully use the given bounding box. plt.legend(bbox_to_anchor=(0., 1.02, 1., .102), loc=3,
           ncol=2, mode="expand", borderaxespad=0.)
  70 Chapter3. Tutorials

<Page 19>
Multiple legends on the same Axes
Sometimes it is more clear to split legend entries across multiple legends. Whilst the instinctive approach to doing this might be to call the legend() function multiple times, you will find that only one legend ever exists on the Axes. This has been done so that it is possible to call legend() repeatedly to update the legend to the latest handles on the Axes, so to persist old legend instances, we must add them manually to the Axes:
Matplotlib, Release 2.0.2
     plt.subplot(223)
plt.plot([1,2,3], label="test1")
plt.plot([3,2,1], label="test2")
# Place a legend to the right of this smaller subplot. plt.legend(bbox_to_anchor=(1.05, 1), loc=2, borderaxespad=0.)
plt.show()
      3.0 2.5 2.0 1.5 1.0
3.0 2.5 2.0 1.5 1.0
0.00 0.25 0.50 0.75 1.00 1.25 1.50 1.75 2.00
test1
test2
    012
test1 test2
    import matplotlib.pyplot as plt
line1, = plt.plot([1,2,3], label="Line 1", linestyle='--')
line2, = plt.plot([3,2,1], label="Line 2", linewidth=4)
# Create a legend for the first line.
first_legend = plt.legend(handles=[line1], loc=1)
  3.2. Intermediate 71

<Page 20>
Matplotlib, Release 2.0.2
     # Add the legend manually to the current Axes.
ax = plt.gca().add_artist(first_legend)
# Create another legend for the second line.
plt.legend(handles=[line2], loc=4)
plt.show()
      Line 1
  Line 2
 3.00 2.75 2.50 2.25 2.00 1.75 1.50 1.25 1.00
0.00 0.25 0.50 0.75 1.00 1.25 1.50 1.75 2.00
Legend Handlers
In order to create legend entries, handles are given as an argument to an appropriate HandlerBase subclass. The choice of handler subclass is determined by the following rules:
1. Update get_legend_handler_map() with the value in the handler_map keyword. 2. Check if the handle is in the newly created handler_map.
3. Check if the type of handle is in the newly created handler_map.
4. Check if any of the types in the handle‘s mro is in the newly created handler_map.
For completeness, this logic is mostly implemented in get_legend_handler().
 72 Chapter3. Tutorials
