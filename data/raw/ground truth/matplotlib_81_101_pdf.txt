<Page 1>
All of this flexibility means that we have the necessary hooks to implement custom handlers for our own type of legend key.
The simplest example of using custom handlers is to instantiate one of the existing HandlerBase subclasses. For the sake of simplicity, let’s choose matplotlib.legend_handler.HandlerLine2D which accepts a numpoints argument (note numpoints is a keyword on the legend() function for convenience). We can then pass the mapping of instance to Handler as a keyword to legend.
Matplotlib, Release 2.0.2
     import matplotlib.pyplot as plt
from matplotlib.legend_handler import HandlerLine2D
line1, = plt.plot([3,2,1], marker='o', label='Line 1') line2, = plt.plot([1,2,3], marker='o', label='Line 2')
plt.legend(handler_map={line1: HandlerLine2D(numpoints=4)})
       Line 1 Line 2
  3.00 2.75 2.50 2.25 2.00 1.75 1.50 1.25 1.00
0.00 0.25 0.50 0.75 1.00 1.25 1.50 1.75 2.00
As you can see, “Line 1” now has 4 marker points, where “Line 2” has 2 (the default). Try the above code, only change the map’s key from line1 to type(line1). Notice how now both Line2D instances get 4 markers.
Along with handlers for complex plot types such as errorbars, stem plots and histograms, the default handler_map has a special tuple handler (HandlerTuple) which simply plots the handles on top of one another for each item in the given tuple. The following example demonstrates combining two legend keys on top of one another:
 3.2. Intermediate 73

<Page 2>
Matplotlib, Release 2.0.2
     import matplotlib.pyplot as plt from numpy.random import randn
z = randn(10)
red_dot, = plt.plot(z, "ro", markersize=15)
# Put a white cross over some of the data.
white_cross, = plt.plot(z[:5], "w+", markeredgewidth=3, markersize=15)
plt.legend([red_dot, (red_dot, white_cross)], ["Attr A", "Attr A+B"])
  2.0 1.5 1.0 0.5 0.0 0.5 1.0 1.5
    Attr A Attr A+B
 02468
Implementing a custom legend handler
A custom handler can be implemented to turn any handle into a legend key (handles don’t necessarily need to be matplotlib artists). The handler must implement a “legend_artist” method which returns a single artist for the legend to use. Signature details about the “legend_artist” are documented at legend_artist().
    import matplotlib.pyplot as plt
import matplotlib.patches as mpatches
<Page 3>
class AnyObject(object): pass
  74 Chapter3. Tutorials

Alternatively, had we wanted to globally accept AnyObject instances without needing to manually set the handler_map keyword all the time, we could have registered the new handler with:
Whilst the power here is clear, remember that there are already many handlers implemented and what you want to achieve may already be easily possible with existing classes. For example, to produce elliptical legend keys, rather than rectangular ones:
Matplotlib, Release 2.0.2
     class AnyObjectHandler(object):
def legend_artist(self, legend, orig_handle, fontsize, handlebox):
x0, y0 = handlebox.xdescent, handlebox.ydescent
width, height = handlebox.width, handlebox.height
patch = mpatches.Rectangle([x0, y0], width, height, facecolor='red',
edgecolor='black', hatch='xx', lw=3, transform=handlebox.get_transform())
handlebox.add_artist(patch) return patch
plt.legend([AnyObject()], ['My first handler'], handler_map={AnyObject: AnyObjectHandler()})
  1.0
0.8
0.6
0.4
0.2
0.0
0.0 0.2
0.4 0.6
0.8 1.0
    My first handler
     from matplotlib.legend import Legend Legend.update_default_handler_map({AnyObject: AnyObjectHandler()})
     from matplotlib.legend_handler import HandlerPatch import matplotlib.pyplot as plt
  3.2. Intermediate 75

<Page 4>
Matplotlib, Release 2.0.2
     import matplotlib.patches as mpatches
class HandlerEllipse(HandlerPatch):
def create_artists(self, legend, orig_handle,
                       xdescent, ydescent, width, height, fontsize, trans):
        center = 0.5 * width - 0.5 * xdescent, 0.5 * height - 0.5 * ydescent
        p = mpatches.Ellipse(xy=center, width=width + xdescent,
                             height=height + ydescent)
        self.update_prop(p, orig_handle, legend)
p.set_transform(trans) return [p]
c = mpatches.Circle((0.5, 0.5), 0.25, facecolor="green",
                    edgecolor="red", linewidth=3)
plt.gca().add_patch(c)
plt.legend([c], ["An ellipse, not a rectangle"],
           handler_map={mpatches.Circle: HandlerEllipse()})
  1.0
0.8
0.6
0.4
0.2
0.0
0.0 0.2
0.4 0.6
0.8 1.0
    An ellipse, not a rectangle
  Known examples of using legend
Here is a non-exhaustive list of the examples available involving legend being used in various ways:
 76 Chapter3. Tutorials

Matplotlib, Release 2.0.2
 • lines_bars_and_markers example code: scatter_with_legend.py • api example code: legend_demo.py
• pylab_examples example code: contourf_hatching.py
• pylab_examples example code: figlegend_demo.py
• pylab_examples example code: scatter_symbol.py 
<Page 5>
3.3 Advanced
3.3.1 Transformations Tutorial
Like any graphics packages, matplotlib is built on top of a transformation framework to easily move be- tween coordinate systems, the userland data coordinate system, the axes coordinate system, the figure coordinate system, and the display coordinate system. In 95% of your plotting, you won’t need to think about this, as it happens under the hood, but as you push the limits of custom figure generation, it helps to have an understanding of these objects so you can reuse the existing transformations matplotlib makes available to you, or create your own (see matplotlib.transforms). The table below summarizes the ex- isting coordinate systems, the transformation object you should use to work in that coordinate system, and the description of that system. In the Transformation Object column, ax is a Axes instance, and fig is a Figure instance.
   Co- ordi- nate
 Transfor- mation Object
 Description
  data
 ax.
transData
The userland data coordinate system, controlled by the xlim and ylim
   axes
 ax.
transAxes
The coordinate system of the Axes; (0,0) is bottom left of the axes, and (1,1) is top right of the axes.
    figure fig. transFigur
The coordinate system of the Figure; (0,0) is bottom left of the figure, and (1,1) eis top right of the figure.
    displayNone
This is the pixel coordinate system of the display; (0,0) is the bottom left of the display, and (width, height) is the top right of the display in pixels. Alternatively, the identity transform (matplotlib.transforms.IdentityTransform()) may be used instead of None.
      All of the transformation objects in the table above take inputs in their coordinate system, and transform the input to the display coordinate system. That is why the display coordinate system has None for the Transformation Object column – it already is in display coordinates. The transformations also know how to invert themselves, to go from display back to the native coordinate system. This is particularly useful when processing events from the user interface, which typically occur in display space, and you want to know where the mouse click or key-press occurred in your data coordinate system.
 3.3. Advanced 77

<Page 6>
Matplotlib, Release 2.0.2
 Data coordinates
Let’s start with the most commonly used coordinate, the data coordinate system. Whenever you add data to the axes, matplotlib updates the datalimits, most commonly updated with the set_xlim() and set_ylim() methods. For example, in the figure below, the data limits stretch from 0 to 10 on the x-axis, and -1 to 1 on the y-axis.
    import numpy as np
import matplotlib.pyplot as plt
x = np.arange(0, 10, 0.005)
y = np.exp(-x/2.) * np.sin(2*np.pi*x)
fig = plt.figure()
ax = fig.add_subplot(111)
ax.plot(x, y)
ax.set_xlim(0, 10)
ax.set_ylim(-1, 1)
plt.show()
  1.00 0.75 0.50 0.25 0.00 0.25 0.50 0.75 1.00
0 2 4 6 8 10
     You can use the ax.transData instance to transform from your data to your display coordinate system, either a single point or a sequence of points as shown below:
 78 Chapter3. Tutorials

<Page 7>
Matplotlib, Release 2.0.2
     In [14]: type(ax.transData)
Out[14]: <class 'matplotlib.transforms.CompositeGenericTransform'>
In [15]: ax.transData.transform((5, 0)) Out[15]: array([ 335.175, 247. ])
In [16]: ax.transData.transform([(5, 0), (1,2)]) Out[16]:
array([[ 335.175, 247. ],
       [ 132.435,  642.2  ]])
 You can use the inverted() method to create a transform which will take you from display to data coordi- nates:
If your are typing along with this tutorial, the exact values of the display coordinates may differ if you have a different window size or dpi setting. Likewise, in the figure below, the display labeled points are probably not the same as in the ipython session because the documentation figure size defaults are different.
    In [41]: inv = ax.transData.inverted() In [42]: type(inv)
Out[42]: <class 'matplotlib.transforms.CompositeGenericTransform'>
In [43]: inv.transform((335.175, 247.)) Out[43]: array([ 5., 0.])
  1.00 0.75 0.50 0.25 0.00 0.25 0.50 0.75 1.00
= (281.
 data = (5.0, 0.0)
display
 0 2 4 6 8 10
9, 222.8)
 3.3. Advanced
79

<Page 8>
Matplotlib, Release 2.0.2
  Note: If you run the source code in the example above in a GUI backend, you may also find that the two arrows for the data and display annotations do not point to exactly the same point. This is because the display point was computed before the figure was displayed, and the GUI backend may slightly resize the figure when it is created. The effect is more pronounced if you resize the figure yourself. This is one good reason why you rarely want to work in display space, but you can connect to the 'on_draw' Event to update figure coordinates on figure draws; see Event handling and picking.
When you change the x or y limits of your axes, the data limits are updated so the transformation yields a new display point. Note that when we just change the ylim, only the y-display coordinate is altered, and when we change the xlim too, both are altered. More on this later when we talk about the Bbox.
     In [54]: ax.transData.transform((5, 0)) Out[54]: array([ 335.175, 247. ])
In [55]: ax.set_ylim(-1,2) Out[55]: (-1, 2)
In [56]: ax.transData.transform((5, 0)) Out[56]: array([ 335.175 , 181.13333333])
In [57]: ax.set_xlim(10,20) Out[57]: (10, 20)
In [58]: ax.transData.transform((5, 0)) Out[58]: array([-171.675 , 181.13333333])
 Axes coordinates
After the data coordinate system, axes is probably the second most useful coordinate system. Here the point (0,0) is the bottom left of your axes or subplot, (0.5, 0.5) is the center, and (1.0, 1.0) is the top right. You can also refer to points outside the range, so (-0.1, 1.1) is to the left and above your axes. This coordinate system is extremely useful when placing text in your axes, because you often want a text bubble in a fixed, location, e.g., the upper left of the axes pane, and have that location remain fixed when you pan or zoom. Here is a simple example that creates four panels and labels them ‘A’, ‘B’, ‘C’, ‘D’ as you often see in journals.
    import numpy as np
import matplotlib.pyplot as plt
fig = plt.figure()
for i, label in enumerate(('A', 'B', 'C', 'D')):
    ax = fig.add_subplot(2,2,i+1)
    ax.text(0.05, 0.95, label, transform=ax.transAxes,
fontsize=16, fontweight='bold', va='top') plt.show()
  80 Chapter3. Tutorials

<Page 9>
You can also make lines or patches in the axes coordinate system, but this is less useful in my experience than using ax.transAxes for placing text. Nonetheless, here is a silly example which plots some random dots in data space, and overlays a semi-transparent Circle centered in the middle of the axes with a radius one quarter of the axes – if your axes does not preserve aspect ratio (see set_aspect()), this will look like an ellipse. Use the pan/zoom tool to move around, or manually change the data xlim and ylim, and you will see the data move, but the circle will remain fixed because it is not in data coordinates and will always remain at the center of the axes.
Matplotlib, Release 2.0.2
  1.0 1.0 0.8 0.8 0.6 0.6 0.4 0.4 0.2 0.2
0.0 0.0
0.00 0.25 0.50 0.75 1.00 0.00 0.25 0.50 0.75 1.00
1.0 1.0 0.8 0.8 0.6 0.6 0.4 0.4 0.2 0.2
0.0 0.0
0.00 0.25 0.50 0.75 1.00 0.00 0.25 0.50 0.75 1.00
  A
B
  C
D
    import numpy as np
import matplotlib.pyplot as plt
import matplotlib.patches as patches
fig = plt.figure()
ax = fig.add_subplot(111)
x, y = 10*np.random.rand(2, 1000)
ax.plot(x, y, 'go') # plot some data in data coordinates
circ = patches.Circle((0.5, 0.5), 0.25, transform=ax.transAxes, facecolor='yellow', alpha=0.5)
ax.add_patch(circ)
plt.show()
  3.3. Advanced 81

<Page 10>
Matplotlib, Release 2.0.2
     10 8 6 4 2 0
  0 2 4 6 8 10
Blended transformations
Drawing in blended coordinate spaces which mix axes with data coordinates is extremely useful, for example to create a horizontal span which highlights some region of the y-data but spans across the x-axis regardless of the data limits, pan or zoom level, etc. In fact these blended lines and spans are so useful, we have built in functions to make them easy to plot (see axhline(), axvline(), axhspan(), axvspan()) but for didactic purposes we will implement the horizontal span here using a blended transformation. This trick only works for separable transformations, like you see in normal Cartesian coordinate systems, but not on inseparable transformations like the PolarTransform.
    import numpy as np
import matplotlib.pyplot as plt
import matplotlib.patches as patches
import matplotlib.transforms as transforms
fig = plt.figure()
ax = fig.add_subplot(111)
x = np.random.randn(1000)
ax.hist(x, 30)
ax.set_title(r'$\sigma=1 \/ \dots \/ \sigma=2$', fontsize=16) # the x coords of this transformation are data, and the
  82 Chapter3. Tutorials

<Page 11>
Matplotlib, Release 2.0.2
     # y coord are axes
trans = transforms.blended_transform_factory(
    ax.transData, ax.transAxes)
# highlight the 1..2 stddev region with a span.
# We want x to be in data coordinates and y to
# span from 0..1 in axes coords
rect = patches.Rectangle((1,0), width=1, height=1,
ax.add_patch(rect)
plt.show()
transform=trans, color='yellow', alpha=0.5)
  =1 =2
     100
 80
 60
 40
 20
  0
32101234
                 Note: The blended transformations where x is in data coords and y in axes coordinates is so useful that we have helper methods to return the versions mpl uses internally for drawing ticks, ticklabels, etc. The methods are matplotlib.axes.Axes.get_xaxis_transform() and matplotlib.axes.Axes. get_yaxis_transform(). So in the example above, the call to blended_transform_factory() can be replaced by get_xaxis_transform:
trans = ax.get_xaxis_transform()
     3.3. Advanced 83

<Page 12>
Matplotlib, Release 2.0.2
 Using offset transforms to create a shadow effect
One use of transformations is to create a new transformation that is offset from another transformation, e.g., to place one object shifted a bit relative to another object. Typically you want the shift to be in some physical dimension, like points or inches rather than in data coordinates, so that the shift effect is constant at different zoom levels and dpi settings.
One use for an offset is to create a shadow effect, where you draw one object identical to the first just to the right of it, and just below it, adjusting the zorder to make sure the shadow is drawn first and then the object it is shadowing above it. The transforms module has a helper transformation ScaledTranslation. It is instantiated with:
trans = ScaledTranslation(xt, yt, scale_trans)
where xt and yt are the translation offsets, and scale_trans is a transformation which scales xt and yt at transformation time before applying the offsets. A typical use case is to use the figure fig. dpi_scale_trans transformation for the scale_trans argument, to first scale xt and yt specified in points to display space before doing the final offset. The dpi and inches offset is a common-enough use case that we have a special helper function to create it in matplotlib.transforms.offset_copy(), which returns a new transform with an added offset. But in the example below, we’ll create the offset transform ourselves. Note the use of the plus operator in:
showing that can chain transformations using the addition operator. This code says: first apply the data transformation ax.transData and then translate the data by dx and dy points. In typography, a‘point <https://en.wikipedia.org/wiki/Point_%28typography%29>‘_ is 1/72 inches, and by specifying your offsets in points, your figure will look the same regardless of the dpi resolution it is saved in.
       offset = transforms.ScaledTranslation(dx, dy,
  fig.dpi_scale_trans)
shadow_transform = ax.transData + offset
     import numpy as np
import matplotlib.pyplot as plt
import matplotlib.patches as patches
import matplotlib.transforms as transforms
fig = plt.figure()
ax = fig.add_subplot(111)
# make a simple sine wave
x = np.arange(0., 2., 0.01)
y = np.sin(2*np.pi*x)
line, = ax.plot(x, y, lw=3, color='blue')
# shift the object over 2 points, and down 2 points
dx, dy = 2/72., -2/72.
offset = transforms.ScaledTranslation(dx, dy,
  fig.dpi_scale_trans)
shadow_transform = ax.transData + offset
# now plot the same data with our offset transform;
# use the zorder to make sure we are below the line
  84 Chapter3. Tutorials

<Page 13>
Matplotlib, Release 2.0.2
     ax.plot(x, y, lw=3, color='gray', transform=shadow_transform, zorder=0.5*line.get_zorder())
ax.set_title('creating a shadow effect with an offset transform') plt.show()
  creating a shadow effect with an offset transform 1.00
0.75 0.50 0.25 0.00 0.25 0.50 0.75 1.00
     0.00 0.25 0.50 0.75 1.00 1.25 1.50 1.75 2.00
The transformation pipeline
The ax.transData transform we have been working with in this tutorial is a composite of three different transformations that comprise the transformation pipeline from data -> display coordinates. Michael Droettboom implemented the transformations framework, taking care to provide a clean API that segre- gated the nonlinear projections and scales that happen in polar and logarithmic plots, from the linear affine transformations that happen when you pan and zoom. There is an efficiency here, because you can pan and zoom in your axes which affects the affine transformation, but you may not need to compute the potentially expensive nonlinear scales or projections on simple navigation events. It is also possible to multiply affine transformation matrices together, and then apply them to coordinates in one step. This is not true of all possible transformations.
Here is how the ax.transData instance is defined in the basic separable axis Axes class: self.transData = self.transScale + (self.transLimits + self.transAxes)
    3.3. Advanced 85

<Page 14>
Matplotlib, Release 2.0.2
 We’ve been introduced to the transAxes instance above in Axes coordinates, which maps the (0,0), (1,1) corners of the axes or subplot bounding box to display space, so let’s look at these other two pieces.
self.transLimits is the transformation that takes you from data to axes coordinates; i.e., it maps your view xlim and ylim to the unit space of the axes (and transAxes then takes that unit space to display space). We can see this in action here
    In [80]: ax = subplot(111) In [81]: ax.set_xlim(0, 10)
Out[81]: (0, 10)
In [82]: ax.set_ylim(-1,1)
Out[82]: (-1, 1)
In [84]: ax.transLimits.transform((0,-1))
Out[84]: array([ 0., 0.])
In [85]: ax.transLimits.transform((10,-1))
Out[85]: array([ 1., 0.])
In [86]: ax.transLimits.transform((10,1))
Out[86]: array([ 1., 1.])
In [87]: ax.transLimits.transform((5,0)) Out[87]: array([ 0.5, 0.5])
 and we can use this same inverted transformation to go from the unit axes coordinates back to data coor- dinates.
The final piece is the self.transScale attribute, which is responsible for the optional non-linear scaling of the data, e.g., for logarithmic axes. When an Axes is initially setup, this is just set to the identity trans- form, since the basic matplotlib axes has linear scale, but when you call a logarithmic scaling function like semilogx() or explicitly set the scale to logarithmic with set_xscale(), then the ax.transScale at- tribute is set to handle the nonlinear projection. The scales transforms are properties of the respective xaxis and yaxis Axis instances. For example, when you call ax.set_xscale('log'), the xaxis updates its scale to a matplotlib.scale.LogScale instance.
For non-separable axes the PolarAxes, there is one more piece to consider, the projection transformation. The transData matplotlib.projections.polar.PolarAxes is similar to that for the typical separable matplotlib Axes, with one additional piece transProjection:
transProjection handles the projection from the space, e.g., latitude and longitude for map data, or radius and theta for polar data, to a separable Cartesian coordinate system. There are several projection examples in the matplotlib.projections package, and the best way to learn more is to open the source for those packages and see how to make your own, since matplotlib supports extensible axes and projections. Michael
    In [90]: inv.transform((0.25, 0.25)) Out[90]: array([ 2.5, -0.5])
     self.transData = self.transScale + self.transProjection + \
    (self.transProjectionAffine + self.transAxes)
  86 Chapter3. Tutorials

<Page 15>
Matplotlib, Release 2.0.2
 Droettboom has provided a nice tutorial example of creating a hammer projection axes; see api example code: custom_projection_example.py.
3.3.2 Path Tutorial
The object underlying all of the matplotlib.patch objects is the Path , which supports the standard set of moveto, lineto, curveto commands to draw simple and compound outlines consisting of line segments and splines. The Path is instantiated with a (N,2) array of (x,y) vertices, and a N-length array of path codes. For example to draw the unit rectangle from (0,0) to (1,1), we could use this code
    import matplotlib.pyplot as plt
from matplotlib.path import Path import matplotlib.patches as patches
verts = [
(0., 0.), # left, bottom (0., 1.), # left, top (1., 1.), # right, top (1., 0.), # right, bottom (0., 0.), # ignored
]
codes = [Path.MOVETO,
         Path.LINETO,
         Path.LINETO,
         Path.LINETO,
         Path.CLOSEPOLY,
         ]
path = Path(verts, codes)
fig = plt.figure()
ax = fig.add_subplot(111)
patch = patches.PathPatch(path, facecolor='orange', lw=2) ax.add_patch(patch)
ax.set_xlim(-2,2)
ax.set_ylim(-2,2)
plt.show()
  3.3. Advanced 87

<Page 16>
Matplotlib, Release 2.0.2
  2.0 1.5 1.0 0.5 0.0 0.5 1.0 1.5 2.0
2.0 1.5 1.0
0.5 0.0
0.5 1.0
1.5 2.0
     The following path codes are recognized
 Code Vertices
MOVETO 1 LINETO 1
Bézier example
Description
Pick up the pen and move to the given vertex.
Draw a line from the current position to the given vertex.
   STOP
1 (ignored)
 A marker for the end of the entire path (currently not required and ignored)
      CURVE3
2 (1 control point, 1 endpoint)
 Draw a quadratic Bézier curve from the current position, with the given control point, to the given end point.
   CURVE4
3 (2 control points, 1 endpoint)
 Draw a cubic Bézier curve from the current position, with the given control points, to the given end point.
   CLOSEPO
LY1 (point itself is ignored)
 Draw a line segment to the start point of the current polyline.
    Some of the path components require multiple vertices to specify them: for example CURVE 3 is a bézier curve with one control point and one end point, and CURVE4 has three vertices for the two control points and the end point. The example below shows a CURVE4 Bézier spline – the bézier curve will be contained in the convex hull of the start point, the two control points, and the end point
    import matplotlib.pyplot as plt from matplotlib.path import Path
  88 Chapter3. Tutorials

<Page 17>
Matplotlib, Release 2.0.2
     import matplotlib.patches as patches
verts = [
(0., 0.), # P0
(0.2, 1.), # P1 (1., 0.8), # P2 (0.8, 0.), # P3 ]
codes = [Path.MOVETO,
         Path.CURVE4,
         Path.CURVE4,
         Path.CURVE4,
         ]
path = Path(verts, codes)
fig = plt.figure()
ax = fig.add_subplot(111)
patch = patches.PathPatch(path, facecolor='none', lw=2) ax.add_patch(patch)
xs, ys = zip(*verts)
ax.plot(xs, ys, 'x--', lw=2, color='black', ms=10)
ax.text(-0.05, -0.05, 'P0') ax.text(0.15, 1.05, 'P1') ax.text(1.05, 0.85, 'P2') ax.text(0.85, -0.05, 'P3')
ax.set_xlim(-0.1, 1.1)
ax.set_ylim(-0.1, 1.1)
plt.show()
  3.3. Advanced 89

<Page 18>
Matplotlib, Release 2.0.2
     P1
 P0
P3
P2
 1.0 0.8 0.6 0.4 0.2 0.0
0.0 0.2
0.4 0.6
0.8 1.0
Compound paths
All of the simple patch primitives in matplotlib, Rectangle, Circle, Polygon, etc, are implemented with simple path. Plotting functions like hist() and bar(), which create a number of primitives, e.g., a bunch of Rectangles, can usually be implemented more efficiently using a compound path. The reason bar creates a list of rectangles and not a compound path is largely historical: the Path code is comparatively new and bar predates it. While we could change it now, it would break old code, so here we will cover how to create compound paths, replacing the functionality in bar, in case you need to do so in your own code for efficiency reasons, e.g., you are creating an animated bar plot.
We will make the histogram chart by creating a series of rectangles for each histogram bar: the rectangle width is the bin width and the rectangle height is the number of datapoints in that bin. First we’ll create some random normally distributed data and compute the histogram. Because numpy returns the bin edges and not centers, the length of bins is 1 greater than the length of n in the example below:
We’ll now extract the corners of the rectangles. Each of the left, bottom, etc, arrays below is len(n), where n is the array of counts for each histogram bar:
    # histogram our data with numpy
data = np.random.randn(1000)
n, bins = np.histogram(data, 100)
  90 Chapter3. Tutorials

<Page 19>
Matplotlib, Release 2.0.2
     # get the corners of the rectangles for the histogram
left = np.array(bins[:-1])
right = np.array(bins[1:])
bottom = np.zeros(len(left))
top = bottom + n
 Now we have to construct our compound path, which will consist of a series of MOVETO, LINETO and CLOSEPOLY for each rectangle. For each rectangle, we need 5 vertices: 1 for the MOVETO, 3 for the LINETO, and 1 for the CLOSEPOLY. As indicated in the table above, the vertex for the closepoly is ignored but we still need it to keep the codes aligned with the vertices:
    nverts = nrects*(1+3+1)
verts = np.zeros((nverts, 2))
codes = np.ones(nverts, int) * path.Path.LINETO
codes[0::5] = path.Path.MOVETO
codes[4::5] = path.Path.CLOSEPOLY
verts[0::5,0] = left
verts[0::5,1] = bottom
verts[1::5,0] = left
verts[1::5,1] = top
verts[2::5,0] = right
verts[2::5,1] = top
verts[3::5,0] = right
verts[3::5,1] = bottom
 All that remains is to create the path, attach it to a PathPatch, and add it to our axes:
Here is the result
    barpath = path.Path(verts, codes)
patch = patches.PathPatch(barpath, facecolor='green',
edgecolor='yellow', alpha=0.5) ax.add_patch(patch)
  3.3. Advanced 91

<Page 20>
Matplotlib, Release 2.0.2
      35
30
25
20
15
10
5 0
32101234
 3.3.3 Path effects guide
Matplotlib’s patheffects module provides functionality to apply a multiple draw stage to any Artist which can be rendered via a Path.
Artists which can have a path effect applied to them include Patch, Line2D, Collection and even Text. Each artist’s path effects can be controlled via the set_path_effects method (set_path_effects), which takes an iterable of AbstractPathEffect instances.
The simplest path effect is the Normal effect, which simply draws the artist without any effect:
    import matplotlib.pyplot as plt
import matplotlib.patheffects as path_effects
fig = plt.figure(figsize=(5, 1.5))
text = fig.text(0.5, 0.5, 'Hello path effects world!\nThis is the normal '
'path effect.\nPretty dull, huh?', ha='center', va='center', size=20)
text.set_path_effects([path_effects.Normal()])
plt.show()
  92 Chapter3. Tutorials
