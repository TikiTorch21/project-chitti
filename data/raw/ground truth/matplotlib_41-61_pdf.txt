<Page 1>
Matplotlib, Release 2.0.2
  0
10
20
30
40
     0 10 20 30 40 50 60
  In [21]: imgplot = plt.imshow(img, interpolation="bicubic")
  3.1. Introductory 33

<Page 2>
Matplotlib, Release 2.0.2
  0
10
20
30
40
     0 10 20 30 40 50 60
Bicubic interpolation is often used when blowing up photos - people tend to prefer blurry over pixelated.
3.1.3 Customizing Location of Subplot Using GridSpec
GridSpec specifies the geometry of the grid that a subplot will be placed. The number of rows and number of columns of the grid need to be set. Optionally, the subplot layout parameters (e.g., left, right, etc.) can be tuned.
SubplotSpec specifies the location of the subplot in the given GridSpec.
subplot2grid() a helper function that is similar to subplot() but uses 0-based indexing
and let subplot to occupy multiple cells.
Basic Example of using subplot2grid
To use subplot2grid(), you provide geometry of the grid and the location of the subplot in the grid. For a simple single-cell subplot:
ax = plt.subplot2grid((2, 2), (0, 0)) is identical to
    34 Chapter3. Tutorials
<Page 3>
ax = plt.subplot(2, 2, 1)
Note that, unlike Matplotlib’s subplot, the index starts from 0 in GridSpec.
To create a subplot that spans multiple cells,
For example, the following commands
creates
Matplotlib, Release 2.0.2
        ax2 = plt.subplot2grid((3, 3), (1, 0), colspan=2)
ax3 = plt.subplot2grid((3, 3), (1, 2), rowspan=2)
     ax1 = plt.subplot2grid((3, 3), (0, 0), colspan=3)
ax2 = plt.subplot2grid((3, 3), (1, 0), colspan=2)
ax3 = plt.subplot2grid((3, 3), (1, 2), rowspan=2)
ax4 = plt.subplot2grid((3, 3), (2, 0))
ax5 = plt.subplot2grid((3, 3), (2, 1))
  subplot2grid
   ax1
   ax2
ax3
  ax4
ax5
GridSpec and SubplotSpec
You can create GridSpec explicitly and use them to create a subplot. For example,
 3.1. Introductory 35
<Page 4>
Matplotlib, Release 2.0.2
   ax = plt.subplot2grid((2, 2), (0, 0)) is equal to
A GridSpec instance provides array-like (2d or 1d) indexing that returns the SubplotSpec instance. For a SubplotSpec that spans multiple cells, use slice.
The above example becomes
     import matplotlib.gridspec as gridspec gs = gridspec.GridSpec(2, 2)
ax = plt.subplot(gs[0, 0])
     ax2 = plt.subplot(gs[1, :-1])
ax3 = plt.subplot(gs[1:, -1])
     gs = gridspec.GridSpec(3, 3)
ax1 = plt.subplot(gs[0, :])
ax2 = plt.subplot(gs[1, :-1])
ax3 = plt.subplot(gs[1:, -1])
ax4 = plt.subplot(gs[-1, 0])
ax5 = plt.subplot(gs[-1, -2])
  GridSpec
   ax1
   ax2
ax3
  ax4
ax5
 36 Chapter3. Tutorials

<Page 5>
Matplotlib, Release 2.0.2
 Adjust GridSpec layout
When a GridSpec is explicitly used, you can adjust the layout parameters of subplots that are created from the GridSpec.
This is similar to subplots_adjust(), but it only affects the subplots that are created from the given GridSpec.
The code below
    gs1 = gridspec.GridSpec(3, 3)
gs1.update(left=0.05, right=0.48, wspace=0.05)
     gs1 = gridspec.GridSpec(3, 3)
gs1.update(left=0.05, right=0.48, wspace=0.05)
ax1 = plt.subplot(gs1[:-1, :])
ax2 = plt.subplot(gs1[-1, :-1])
ax3 = plt.subplot(gs1[-1, -1])
gs2 = gridspec.GridSpec(3, 3)
gs2.update(left=0.55, right=0.98, hspace=0.05)
ax4 = plt.subplot(gs2[:, :-1])
ax5 = plt.subplot(gs2[:-1, -1])
ax6 = plt.subplot(gs2[-1, -1])
 creates
 GridSpec w/ different subplotpars
   ax1
    ax4
    ax5
  ax6
  ax2
   ax3
 3.1. Introductory 37

<Page 6>
Matplotlib, Release 2.0.2
 GridSpec using SubplotSpec
You can create GridSpec from the SubplotSpec, in which case its layout parameters are set to that of the location of the given SubplotSpec.
    gs0 = gridspec.GridSpec(1, 2)
gs00 = gridspec.GridSpecFromSubplotSpec(3, 3, subplot_spec=gs0[0])
gs01 = gridspec.GridSpecFromSubplotSpec(3, 3, subplot_spec=gs0[1])
  GirdSpec Inside GridSpec
   ax1
    ax4
  ax5
   ax2
ax3
ax6
A Complex Nested GridSpec using SubplotSpec
Here’s a more sophisticated example of nested GridSpec where we put a box around each cell of the outer 4x4 grid, by hiding appropriate spines in each of the inner 3x3 grids.
 38 Chapter3. Tutorials

<Page 7>
                                                                                       GridSpec with Varying Cell Sizes
By default, GridSpec creates cells of equal sizes. You can adjust relative heights and widths of rows and columns. Note that absolute values are meaningless, only their relative ratios matter.
3.1. Introductory 39
Matplotlib, Release 2.0.2
     gs = gridspec.GridSpec(2, 2,
                       width_ratios=[1, 2],
                       height_ratios=[4, 1]
                       )
ax1 = plt.subplot(gs[0])
ax2 = plt.subplot(gs[1])

<Page 8>
Matplotlib, Release 2.0.2
     ax3 = plt.subplot(gs[2])
ax4 = plt.subplot(gs[3])
      ax2
 ax1
  ax3
ax4
3.1.4 Tight Layout guide
tight_layout automatically adjusts subplot params so that the subplot(s) fits in to the figure area. This is an experimental feature and may not work for some cases. It only checks the extents of ticklabels, axis labels, and titles.
Simple Example
In matplotlib, the location of axes (including subplots) are specified in normalized figure coordinates. It can happen that your axis labels or titles (or sometimes even ticklabels) go outside the figure area, and are thus clipped.
    plt.rcParams['savefig.facecolor'] = "0.8"
def example_plot(ax, fontsize=12): ax.plot([1, 2])
ax.locator_params(nbins=3) ax.set_xlabel('x-label', fontsize=fontsize) ax.set_ylabel('y-label', fontsize=fontsize)
  40 Chapter3. Tutorials

<Page 9>
To prevent this, the location of axes needs to be adjusted. For subplots, this can be done by adjusting the subplot params (Move the edge of an axes to make room for tick labels). Matplotlib v1.1 introduces a new command tight_layout() that does this automatically for you.
3.1. Introductory 41
Matplotlib, Release 2.0.2
     ax.set_title('Title', fontsize=fontsize)
plt.close('all')
fig, ax = plt.subplots() example_plot(ax, fontsize=24)
  Title
     2.0
1.5
1.0
0.0
0.5 1.0 x-label
y-label
  plt.tight_layout()

<Page 10>
Matplotlib, Release 2.0.2
When you have multiple subplots, often you see labels of different axes overlapping each other.
42 Chapter3. Tutorials
  Title
     2.0
1.5
1.0
0.0
0.5 1.0 x-label
y-label
    plt.close('all')
fig, ((ax1, ax2), (ax3, ax4)) = plt.subplots(nrows=2, ncols=2) example_plot(ax1)
example_plot(ax2)
example_plot(ax3)
example_plot(ax4)
  
<Page 11>  
Matplotlib, Release 2.0.2
  2.0
1.5
1.0
0.0
2.0
1.5
1.0
0.0
0.5 1.0 Title
2.0
1.5
1.0 2.0
1.5
1.0
0.0
0.5 1.0 Title
Title
Title
0.5 1.0 x-label
0.0
0.5 1.0 x-label
 y-label
 x-label
 y-label
x-label
 y-label y-label
tight_layout() will also adjust spacing between subplots to minimize the overlaps. plt.tight_layout()
    3.1. Introductory 43

<Page 12>
Matplotlib, Release 2.0.2
  2.0
1.5
1.0
0.0
2.0
1.5
1.0
0.0
Title
0.5 1.0 x-label
Title
0.5 1.0 x-label
2.0
1.5
1.0
2.0
1.5
1.0
0.0
Title
0.5 1.0 x-label
Title
0.5 1.0 x-label
0.0
    y-label y-label
y-label y-label
tight_layout() can take keyword arguments of pad, w_pad and h_pad. These control the extra padding around the figure border and between subplots. The pads are specified in fraction of fontsize.
plt.tight_layout(pad=0.4, w_pad=0.5, h_pad=1.0)
    44 Chapter3. Tutorials
<Page 13>
tight_layout() will work even if the sizes of subplots are different as far as their grid specification is compatible. In the example below, ax1 and ax2 are subplots of a 2x2 grid, while ax3 is of a 1x2 grid.
3.1. Introductory 45

Matplotlib, Release 2.0.2
 2.0
1.5
1.0
0.0
2.0
1.5
1.0
0.0
0.5 1.0
x-label Title
2.0
1.5
1.0
2.0
1.5
1.0
0.0
0.5 1.0
x-label Title
Title
Title
0.5 1.0 x-label
0.0
0.5 1.0 x-label
     y-label y-label
y-label y-label
    plt.close('all') fig = plt.figure()
ax1 = plt.subplot(221)
ax2 = plt.subplot(223)
ax3 = plt.subplot(122)
example_plot(ax1)
example_plot(ax2)
example_plot(ax3)
plt.tight_layout()
  
<Page 14>  
Matplotlib, Release 2.0.2
  2.0 1.5 1.0
2.0 1.5 1.0
0.0 0.5 1.0 x-label
2.0
1.5
1.0
Title
0.0 0.5 x-label
1.0
0.0
0.5 1.0 x-label
Title
Title
       y-label
y-label
y-label
It works with subplots created with subplot2grid(). In general, subplots created from the gridspec (Cus- tomizing Location of Subplot Using GridSpec) will work.
    plt.close('all') fig = plt.figure()
ax1 = plt.subplot2grid((3, 3), (0, 0))
ax2 = plt.subplot2grid((3, 3), (0, 1), colspan=2)
ax3 = plt.subplot2grid((3, 3), (1, 0), colspan=2, rowspan=2)
ax4 = plt.subplot2grid((3, 3), (1, 2), rowspan=2)
example_plot(ax1)
example_plot(ax2)
example_plot(ax3)
example_plot(ax4)
plt.tight_layout()
  46 Chapter3. Tutorials

<Page 15>
Although not thoroughly tested, it seems to work for subplots with aspect != “auto” (e.g., axes with images).
Matplotlib, Release 2.0.2
  2.0 1.5 1.0
0.0
2.0
1.5
1.0
Title
0.5 1.0 x-label
2.0 1.5 1.0
Title
0.0
Title
0.5 x-label
2.0
1.5
1.0
1.0
0.0
0.5 x-label
1.0
0.0
0.5 1.0 x-label
Title
        y-label y-label
y-label
y-label
    arr = np.arange(100).reshape((10,10)) plt.close('all')
fig = plt.figure(figsize=(5,4))
ax = plt.subplot(111)
im = ax.imshow(arr, interpolation="none")
plt.tight_layout()
  3.1. Introductory 47

<Page 16>
Matplotlib, Release 2.0.2
      0
2
4
6
8
 02468
Caveats
• tight_layout() only considers ticklabels, axis labels, and titles. Thus, other artists may be clipped and also may overlap.
• It assumes that the extra space needed for ticklabels, axis labels, and titles is independent of original location of axes. This is often true, but there are rare cases where it is not.
• pad=0 clips some of the texts by a few pixels. This may be a bug or a limitation of the current algorithm and it is not clear why it happens. Meanwhile, use of pad at least larger than 0.3 is recom- mended.
Use with GridSpec
GridSpec has its own tight_layout() method (the pyplot api tight_layout() also works).
    plt.close('all') fig = plt.figure()
import matplotlib.gridspec as gridspec
gs1 = gridspec.GridSpec(2, 1)
ax1 = fig.add_subplot(gs1[0])
ax2 = fig.add_subplot(gs1[1])
  48 Chapter3. Tutorials

<Page 17>
Matplotlib, Release 2.0.2
     example_plot(ax1)
example_plot(ax2)
gs1.tight_layout(fig)
  2.0 1.5 1.0
2.0 1.5 1.0
0.0
Title
0.5 1.0 x-label
Title
0.5 1.0 x-label
0.0
          y-label y-label
You may provide an optional rect parameter, which specifies the bounding box that the subplots will be fit inside. The coordinates must be in normalized figure coordinates and the default is (0, 0, 1, 1).
gs1.tight_layout(fig, rect=[0, 0, 0.5, 1])
    3.1. Introductory 49

<Page 18>
Matplotlib, Release 2.0.2
  2.0
1.5
1.0
2.0
1.5
1.0
0.0
Title
0.5 1.0 x-label
Title
0.5 1.0 x-label
0.0
  y-label y-label
For example, this can be used for a figure with multiple gridspecs.
    gs2 = gridspec.GridSpec(3, 1)
for ss in gs2:
ax = fig.add_subplot(ss) example_plot(ax) ax.set_title("") ax.set_xlabel("")
ax.set_xlabel("x-label", fontsize=12)
gs2.tight_layout(fig, rect=[0.5, 0, 1, 1], h_pad=0.5)
  50 Chapter3. Tutorials

<Page 19>
Matplotlib, Release 2.0.2
  2.0
1.5
2.0
1.5
1.0
0.0 0.5 x-label
1.0
Title
2.0 1.5
1.0 2.0
1.5
1.0 2.0
1.5 1.0
1.0
0.0 0.5 1.0
0.0
0.0
0.0
0.5 1.0
0.5 1.0
0.5 1.0 x-label
x-label Title
     y-label y-label
y-label y-label y-label
We may try to match the top and bottom of two grids
While this should be mostly good enough, adjusting top and bottom may require adjustment of hspace also. To update hspace & vspace, we call tight_layout() again with updated rect argument. Note that the rect argument specifies the area including the ticklabels, etc. Thus, we will increase the bottom (which is 0 for the normal case) by the difference between the bottom from above and the bottom of each gridspec. Same thing for the top.
    top = min(gs1.top, gs2.top)
bottom = max(gs1.bottom, gs2.bottom)
gs1.update(top=top, bottom=bottom)
gs2.update(top=top, bottom=bottom)
     top = min(gs1.top, gs2.top)
bottom = max(gs1.bottom, gs2.bottom)
gs1.tight_layout(fig, rect=[None, 0 + (bottom-gs1.bottom),
                            0.5, 1 - (gs1.top-top)])
gs2.tight_layout(fig, rect=[0.5, 0 + (bottom-gs2.bottom),
                            None, 1 - (gs2.top-top)],
h_pad=0.5)
  3.1. Introductory 51

<Page 20>
Matplotlib, Release 2.0.2
  2.0
1.5
2.0 1.5
1.0 2.0
1.5
1.0 2.0
1.5 1.0
Title
1.0
0.0 0.5 1.0
0.0
0.0
0.0
0.5 1.0
0.5 1.0
0.5 1.0 x-label
2.0
1.5
1.0
x-label Title
0.0 0.5 x-label
1.0
     y-label y-label
y-label y-label y-label
Use with AxesGrid1
While limited, the axes_grid1 toolkit is also supported.
    plt.close('all') fig = plt.figure()
from mpl_toolkits.axes_grid1 import Grid
grid = Grid(fig, rect=111, nrows_ncols=(2,2),
axes_pad=0.25, label_mode='L', )
for ax in grid: example_plot(ax) ax.title.set_visible(False)
plt.tight_layout()
  52 Chapter3. Tutorials
