<Page 1>
See the plot() documentation for a complete list of line styles and format strings. The axis() command in the example above takes a list of [xmin, xmax, ymin, ymax] and specifies the viewport of the axes.
If matplotlib were limited to working with lists, it would be fairly useless for numeric processing. Generally, you will use numpy arrays. In fact, all sequences are converted to numpy arrays internally. The example below illustrates a plotting several lines with different format styles in one command using arrays.
Matplotlib, Release 2.0.2
  20.0 17.5 15.0 12.5 10.0
7.5 5.0 2.5 0.0
0123456
        import numpy as np
import matplotlib.pyplot as plt
# evenly sampled time at 200ms intervals
t = np.arange(0., 5., 0.2)
# red dashes, blue squares and green triangles
plt.plot(t, t, 'r--', t, t**2, 'bs', t, t**3, 'g^') plt.show()
  3.1. Introductory 13

<Page 2>
Matplotlib, Release 2.0.2
     100
 80
 60
 40
 20
  0
  012345
Controlling line properties
Lines have many attributes that you can set: linewidth, dash style, antialiased, etc; see matplotlib.lines. Line2D. There are several ways to set line properties
• Use keyword args:
plt.plot(x, y, linewidth=2.0)
• Use the setter methods of a Line2D instance. plot returns a list of Line2D objects; e.g., line1, line2 = plot(x1, y1, x2, y2). In the code below we will suppose that we have only one line so that the list returned is of length 1. We use tuple unpacking with line, to get the first element of that list:
       •
Use the setp() command. The example below uses a MATLAB-style command to set multiple properties on a list of lines. setp works transparently with a list of objects or a single object. You can either use python keyword arguments or MATLAB-style string/value pairs:
line, = plt.plot(x, y, '-') line.set_antialiased(False) # turn off antialising
     lines = plt.plot(x1, y1, x2, y2)
# use keyword args
plt.setp(lines, color='r', linewidth=2.0)
  14
Chapter3. Tutorials
<Page 3>
    # or MATLAB style string value pairs
plt.setp(lines, 'color', 'r', 'linewidth', 2.0)
 Here are the available Line2D properties.
Property
alpha
animated
antialiased or aa clip_box
clip_on
clip_path
color or c
contains
dash_capstyle dash_joinstyle
dashes
data
figure
label
linestyle or ls
linewidth or lw
lod
marker
markeredgecolor or mec markeredgewidth or mew markerfacecolor or mfc markersize or ms markevery
picker
pickradius
solid_capstyle solid_joinstyle
transform
visible
xdata
ydata
zorder
To get a list of settable line properties, call
Value Type
float
[True | False]
[True | False]
a matplotlib.transform.Bbox instance
[True | False]
a Path instance and a Transform instance, a Patch any matplotlib color
the hit testing function
['butt' | 'round' | 'projecting']
['miter' | 'round' | 'bevel']
sequence of on/off ink in points
(np.array xdata, np.array ydata)
a matplotlib.figure.Figure instance
any string
[ '-' | '--' | '-.' | ':' | 'steps' | ...]
float value in points
[True | False]
[ '+' | ',' | '.' | '1' | '2' | '3' | '4' ]
any matplotlib color
float value in points
any matplotlib color
float
[ None | integer | (startind, stride) ]
used in interactive line selection
the line pick selection radius
['butt' | 'round' | 'projecting']
['miter' | 'round' | 'bevel']
a matplotlib.transforms.Transform instance
[True | False]
np.array
np.array
any number
the setp() function with a line or lines as argument
Matplotlib, Release 2.0.2
                                       In [69]: lines = plt.plot([1, 2, 3])
In [70]: plt.setp(lines)
alpha: float
animated: [True | False] antialiased or aa: [True | False]
  3.1. Introductory
15

<Page 4>
Matplotlib, Release 2.0.2
   ...snip
Working with multiple figures and axes
MATLAB, and pyplot, have the concept of the current figure and the current axes. All plotting com- mands apply to the current axes. The function gca() returns the current axes (a matplotlib.axes.Axes instance), and gcf() returns the current figure (matplotlib.figure.Figure instance). Normally, you don’t have to worry about this, because it is all taken care of behind the scenes. Below is a script to create two subplots.
     import numpy as np
import matplotlib.pyplot as plt
def f(t):
return np.exp(-t) * np.cos(2*np.pi*t)
t1 = np.arange(0.0, 5.0, 0.1)
t2 = np.arange(0.0, 5.0, 0.02)
plt.figure(1)
plt.subplot(211)
plt.plot(t1, f(t1), 'bo', t2, f(t2), 'k')
plt.subplot(212)
plt.plot(t2, np.cos(2*np.pi*t2), 'r--') plt.show()
  16 Chapter3. Tutorials
<Page 5>

The figure() command here is optional because figure(1) will be created by default, just as a subplot(111) will be created by default if you don’t manually specify any axes. The subplot() com- mand specifies numrows, numcols, fignum where fignum ranges from 1 to numrows*numcols. The commas in the subplot command are optional if numrows*numcols<10. So subplot(211) is identical to subplot(2, 1, 1). You can create an arbitrary number of subplots and axes. If you want to place an axes manually, i.e., not on a rectangular grid, use the axes() command, which allows you to specify the location as axes([left, bottom, width, height]) where all values are in fractional (0 to 1) co- ordinates. See pylab_examples example code: axes_demo.py for an example of placing axes manually and pylab_examples example code: subplots_demo.py for an example with lots of subplots.
You can create multiple figures by using multiple figure() calls with an increasing figure number. Of course, each figure can contain as many axes and subplots as your heart desires:
Matplotlib, Release 2.0.2
     1.0 0.5 0.0 0.5
012345 1.0
0.5 0.0 0.5 1.0
       012345
    import matplotlib.pyplot as plt
plt.figure(1)
<Page 6>
plt.subplot(211)
plt.plot([1, 2, 3])
plt.subplot(212)
plt.plot([4, 5, 6])
plt.figure(2)
plt.plot([4, 5, 6])
plt.figure(1)
# the first figure
# the first subplot in the first figure
# the second subplot in the first figure
# a second figure
# creates a subplot(111) by default
# figure 1 current; subplot(212) still current
  3.1. Introductory 17

Matplotlib, Release 2.0.2
     plt.subplot(211) # make subplot(211) in figure1 current plt.title('Easy as 1, 2, 3') # subplot 211 title
 You can clear the current figure with clf() and the current axes with cla(). If you find it annoying that states (specifically the current image, figure and axes) are being maintained for you behind the scenes, don’t despair: this is just a thin stateful wrapper around an object oriented API, which you can use instead (see Artist tutorial)
If you are making lots of figures, you need to be aware of one more thing: the memory required for a figure is not completely released until the figure is explicitly closed with close(). Deleting all references to the figure, and/or using the window manager to kill the window in which the figure appears on the screen, is not enough, because pyplot maintains internal references until close() is called.
Working with text
The text() command can be used to add text in an arbitrary location, and the xlabel(), ylabel() and title() are used to add text in the indicated locations (see Text introduction for a more detailed example)
    import numpy as np
import matplotlib.pyplot as plt
# Fixing random state for reproducibility
np.random.seed(19680801)
mu, sigma = 100, 15
x = mu + sigma * np.random.randn(10000) # the histogram of the data
n, bins, patches = plt.hist(x, 50, normed=1, facecolor='g', alpha=0.75)
plt.xlabel('Smarts') plt.ylabel('Probability') plt.title('Histogram of IQ')
plt.text(60, .025, r'$\mu=100,\ \sigma=15$') plt.axis([40, 160, 0, 0.03])
plt.grid(True)
plt.show()
  18 Chapter3. Tutorials
<Page 7>

All of the text() commands return an matplotlib.text.Text instance. Just as with with lines above, you can customize the properties by passing keyword arguments into the text functions or using setp():
t = plt.xlabel('my data', fontsize=14, color='red')
These properties are covered in more detail in Text properties and layout.
Using mathematical expressions in text
matplotlib accepts TeX equation expressions in any text expression. For example to write the expression σi = 15 in the title, you can write a TeX expression surrounded by dollar signs:
plt.title(r'$\sigma_i=15$')
The r preceding the title string is important – it signifies that the string is a raw string and not to treat backslashes as python escapes. matplotlib has a built-in TeX expression parser and layout engine, and ships its own math fonts – for details see Writing mathematical expressions. Thus you can use mathematical text across platforms without requiring a TeX installation. For those who have LaTeX and dvipng installed, you can also use LaTeX to format your text and incorporate the output directly into your display figures or saved postscript – see Text rendering With LaTeX.
Matplotlib, Release 2.0.2
  0.030 0.025 0.020 0.015 0.010 0.005 0.000
Histogram of IQ
40 60 80 100 120 140 160 Smarts
   = 100, = 15
        Probability
             3.1. Introductory 19

<Page 8>
Matplotlib, Release 2.0.2
 Annotating text
The uses of the basic text() command above place text at an arbitrary position on the Axes. A common use for text is to annotate some feature of the plot, and the annotate() method provides helper functionality to make annotations easy. In an annotation, there are two points to consider: the location being annotated represented by the argument xy and the location of the text xytext. Both of these arguments are (x,y) tuples.
    import numpy as np
import matplotlib.pyplot as plt
ax = plt.subplot(111)
t = np.arange(0.0, 5.0, 0.01)
s = np.cos(2*np.pi*t)
line, = plt.plot(t, s, lw=2)
plt.annotate('local max', xy=(2, 1), xytext=(3, 1.5), arrowprops=dict(facecolor='black', shrink=0.05), )
plt.ylim(-2,2)
plt.show()
  2.0 1.5 1.0 0.5 0.0 0.5 1.0 1.5 2.0
012345
   local max
   In this basic example, both the xy (arrow tip) and xytext locations (text location) are in data coordinates. 20 Chapter3. Tutorials
 
<Page 9> 
Matplotlib, Release 2.0.2
 There are a variety of other coordinate systems one can choose – see Basic annotation and Advanced Anno- tation for details. More examples can be found in pylab_examples example code: annotation_demo.py.
Logarithmic and other nonlinear axes
matplotlib.pyplot supports not only linear axis scales, but also logarithmic and logit scales. This is commonly used if data spans many orders of magnitude. Changing the scale of an axis is easy:
plt.xscale(‘log’)
An example of four plots with the same data and different scales for the y axis is shown below.
    import numpy as np
import matplotlib.pyplot as plt
from matplotlib.ticker import NullFormatter # useful for `logit` scale # Fixing random state for reproducibility
np.random.seed(19680801)
# make up some data in the interval ]0, 1[
y = np.random.normal(loc=0.5, scale=0.4, size=1000)
y = y[(y > 0) & (y < 1)]
y.sort()
x = np.arange(len(y))
# plot with various axes scales
plt.figure(1)
# linear
plt.subplot(221) plt.plot(x, y) plt.yscale('linear') plt.title('linear') plt.grid(True)
# log
plt.subplot(222) plt.plot(x, y) plt.yscale('log') plt.title('log') plt.grid(True)
# symmetric log
plt.subplot(223)
plt.plot(x, y - y.mean()) plt.yscale('symlog', linthreshy=0.01) plt.title('symlog')
plt.grid(True)
# logit
  3.1. Introductory 21

<Page 10>
Matplotlib, Release 2.0.2
     plt.subplot(224) plt.plot(x, y) plt.yscale('logit') plt.title('logit') plt.grid(True)
# Format the minor tick labels of the y-axis into empty strings with
# `NullFormatter`, to avoid cumbering the axis with too many labels. plt.gca().yaxis.set_minor_formatter(NullFormatter())
# Adjust the subplot layout, because the logit one may take more space
# than usual, due to y-tick labels like "1 - 10^{-3}" plt.subplots_adjust(top=0.92, bottom=0.08, left=0.10, right=0.95, hspace=0.25,
plt.show()
wspace=0.35)
    1.0 0.8 0.6 0.4 0.2 0.0
10 1 10 2
0
10 2 10 1 100
0
250 500 750 symlog
100 10 1 10 2
1 103 0.99 0.90 0.50 0.10 0.01
0
250 500 750 logit
linear
log
                                   0
250 500 750
0
250 500 750
It is also possible to add your own scale, see Developer’s guide for creating scales and transformations for details.
3.1.2 Image tutorial
 22 Chapter3. Tutorials

<Page 11>
Startup commands
First, let’s start IPython. It is a most excellent enhancement to the standard Python prompt, and it ties in especially well with Matplotlib. Start IPython either at a shell, or the IPython Notebook now.
With IPython started, we now need to connect to a GUI event loop. This tells IPython where (and how) to display plots. To connect to a GUI loop, execute the %matplotlib magic at your IPython prompt. There’s more detail on exactly what this does at IPython’s documentation on GUI event loops.
If you’re using IPython Notebook, the same commands are available, but people commonly use a specific argument to the %matplotlib magic:
In [1]: %matplotlib inline
This turns on inline plotting, where plot graphics will appear in your notebook. This has important implica- tions for interactivity. For inline plotting, commands in cells below the cell that outputs a plot will not affect the plot. For example, changing the color map is not possible from cells below the cell that creates a plot. However, for other backends, such as qt4, that open a separate window, cells below those that create the plot will change the plot - it is a live object in memory.
This tutorial will use matplotlib’s imperative-style plotting interface, pyplot. This interface maintains global state, and is very useful for quickly and easily experimenting with various plot settings. The alternative is the object-oriented interface, which is also very powerful, and generally more suitable for large application development. If you’d like to learn about the object-oriented interface, a great place to start is our FAQ on usage. For now, let’s get on with the imperative-style approach:
Importing image data into Numpy arrays
Loading image data is supported by the Pillow library. Natively, matplotlib only supports PNG images. The commands shown below fall back on Pillow if the native read fails.
The image used in this example is a PNG file, but keep that Pillow requirement in mind for your own data. Here’s the image we’re going to play with:
Matplotlib, Release 2.0.2
        In [2]: import matplotlib.pyplot as plt
In [3]: import matplotlib.image as mpimg
In [4]: import numpy as np
  3.1. Introductory 23

<Page 12>
Matplotlib, Release 2.0.2
  It’s a 24-bit RGB PNG image (8 bits for each of R, G, B). Depending on where you get your data, the other kinds of image that you’ll most likely encounter are RGBA images, which allow for transparency, or single- channel grayscale (luminosity) images. You can right click on it and choose “Save image as” to download it to your computer for the rest of this tutorial.
And here we go...
    In [5]: img=mpimg.imread('stinkbug.png')
Out[5]:
array([[[ 0.40784314, 0.40784314, 0.40784314],
        [ 0.40784314,  0.40784314,  0.40784314],
        [ 0.40784314,  0.40784314,  0.40784314],
        ...,
        [ 0.42745098,  0.42745098,  0.42745098],
        [ 0.42745098,  0.42745098,  0.42745098],
        [ 0.42745098,  0.42745098,  0.42745098]],
       ...,
       [[ 0.44313726,  0.44313726,  0.44313726],
        [ 0.4509804 ,  0.4509804 ,  0.4509804 ],
        [ 0.4509804 ,  0.4509804 ,  0.4509804 ],
        ...,
        [ 0.44705883,  0.44705883,  0.44705883],
  24 Chapter3. Tutorials

<Page 13>
Matplotlib, Release 2.0.2
     [ 0.44705883,  0.44705883,  0.44705883],
[ 0.44313726,  0.44313726,  0.44313726]]], dtype=float32)
 Note the dtype there - float32. Matplotlib has rescaled the 8 bit data from each channel to floating point data between 0.0 and 1.0. As a side note, the only datatype that Pillow can work with is uint8. Matplotlib plotting can handle float32 and uint8, but image reading/writing for any format other than PNG is limited to uint8 data. Why 8 bits? Most displays can only render 8 bits per channel worth of color gradation. Why can they only render 8 bits/channel? Because that’s about all the human eye can see. More here (from a photography standpoint): Luminous Landscape bit depth tutorial.
Each inner list represents a pixel. Here, with an RGB image, there are 3 values. Since it’s a black and white image, R, G, and B are all similar. An RGBA (where A is alpha, or transparency), has 4 values per inner list, and a simple luminance image just has one value (and is thus only a 2-D array, not a 3-D array). For RGB and RGBA images, matplotlib supports float32 and uint8 data types. For grayscale, matplotlib supports only float32. If your array data does not meet one of these descriptions, you need to rescale it.
Plotting numpy arrays as images
So, you have your data in a numpy array (either by importing it, or by generating it). Let’s render it. In Matplotlib, this is performed using the imshow() function. Here we’ll grab the plot object. This object gives you an easy way to manipulate the plot from the prompt.
In [6]: imgplot = plt.imshow(img)
      0
 50
100
150
200
250
300
350
     0 100
200 300
400 500
 3.1. Introductory 25

<Page 14>
Matplotlib, Release 2.0.2
 You can also plot any numpy array.
Applying pseudocolor schemes to image plots
Pseudocolor can be a useful tool for enhancing contrast and visualizing your data more easily. This is especially useful when making presentations of your data using projectors - their contrast is typically quite poor.
Pseudocolor is only relevant to single-channel, grayscale, luminosity images. We currently have an RGB image. Since R, G, and B are all similar (see for yourself above or in your data), we can just pick one channel of our data:
In [7]: lum_img = img[:,:,0]
This is array slicing. You can read more in the Numpy tutorial.
In [8]: plt.imshow(lum_img)
Now, with a luminosity (2D, no color) image, the default colormap (aka lookup table, LUT), is applied. The default is called viridis. There are plenty of others to choose from.
In [9]: plt.imshow(lum_img, cmap="hot")
<Page 15>
         0
 50
100
150
200
250
300
350
     0 100
200 300
400 500
    26 Chapter3. Tutorials

Note that you can also change colormaps on existing plot objects using the set_cmap() method:
Matplotlib, Release 2.0.2
    0
 50
100
150
200
250
300
350
     0 100
200 300
400 500
    In [10]: imgplot = plt.imshow(lum_img)
In [11]: imgplot.set_cmap('nipy_spectral')
  3.1. Introductory 27

<Page 16>
Matplotlib, Release 2.0.2
    0
 50
100
150
200
250
300
350
     0 100
200 300
400 500
 Note: However, remember that in the IPython notebook with the inline backend, you can’t make changes to plots that have already been rendered. If you create imgplot here in one cell, you cannot call set_cmap() on it in a later cell and expect the earlier plot to change. Make sure that you enter these commands together in one cell. plt commands will not change plots from earlier cells.
There are many other colormap schemes available. See the list and images of the colormaps.
Color scale reference
It’s helpful to have an idea of what value a color represents. We can do that by adding color bars.
     In [12]: imgplot = plt.imshow(lum_img) In [13]: plt.colorbar()
  28 Chapter3. Tutorials

<Page 17>
Matplotlib, Release 2.0.2
     0
 50
100
150
200
250
300
350
0.8 0.7 0.6 0.5 0.4 0.3 0.2 0.1 0.0
     0 100
200 300
400 500
This adds a colorbar to your existing figure. This won’t automatically change if you change you switch to a different colormap - you have to re-create your plot, and add in the colorbar again.
Examining a specific data range
Sometimes you want to enhance the contrast in your image, or expand the contrast in a particular region while sacrificing the detail in colors that don’t vary much, or don’t matter. A good tool to find interesting regions is the histogram. To create a histogram of our image data, we use the hist() function.
In [14]: plt.hist(lum_img.ravel(), bins=256, range=(0.0, 1.0), fc='k', ec='k')
    3.1. Introductory 29

<Page 18>
Matplotlib, Release 2.0.2
      8000
6000
4000
2000
0
0.0 0.2
0.4 0.6
0.8 1.0
 Most often, the “interesting” part of the image is around the peak, and you can get extra contrast by clipping the regions above and/or below the peak. In our histogram, it looks like there’s not much useful information in the high end (not many white things in the image). Let’s adjust the upper limit, so that we effectively “zoom in on” part of the histogram. We do this by passing the clim argument to imshow. You could also do this by calling the set_clim() method of the image plot object, but make sure that you do so in the same cell as your plot command when working with the IPython Notebook - it will not change plots from earlier cells.
In [15]: imgplot = plt.imshow(lum_img, clim=(0.0, 0.7))
    30 Chapter3. Tutorials
<Page 19>
Array Interpolation schemes
Interpolation calculates what the color or value of a pixel “should” be, according to different mathematical schemes. One common place that this happens is when you resize an image. The number of pixels change, but you want the same information. Since pixels are discrete, there’s missing space. Interpolation is how you fill that space. This is why your images sometimes come out looking pixelated when you blow them up. The effect is more pronounced when the difference between the original image and the expanded image is greater. Let’s take our image and shrink it. We’re effectively discarding pixels, only keeping a select few. Now when we plot it, that data gets blown up to the size on your screen. The old pixels aren’t there anymore, and the computer has to draw in pixels to fill that space.
We’ll use the Pillow library that we used to load the image also to resize the image.
Matplotlib, Release 2.0.2
  0 100 200 300
Before
0 After
100 200 300
  0 200 400 0 200 400
0.1 0.3 0.5 0.7 0.1 0.3 0.5 0.7
      In [16]: from PIL import Image
In [17]: img = Image.open('../_static/stinkbug.png')
In [18]: img.thumbnail((64, 64), Image.ANTIALIAS) # resizes image in-place In [19]: imgplot = plt.imshow(img)
  3.1. Introductory 31
  
<Page 20>
Matplotlib, Release 2.0.2
  0
10
20
30
40
     0 10 20 30 40 50 60
Here we have the default interpolation, bilinear, since we did not give imshow() any interpolation argument. Let’s try some others:
In [20]: imgplot = plt.imshow(img, interpolation="nearest")
    32 Chapter3. Tutorials
