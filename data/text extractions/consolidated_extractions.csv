,pageNumber_pypdf,pdfId_pypdf,pageContent_pypdf,extractionTimeSeconds_pypdf,pageContent_pymupdf,extractionTimeSeconds_pymupdf,pageContent_pdfminer,extractionTimeSeconds_pdfminer,content_actual
0,0.0,matplotlib_41-61_pdf.pdf ~ 0,"Matplotlib, Release 2.0.2
0 10 20 30 40 50 60
0
10
20
30
40
In [21]: imgplot = plt.imshow(img, interpolation=""bicubic"")
3.1. Introductory 33",0.0059399604797363,"Matplotlib, Release 2.0.2
0
10
20
30
40
50
60
0
10
20
30
40
In [21]: imgplot = plt.imshow(img, interpolation=""bicubic"")
3.1. Introductory
33
",0.0131208896636962,"Matplotlib, Release 2.0.2
0 10 20 30 40 50 60
0
10
20
30
40
In [21]: imgplot = plt.imshow(img, interpolation=""bicubic"")
3.1. Introductory 33",0.0065522193908691,
1,1.0,matplotlib_41-61_pdf.pdf ~ 1,"Matplotlib, Release 2.0.2
0 10 20 30 40 50 60
0
10
20
30
40
Bicubic interpolation is often used when blowing up photos - people tend to prefer blurry over pixelated.
3.1.3 Customizing Location of Subplot Using GridSpec
GridSpec speciﬁes the geometry of the grid that a subplot will be placed. The number of
rows and number of columns of the grid need to be set. Optionally, the subplot layout
parameters (e.g., left, right, etc.) can be tuned.
SubplotSpec speciﬁes the location of the subplot in the given GridSpec.
subplot2grid() a helper function that is similar to subplot() but uses 0-based indexing
and let subplot to occupy multiple cells.
Basic Example of using subplot2grid
To use subplot2grid(), you provide geometry of the grid and the location of the subplot in the grid. For
a simple single-cell subplot:
ax = plt.subplot2grid((2, 2), (0, 0))
is identical to
34 Chapter 3. Tutorials",0.0088069438934326,"Matplotlib, Release 2.0.2
0
10
20
30
40
50
60
0
10
20
30
40
Bicubic interpolation is often used when blowing up photos - people tend to prefer blurry over pixelated.
3.1.3 Customizing Location of Subplot Using GridSpec
GridSpec speciﬁes the geometry of the grid that a subplot will be placed. The number of
rows and number of columns of the grid need to be set. Optionally, the subplot layout
parameters (e.g., left, right, etc.) can be tuned.
SubplotSpec speciﬁes the location of the subplot in the given GridSpec.
subplot2grid() a helper function that is similar to subplot() but uses 0-based indexing
and let subplot to occupy multiple cells.
Basic Example of using subplot2grid
To use subplot2grid(), you provide geometry of the grid and the location of the subplot in the grid. For
a simple single-cell subplot:
ax = plt.subplot2grid((2, 2), (0, 0))
is identical to
34
Chapter 3. Tutorials
",0.0030930042266845,"Matplotlib, Release 2.0.2
0 10 20 30 40 50 60
0
10
20
30
40
Bicubic interpolation is often used when blowing up photos - people tend to prefer blurry over pixelated.
3.1.3 Customizing Location of Subplot Using GridSpec
GridSpec speciﬁes the geometry of the grid that a subplot will be placed. The number of
rows and number of columns of the grid need to be set. Optionally, the subplot layout
parameters (e.g., left, right, etc.) can be tuned.
SubplotSpec speciﬁes the location of the subplot in the given GridSpec.
subplot2grid() a helper function that is similar to subplot() but uses 0-based indexing
and let subplot to occupy multiple cells.
Basic Example of using subplot2grid
To use subplot2grid(), you provide geometry of the grid and the location of the subplot in the grid. For
a simple single-cell subplot:
ax = plt.subplot2grid((2, 2), (0, 0))
is identical to
34 Chapter 3. Tutorials",0.0072169303894042,"1>
The Global Game: Basketball's Unifying Power in the Modern Era


From Peach Baskets to Global Phenomenon
The New Face of Professional Basketball
Numbers That Speak Volumes
Women Breaking Barriers
The Economic Slam Dunk
Technology: The Game Changer
Youth Development: Planting Seeds for Tomorrow
Urban Renaissance Through Basketball
The Future Game
Conclusion: More Than Just a Game


























"
2,2.0,matplotlib_41-61_pdf.pdf ~ 2,"Matplotlib, Release 2.0.2
ax = plt.subplot(2, 2, 1)
Note that, unlike Matplotlib’s subplot, the index starts from 0 in GridSpec.
To create a subplot that spans multiple cells,
ax2 = plt.subplot2grid((3, 3), (1, 0), colspan=2)
ax3 = plt.subplot2grid((3, 3), (1, 2), rowspan=2)
For example, the following commands
ax1 = plt.subplot2grid((3, 3), (0, 0), colspan=3)
ax2 = plt.subplot2grid((3, 3), (1, 0), colspan=2)
ax3 = plt.subplot2grid((3, 3), (1, 2), rowspan=2)
ax4 = plt.subplot2grid((3, 3), (2, 0))
ax5 = plt.subplot2grid((3, 3), (2, 1))
creates
ax1
ax2
ax3
ax4 ax5
subplot2grid
GridSpec and SubplotSpec
You can create GridSpec explicitly and use them to create a subplot.
For example,
3.1. Introductory 35",0.0065438747406005,"Matplotlib, Release 2.0.2
ax = plt.subplot(2, 2, 1)
Note that, unlike Matplotlib’s subplot, the index starts from 0 in GridSpec.
To create a subplot that spans multiple cells,
ax2 = plt.subplot2grid((3, 3), (1, 0), colspan=2)
ax3 = plt.subplot2grid((3, 3), (1, 2), rowspan=2)
For example, the following commands
ax1 = plt.subplot2grid((3, 3), (0, 0), colspan=3)
ax2 = plt.subplot2grid((3, 3), (1, 0), colspan=2)
ax3 = plt.subplot2grid((3, 3), (1, 2), rowspan=2)
ax4 = plt.subplot2grid((3, 3), (2, 0))
ax5 = plt.subplot2grid((3, 3), (2, 1))
creates
ax1
ax2
ax3
ax4
ax5
subplot2grid
GridSpec and SubplotSpec
You can create GridSpec explicitly and use them to create a subplot.
For example,
3.1. Introductory
35
",0.0016489028930664,"Matplotlib, Release 2.0.2
ax = plt.subplot(2, 2, 1)
Note that, unlike Matplotlib’s subplot, the index starts from 0 in GridSpec.
To create a subplot that spans multiple cells,
ax2 = plt.subplot2grid((3, 3), (1, 0), colspan=2)
ax3 = plt.subplot2grid((3, 3), (1, 2), rowspan=2)
For example, the following commands
ax1 = plt.subplot2grid((3, 3), (0, 0), colspan=3)
ax2 = plt.subplot2grid((3, 3), (1, 0), colspan=2)
ax3 = plt.subplot2grid((3, 3), (1, 2), rowspan=2)
ax4 = plt.subplot2grid((3, 3), (2, 0))
ax5 = plt.subplot2grid((3, 3), (2, 1))
creates
ax1
ax2
ax3
ax4 ax5
subplot2grid
GridSpec and SubplotSpec
You can create GridSpec explicitly and use them to create a subplot.
For example,
3.1. Introductory 35",0.0063631534576416,"2>
From Peach Baskets to Global Phenomenon
The story begins in Springfield, Massachusetts, 1891. Dr. James Naismith's simple invention of nailing peach baskets to a gymnasium wall has evolved into something extraordinary. Today's basketball landscape showcases a sport that has broken free from its American roots, becoming a cultural force that bridges continents and cultures. This transformation reflects not just athletic evolution, but a broader story of global connectivity and shared passion.
The New Face of Professional Basketball
The NBA's transformation tells a compelling story of basketball's globalization. Gone are the days when the league was predominantly American. Today's NBA features transcendent international talents like Nikola Jokić, Joel Embiid, and Giannis Antetokounmpo – players who have redefined excellence in the sport. Their success represents more than individual achievement; it symbolizes basketball's power to discover and nurture talent regardless of origin.

Numbers That Speak Volumes
The statistics paint a vivid picture of basketball's global reach. FIBA's latest reports indicate that over 450 million people actively play basketball worldwide. The NBA's global broadcast reaches 215 countries and territories in 47 languages. In the 2023-24 season, 125 international players from 40 countries graced NBA rosters on opening night. Perhaps most strikingly, China alone boasts 300 million basketball players – a number that exceeds the entire U.S. population.
Women Breaking Barriers
The women's game has written its own remarkable chapter in basketball's global story. The WNBA continues to expand its international influence, with stars like Jonquel Jones and Ezi Magbegor leading the charge. As WNBA Commissioner Cathy Engelbert notes, ""Women's basketball is experiencing unprecedented growth."" This growth manifests in increased viewership, engagement, and participation across demographics, creating new role models for aspiring female athletes worldwide.

"
3,3.0,matplotlib_41-61_pdf.pdf ~ 3,"Matplotlib, Release 2.0.2
ax = plt.subplot2grid((2, 2), (0, 0))
is equal to
import matplotlib.gridspec as gridspec
gs = gridspec.GridSpec(2, 2)
ax = plt.subplot(gs[0, 0])
A GridSpec instance provides array-like (2d or 1d) indexing that returns the SubplotSpec instance. For a
SubplotSpec that spans multiple cells, use slice.
ax2 = plt.subplot(gs[1, :-1])
ax3 = plt.subplot(gs[1:, -1])
The above example becomes
gs = gridspec.GridSpec(3, 3)
ax1 = plt.subplot(gs[0, :])
ax2 = plt.subplot(gs[1, :-1])
ax3 = plt.subplot(gs[1:, -1])
ax4 = plt.subplot(gs[-1, 0])
ax5 = plt.subplot(gs[-1, -2])
ax1
ax2
ax3
ax4 ax5
GridSpec
36 Chapter 3. Tutorials",0.0075929164886474,"Matplotlib, Release 2.0.2
ax = plt.subplot2grid((2, 2), (0, 0))
is equal to
import matplotlib.gridspec as gridspec
gs = gridspec.GridSpec(2, 2)
ax = plt.subplot(gs[0, 0])
A GridSpec instance provides array-like (2d or 1d) indexing that returns the SubplotSpec instance. For a
SubplotSpec that spans multiple cells, use slice.
ax2 = plt.subplot(gs[1, :-1])
ax3 = plt.subplot(gs[1:, -1])
The above example becomes
gs = gridspec.GridSpec(3, 3)
ax1 = plt.subplot(gs[0, :])
ax2 = plt.subplot(gs[1, :-1])
ax3 = plt.subplot(gs[1:, -1])
ax4 = plt.subplot(gs[-1, 0])
ax5 = plt.subplot(gs[-1, -2])
ax1
ax2
ax3
ax4
ax5
GridSpec
36
Chapter 3. Tutorials
",0.0016441345214843,"Matplotlib, Release 2.0.2
ax = plt.subplot2grid((2, 2), (0, 0))
is equal to
import matplotlib.gridspec as gridspec
gs = gridspec.GridSpec(2, 2)
ax = plt.subplot(gs[0, 0])
A GridSpec instance provides array-like (2d or 1d) indexing that returns the SubplotSpec instance. For a
SubplotSpec that spans multiple cells, use slice.
ax2 = plt.subplot(gs[1, :-1])
ax3 = plt.subplot(gs[1:, -1])
The above example becomes
gs = gridspec.GridSpec(3, 3)
ax1 = plt.subplot(gs[0, :])
ax2 = plt.subplot(gs[1, :-1])
ax3 = plt.subplot(gs[1:, -1])
ax4 = plt.subplot(gs[-1, 0])
ax5 = plt.subplot(gs[-1, -2])
ax1
ax2
ax3
ax4 ax5
GridSpec
36 Chapter 3. Tutorials",0.0097200870513916,"3>
The Economic Slam Dunk
Basketball's economic impact extends far beyond ticket sales and broadcasting rights. The NBA's revenue reached $10 billion in the 2022-24 season, with international markets playing an increasingly vital role. The sport has created economic ecosystems in developing nations through tourism, youth programs, and merchandise sales. Investment in basketball infrastructure worldwide has led to the emergence of prestigious competitions like Europe's EuroLeague and the African Basketball League.
Technology: The Game Changer
Modern technology has revolutionized how basketball is played, watched, and analyzed. Advanced analytics have become democratized, allowing teams worldwide to access sophisticated performance metrics. Social media has transformed player discovery, enabling talents from remote regions to gain global visibility. Virtual reality experiences and digital streaming have brought fans closer to the game than ever before, creating new ways to experience and appreciate basketball.

Youth Development: Planting Seeds for Tomorrow
Basketball's role in youth development extends beyond the court. Programs like Basketball Without Borders and Jr. NBA reach millions of young people annually, focusing not just on athletic skills but on building character, leadership, and global understanding. As Craig Brown, director of international youth programs, explains, ""We're building confidence, leadership skills, and global understanding through sport.""
Urban Renaissance Through Basketball
The sport's impact on urban development deserves special attention. Basketball courts have become essential components of urban planning worldwide, serving as community hubs that promote social interaction and youth engagement. From Harlem's Rucker Park to Manila's Tondo district, these spaces transcend their athletic purpose to become centers of community life and cultural exchange.

The Future Game
Looking ahead, basketball's trajectory suggests continued growth and evolution. The sport's accessibility, adaptability to local cultures, and ability to unite people across backgrounds position it uniquely for future expansion. The rise of 3x3 basketball as an Olympic sport opens new competitive avenues for nations with limited resources, while technological innovations promise to make the game even more engaging and accessible.
Conclusion: More Than Just a Game
Basketball's global journey from humble beginnings to worldwide phenomenon demonstrates the sport's unique ability to transcend cultural boundaries. As the game continues to evolve, its power to inspire, unite, and transform lives remains constant. In gymnasiums, playgrounds, and arenas across the world, basketball continues to write new chapters in its remarkable story of global impact and cultural unity
"
4,4.0,matplotlib_41-61_pdf.pdf ~ 4,"Matplotlib, Release 2.0.2
Adjust GridSpec layout
When a GridSpec is explicitly used, you can adjust the layout parameters of subplots that are created from
the GridSpec.
gs1 = gridspec.GridSpec(3, 3)
gs1.update(left=0.05, right=0.48, wspace=0.05)
This is similar to subplots_adjust(), but it only a ﬀects the subplots that are created from the given
GridSpec.
The code below
gs1 = gridspec.GridSpec(3, 3)
gs1.update(left=0.05, right=0.48, wspace=0.05)
ax1 = plt.subplot(gs1[:-1, :])
ax2 = plt.subplot(gs1[-1, :-1])
ax3 = plt.subplot(gs1[-1, -1])
gs2 = gridspec.GridSpec(3, 3)
gs2.update(left=0.55, right=0.98, hspace=0.05)
ax4 = plt.subplot(gs2[:, :-1])
ax5 = plt.subplot(gs2[:-1, -1])
ax6 = plt.subplot(gs2[-1, -1])
creates
ax1
ax2 ax3
ax4
ax5
ax6
GridSpec w/ different subplotpars
3.1. Introductory 37",0.0068612098693847,"Matplotlib, Release 2.0.2
Adjust GridSpec layout
When a GridSpec is explicitly used, you can adjust the layout parameters of subplots that are created from
the GridSpec.
gs1 = gridspec.GridSpec(3, 3)
gs1.update(left=0.05, right=0.48, wspace=0.05)
This is similar to subplots_adjust(), but it only aﬀects the subplots that are created from the given
GridSpec.
The code below
gs1 = gridspec.GridSpec(3, 3)
gs1.update(left=0.05, right=0.48, wspace=0.05)
ax1 = plt.subplot(gs1[:-1, :])
ax2 = plt.subplot(gs1[-1, :-1])
ax3 = plt.subplot(gs1[-1, -1])
gs2 = gridspec.GridSpec(3, 3)
gs2.update(left=0.55, right=0.98, hspace=0.05)
ax4 = plt.subplot(gs2[:, :-1])
ax5 = plt.subplot(gs2[:-1, -1])
ax6 = plt.subplot(gs2[-1, -1])
creates
ax1
ax2
ax3
ax4
ax5
ax6
GridSpec w/ different subplotpars
3.1. Introductory
37
",0.0025238990783691,"Matplotlib, Release 2.0.2
Adjust GridSpec layout
When a GridSpec is explicitly used, you can adjust the layout parameters of subplots that are created from
the GridSpec.
gs1 = gridspec.GridSpec(3, 3)
gs1.update(left=0.05, right=0.48, wspace=0.05)
This is similar to subplots_adjust(), but it only a ﬀects the subplots that are created from the given
GridSpec.
The code below
gs1 = gridspec.GridSpec(3, 3)
gs1.update(left=0.05, right=0.48, wspace=0.05)
ax1 = plt.subplot(gs1[:-1, :])
ax2 = plt.subplot(gs1[-1, :-1])
ax3 = plt.subplot(gs1[-1, -1])
gs2 = gridspec.GridSpec(3, 3)
gs2.update(left=0.55, right=0.98, hspace=0.05)
ax4 = plt.subplot(gs2[:, :-1])
ax5 = plt.subplot(gs2[:-1, -1])
ax6 = plt.subplot(gs2[-1, -1])
creates
ax1
ax2 ax3
ax4
ax5
ax6
GridSpec w/ different subplotpars
3.1. Introductory 37",0.0067741870880126,
5,5.0,matplotlib_41-61_pdf.pdf ~ 5,"Matplotlib, Release 2.0.2
GridSpec using SubplotSpec
You can create GridSpec from the SubplotSpec, in which case its layout parameters are set to that of the
location of the given SubplotSpec.
gs0 = gridspec.GridSpec(1, 2)
gs00 = gridspec.GridSpecFromSubplotSpec(3, 3, subplot_spec=gs0[0])
gs01 = gridspec.GridSpecFromSubplotSpec(3, 3, subplot_spec=gs0[1])
ax1
ax2 ax3
ax4
ax5
ax6
GirdSpec Inside GridSpec
A Complex Nested GridSpec using SubplotSpec
Here’s a more sophisticated example of nested GridSpec where we put a box around each cell of the outer
4x4 grid, by hiding appropriate spines in each of the inner 3x3 grids.
38 Chapter 3. Tutorials",0.0049920082092285,"Matplotlib, Release 2.0.2
GridSpec using SubplotSpec
You can create GridSpec from the SubplotSpec, in which case its layout parameters are set to that of the
location of the given SubplotSpec.
gs0 = gridspec.GridSpec(1, 2)
gs00 = gridspec.GridSpecFromSubplotSpec(3, 3, subplot_spec=gs0[0])
gs01 = gridspec.GridSpecFromSubplotSpec(3, 3, subplot_spec=gs0[1])
ax1
ax2
ax3
ax4
ax5
ax6
GirdSpec Inside GridSpec
A Complex Nested GridSpec using SubplotSpec
Here’s a more sophisticated example of nested GridSpec where we put a box around each cell of the outer
4x4 grid, by hiding appropriate spines in each of the inner 3x3 grids.
38
Chapter 3. Tutorials
",0.0016992092132568,"Matplotlib, Release 2.0.2
GridSpec using SubplotSpec
You can create GridSpec from the SubplotSpec, in which case its layout parameters are set to that of the
location of the given SubplotSpec.
gs0 = gridspec.GridSpec(1, 2)
gs00 = gridspec.GridSpecFromSubplotSpec(3, 3, subplot_spec=gs0[0])
gs01 = gridspec.GridSpecFromSubplotSpec(3, 3, subplot_spec=gs0[1])
ax1
ax2 ax3
ax4
ax5
ax6
GirdSpec Inside GridSpec
A Complex Nested GridSpec using SubplotSpec
Here’s a more sophisticated example of nested GridSpec where we put a box around each cell of the outer
4x4 grid, by hiding appropriate spines in each of the inner 3x3 grids.
38 Chapter 3. Tutorials",0.0049600601196289,"1>
What is GenAI?                          You give the AI some data, and using
                                        that data, that AI gives you whatever 
                                        you ask it for. Main thing to know is 
                                        that itʼs a field.

What is CHATGPT?                        A revolution that almost transformed 
                                        the way we interact with computers. 
                                        What are some of it's capabilities?
                                        -Web browsing
                                        - Advanced data analysis
                                        - Image processing
                                        - Voice interaction

What are the differences between        
ChapGPT, GPTs, and LLMS?                - Large language models that 
                                        basically understand and generate 
                                        natural language.
                                        - GPT's are a type of LLM.
                                        - ChatGPT is the application built on 
                                        GPT's

What is Natural Language
Processing?                             It's a field of the idea of computers 
                                        being able to understand language. 
                                        Divided into 3 main categories:
                                        1. Things like machine translation
                                        2. Things like human senses
                                        3. Things like text-to-speech and 
                                        automatic speech recognition

What is next word prediction?           Given a sequence of words, find the 
                                        next words. Essentially chooses the 
                                        next word in a sentence just by 
                                        filtering words with the highest 
                                        probability of occurring, and 
                                        choosing the top result.

"
6,6.0,matplotlib_41-61_pdf.pdf ~ 6,"Matplotlib, Release 2.0.2
GridSpec with Varying Cell Sizes
By default, GridSpec creates cells of equal sizes. You can adjust relative heights and widths of rows and
columns. Note that absolute values are meaningless, only their relative ratios matter.
gs = gridspec.GridSpec(2, 2,
width_ratios=[1, 2],
height_ratios=[4, 1]
)
ax1 = plt.subplot(gs[0])
ax2 = plt.subplot(gs[1])
3.1. Introductory 39",0.0874288082122802,"Matplotlib, Release 2.0.2
GridSpec with Varying Cell Sizes
By default, GridSpec creates cells of equal sizes. You can adjust relative heights and widths of rows and
columns. Note that absolute values are meaningless, only their relative ratios matter.
gs = gridspec.GridSpec(2, 2,
width_ratios=[1, 2],
height_ratios=[4, 1]
)
ax1 = plt.subplot(gs[0])
ax2 = plt.subplot(gs[1])
3.1. Introductory
39
",0.0056879520416259,"Matplotlib, Release 2.0.2
GridSpec with Varying Cell Sizes
By default, GridSpec creates cells of equal sizes. You can adjust relative heights and widths of rows and
columns. Note that absolute values are meaningless, only their relative ratios matter.
gs = gridspec.GridSpec(2, 2,
width_ratios=[1, 2],
height_ratios=[4, 1]
)
ax1 = plt.subplot(gs[0])
ax2 = plt.subplot(gs[1])
3.1. Introductory 39",0.089202880859375,"2>
What is N-Gram language?                First early rendition of language 
                                        models in the pre-deep learning era 
                                        Problems?
                                        1. Seed text might not exist in the 
                                        training data
                                        2. Exact phrasing might not exist. 
                                        Talked about Neural networks..(don't need to know for class)"
7,7.0,matplotlib_41-61_pdf.pdf ~ 7,"Matplotlib, Release 2.0.2
ax3 = plt.subplot(gs[2])
ax4 = plt.subplot(gs[3])
ax1 ax2
ax3 ax4
3.1.4 Tight Layout guide
tight_layout automatically adjusts subplot params so that the subplot(s) ﬁts in to the ﬁgure area. This is an
experimental feature and may not work for some cases. It only checks the extents of ticklabels, axis labels,
and titles.
Simple Example
In matplotlib, the location of axes (including subplots) are speciﬁed in normalized ﬁgure coordinates. It can
happen that your axis labels or titles (or sometimes even ticklabels) go outside the ﬁgure area, and are thus
clipped.
plt.rcParams['savefig.facecolor'] = ""0.8""
def example_plot(ax, fontsize=12):
ax.plot([1, 2])
ax.locator_params(nbins=3)
ax.set_xlabel('x-label', fontsize=fontsize)
ax.set_ylabel('y-label', fontsize=fontsize)
40 Chapter 3. Tutorials",0.006458044052124,"Matplotlib, Release 2.0.2
ax3 = plt.subplot(gs[2])
ax4 = plt.subplot(gs[3])
ax1
ax2
ax3
ax4
3.1.4 Tight Layout guide
tight_layout automatically adjusts subplot params so that the subplot(s) ﬁts in to the ﬁgure area. This is an
experimental feature and may not work for some cases. It only checks the extents of ticklabels, axis labels,
and titles.
Simple Example
In matplotlib, the location of axes (including subplots) are speciﬁed in normalized ﬁgure coordinates. It can
happen that your axis labels or titles (or sometimes even ticklabels) go outside the ﬁgure area, and are thus
clipped.
plt.rcParams['savefig.facecolor'] = ""0.8""
def example_plot(ax, fontsize=12):
ax.plot([1, 2])
ax.locator_params(nbins=3)
ax.set_xlabel('x-label', fontsize=fontsize)
ax.set_ylabel('y-label', fontsize=fontsize)
40
Chapter 3. Tutorials
",0.0012459754943847,"Matplotlib, Release 2.0.2
ax3 = plt.subplot(gs[2])
ax4 = plt.subplot(gs[3])
ax1 ax2
ax3 ax4
3.1.4 Tight Layout guide
tight_layout automatically adjusts subplot params so that the subplot(s) ﬁts in to the ﬁgure area. This is an
experimental feature and may not work for some cases. It only checks the extents of ticklabels, axis labels,
and titles.
Simple Example
In matplotlib, the location of axes (including subplots) are speciﬁed in normalized ﬁgure coordinates. It can
happen that your axis labels or titles (or sometimes even ticklabels) go outside the ﬁgure area, and are thus
clipped.
plt.rcParams['savefig.facecolor'] = ""0.8""
def example_plot(ax, fontsize=12):
ax.plot([1, 2])
ax.locator_params(nbins=3)
ax.set_xlabel('x-label', fontsize=fontsize)
ax.set_ylabel('y-label', fontsize=fontsize)
40 Chapter 3. Tutorials",0.0062389373779296,
8,8.0,matplotlib_41-61_pdf.pdf ~ 8,"Matplotlib, Release 2.0.2
ax.set_title('Title', fontsize=fontsize)
plt.close('all')
fig, ax = plt.subplots()
example_plot(ax, fontsize=24)
0.0 0.5 1.0
x-label
1.0
1.5
2.0
y-label
Title
To prevent this, the location of axes needs to be adjusted. For subplots, this can be done by adjusting the
subplot params (Move the edge of an axes to make room for tick labels ). Matplotlib v1.1 introduces a new
command tight_layout() that does this automatically for you.
plt.tight_layout()
3.1. Introductory 41",0.0048990249633789,"Matplotlib, Release 2.0.2
ax.set_title('Title', fontsize=fontsize)
plt.close('all')
fig, ax = plt.subplots()
example_plot(ax, fontsize=24)
0.0
0.5
1.0
x-label
1.0
1.5
2.0
y-label
Title
To prevent this, the location of axes needs to be adjusted. For subplots, this can be done by adjusting the
subplot params (Move the edge of an axes to make room for tick labels). Matplotlib v1.1 introduces a new
command tight_layout() that does this automatically for you.
plt.tight_layout()
3.1. Introductory
41
",0.0008368492126464,"Matplotlib, Release 2.0.2
ax.set_title('Title', fontsize=fontsize)
plt.close('all')
fig, ax = plt.subplots()
example_plot(ax, fontsize=24)
0.0 0.5 1.0
x-label
1.0
1.5
2.0
y-label
Title
To prevent this, the location of axes needs to be adjusted. For subplots, this can be done by adjusting the
subplot params (Move the edge of an axes to make room for tick labels ). Matplotlib v1.1 introduces a new
command tight_layout() that does this automatically for you.
plt.tight_layout()
3.1. Introductory 41",0.0043368339538574,"1>
See the plot() documentation for a complete list of line styles and format strings. The axis() command in the example above takes a list of [xmin, xmax, ymin, ymax] and specifies the viewport of the axes.
If matplotlib were limited to working with lists, it would be fairly useless for numeric processing. Generally, you will use numpy arrays. In fact, all sequences are converted to numpy arrays internally. The example below illustrates a plotting several lines with different format styles in one command using arrays.
Matplotlib, Release 2.0.2
  20.0 17.5 15.0 12.5 10.0
7.5 5.0 2.5 0.0
0123456
        import numpy as np
import matplotlib.pyplot as plt
# evenly sampled time at 200ms intervals
t = np.arange(0., 5., 0.2)
# red dashes, blue squares and green triangles
plt.plot(t, t, 'r--', t, t**2, 'bs', t, t**3, 'g^') plt.show()
  3.1. Introductory 13

"
9,9.0,matplotlib_41-61_pdf.pdf ~ 9,"Matplotlib, Release 2.0.2
0.0 0.5 1.0
x-label
1.0
1.5
2.0
y-label
Title
When you have multiple subplots, often you see labels of diﬀerent axes overlapping each other.
plt.close('all')
fig, ((ax1, ax2), (ax3, ax4)) = plt.subplots(nrows=2, ncols=2)
example_plot(ax1)
example_plot(ax2)
example_plot(ax3)
example_plot(ax4)
42 Chapter 3. Tutorials",0.0037958621978759,"Matplotlib, Release 2.0.2
0.0
0.5
1.0
x-label
1.0
1.5
2.0
y-label
Title
When you have multiple subplots, often you see labels of diﬀerent axes overlapping each other.
plt.close('all')
fig, ((ax1, ax2), (ax3, ax4)) = plt.subplots(nrows=2, ncols=2)
example_plot(ax1)
example_plot(ax2)
example_plot(ax3)
example_plot(ax4)
42
Chapter 3. Tutorials
",0.0006117820739746,"Matplotlib, Release 2.0.2
0.0 0.5 1.0
x-label
1.0
1.5
2.0
y-label
Title
When you have multiple subplots, often you see labels of diﬀerent axes overlapping each other.
plt.close('all')
fig, ((ax1, ax2), (ax3, ax4)) = plt.subplots(nrows=2, ncols=2)
example_plot(ax1)
example_plot(ax2)
example_plot(ax3)
example_plot(ax4)
42 Chapter 3. Tutorials",0.0031092166900634,"2>
Matplotlib, Release 2.0.2
     100
 80
 60
 40
 20
  0
  012345
Controlling line properties
Lines have many attributes that you can set: linewidth, dash style, antialiased, etc; see matplotlib.lines. Line2D. There are several ways to set line properties
• Use keyword args:
plt.plot(x, y, linewidth=2.0)
• Use the setter methods of a Line2D instance. plot returns a list of Line2D objects; e.g., line1, line2 = plot(x1, y1, x2, y2). In the code below we will suppose that we have only one line so that the list returned is of length 1. We use tuple unpacking with line, to get the first element of that list:
       •
Use the setp() command. The example below uses a MATLAB-style command to set multiple properties on a list of lines. setp works transparently with a list of objects or a single object. You can either use python keyword arguments or MATLAB-style string/value pairs:
line, = plt.plot(x, y, '-') line.set_antialiased(False) # turn off antialising
     lines = plt.plot(x1, y1, x2, y2)
# use keyword args
plt.setp(lines, color='r', linewidth=2.0)
  14
Chapter3. Tutorials
"
10,10.0,matplotlib_41-61_pdf.pdf ~ 10,"Matplotlib, Release 2.0.2
0.0 0.5 1.0
x-label
1.0
1.5
2.0y-label
Title
0.0 0.5 1.0
x-label
1.0
1.5
2.0y-label
Title
0.0 0.5 1.0
x-label
1.0
1.5
2.0y-label
Title
0.0 0.5 1.0
x-label
1.0
1.5
2.0y-label
Title
tight_layout() will also adjust spacing between subplots to minimize the overlaps.
plt.tight_layout()
3.1. Introductory 43",0.0057017803192138,"Matplotlib, Release 2.0.2
0.0
0.5
1.0
x-label
1.0
1.5
2.0
y-label
Title
0.0
0.5
1.0
x-label
1.0
1.5
2.0
y-label
Title
0.0
0.5
1.0
x-label
1.0
1.5
2.0
y-label
Title
0.0
0.5
1.0
x-label
1.0
1.5
2.0
y-label
Title
tight_layout() will also adjust spacing between subplots to minimize the overlaps.
plt.tight_layout()
3.1. Introductory
43
",0.0006980895996093,"Matplotlib, Release 2.0.2
0.0 0.5 1.0
x-label
1.0
1.5
2.0y-label
Title
0.0 0.5 1.0
x-label
1.0
1.5
2.0y-label
Title
0.0 0.5 1.0
x-label
1.0
1.5
2.0y-label
Title
0.0 0.5 1.0
x-label
1.0
1.5
2.0y-label
Title
tight_layout() will also adjust spacing between subplots to minimize the overlaps.
plt.tight_layout()
3.1. Introductory 43",0.0044031143188476,"3>
    # or MATLAB style string value pairs
plt.setp(lines, 'color', 'r', 'linewidth', 2.0)
 Here are the available Line2D properties.
Property
alpha
animated
antialiased or aa clip_box
clip_on
clip_path
color or c
contains
dash_capstyle dash_joinstyle
dashes
data
figure
label
linestyle or ls
linewidth or lw
lod
marker
markeredgecolor or mec markeredgewidth or mew markerfacecolor or mfc markersize or ms markevery
picker
pickradius
solid_capstyle solid_joinstyle
transform
visible
xdata
ydata
zorder
To get a list of settable line properties, call
Value Type
float
[True | False]
[True | False]
a matplotlib.transform.Bbox instance
[True | False]
a Path instance and a Transform instance, a Patch any matplotlib color
the hit testing function
['butt' | 'round' | 'projecting']
['miter' | 'round' | 'bevel']
sequence of on/off ink in points
(np.array xdata, np.array ydata)
a matplotlib.figure.Figure instance
any string
[ '-' | '--' | '-.' | ':' | 'steps' | ...]
float value in points
[True | False]
[ '+' | ',' | '.' | '1' | '2' | '3' | '4' ]
any matplotlib color
float value in points
any matplotlib color
float
[ None | integer | (startind, stride) ]
used in interactive line selection
the line pick selection radius
['butt' | 'round' | 'projecting']
['miter' | 'round' | 'bevel']
a matplotlib.transforms.Transform instance
[True | False]
np.array
np.array
any number
the setp() function with a line or lines as argument
Matplotlib, Release 2.0.2
                                       In [69]: lines = plt.plot([1, 2, 3])
In [70]: plt.setp(lines)
alpha: float
animated: [True | False] antialiased or aa: [True | False]
  3.1. Introductory
15

"
11,11.0,matplotlib_41-61_pdf.pdf ~ 11,"Matplotlib, Release 2.0.2
0.0 0.5 1.0
x-label
1.0
1.5
2.0y-label
Title
0.0 0.5 1.0
x-label
1.0
1.5
2.0y-label
Title
0.0 0.5 1.0
x-label
1.0
1.5
2.0y-label
Title
0.0 0.5 1.0
x-label
1.0
1.5
2.0y-label
Title
tight_layout() can take keyword arguments of pad, w_pad and h_pad. These control the extra padding
around the ﬁgure border and between subplots. The pads are speciﬁed in fraction of fontsize.
plt.tight_layout(pad=0.4, w_pad=0.5, h_pad=1.0)
44 Chapter 3. Tutorials",0.0059778690338134,"Matplotlib, Release 2.0.2
0.0
0.5
1.0
x-label
1.0
1.5
2.0
y-label
Title
0.0
0.5
1.0
x-label
1.0
1.5
2.0
y-label
Title
0.0
0.5
1.0
x-label
1.0
1.5
2.0
y-label
Title
0.0
0.5
1.0
x-label
1.0
1.5
2.0
y-label
Title
tight_layout() can take keyword arguments of pad, w_pad and h_pad. These control the extra padding
around the ﬁgure border and between subplots. The pads are speciﬁed in fraction of fontsize.
plt.tight_layout(pad=0.4, w_pad=0.5, h_pad=1.0)
44
Chapter 3. Tutorials
",0.0008070468902587,"Matplotlib, Release 2.0.2
0.0 0.5 1.0
x-label
1.0
1.5
2.0y-label
Title
0.0 0.5 1.0
x-label
1.0
1.5
2.0y-label
Title
0.0 0.5 1.0
x-label
1.0
1.5
2.0y-label
Title
0.0 0.5 1.0
x-label
1.0
1.5
2.0y-label
Title
tight_layout() can take keyword arguments of pad, w_pad and h_pad. These control the extra padding
around the ﬁgure border and between subplots. The pads are speciﬁed in fraction of fontsize.
plt.tight_layout(pad=0.4, w_pad=0.5, h_pad=1.0)
44 Chapter 3. Tutorials",0.0049159526824951,"4>
Matplotlib, Release 2.0.2
   ...snip
Working with multiple figures and axes
MATLAB, and pyplot, have the concept of the current figure and the current axes. All plotting com- mands apply to the current axes. The function gca() returns the current axes (a matplotlib.axes.Axes instance), and gcf() returns the current figure (matplotlib.figure.Figure instance). Normally, you don’t have to worry about this, because it is all taken care of behind the scenes. Below is a script to create two subplots.
     import numpy as np
import matplotlib.pyplot as plt
def f(t):
return np.exp(-t) * np.cos(2*np.pi*t)
t1 = np.arange(0.0, 5.0, 0.1)
t2 = np.arange(0.0, 5.0, 0.02)
plt.figure(1)
plt.subplot(211)
plt.plot(t1, f(t1), 'bo', t2, f(t2), 'k')
plt.subplot(212)
plt.plot(t2, np.cos(2*np.pi*t2), 'r--') plt.show()
  16 Chapter3. Tutorials
"
12,12.0,matplotlib_41-61_pdf.pdf ~ 12,"Matplotlib, Release 2.0.2
0.0 0.5 1.0
x-label
1.0
1.5
2.0y-label
Title
0.0 0.5 1.0
x-label
1.0
1.5
2.0y-label
Title
0.0 0.5 1.0
x-label
1.0
1.5
2.0y-label
Title
0.0 0.5 1.0
x-label
1.0
1.5
2.0y-label
Title
tight_layout() will work even if the sizes of subplots are di ﬀerent as far as their grid speciﬁcation is
compatible. In the example below, ax1 and ax2 are subplots of a 2x2 grid, while ax3 is of a 1x2 grid.
plt.close('all')
fig = plt.figure()
ax1 = plt.subplot(221)
ax2 = plt.subplot(223)
ax3 = plt.subplot(122)
example_plot(ax1)
example_plot(ax2)
example_plot(ax3)
plt.tight_layout()
3.1. Introductory 45",0.0055408477783203,"Matplotlib, Release 2.0.2
0.0
0.5
1.0
x-label
1.0
1.5
2.0
y-label
Title
0.0
0.5
1.0
x-label
1.0
1.5
2.0
y-label
Title
0.0
0.5
1.0
x-label
1.0
1.5
2.0
y-label
Title
0.0
0.5
1.0
x-label
1.0
1.5
2.0
y-label
Title
tight_layout() will work even if the sizes of subplots are diﬀerent as far as their grid speciﬁcation is
compatible. In the example below, ax1 and ax2 are subplots of a 2x2 grid, while ax3 is of a 1x2 grid.
plt.close('all')
fig = plt.figure()
ax1 = plt.subplot(221)
ax2 = plt.subplot(223)
ax3 = plt.subplot(122)
example_plot(ax1)
example_plot(ax2)
example_plot(ax3)
plt.tight_layout()
3.1. Introductory
45
",0.0009610652923583,"Matplotlib, Release 2.0.2
0.0 0.5 1.0
x-label
1.0
1.5
2.0y-label
Title
0.0 0.5 1.0
x-label
1.0
1.5
2.0y-label
Title
0.0 0.5 1.0
x-label
1.0
1.5
2.0y-label
Title
0.0 0.5 1.0
x-label
1.0
1.5
2.0y-label
Title
tight_layout() will work even if the sizes of subplots are di ﬀerent as far as their grid speciﬁcation is
compatible. In the example below, ax1 and ax2 are subplots of a 2x2 grid, while ax3 is of a 1x2 grid.
plt.close('all')
fig = plt.figure()
ax1 = plt.subplot(221)
ax2 = plt.subplot(223)
ax3 = plt.subplot(122)
example_plot(ax1)
example_plot(ax2)
example_plot(ax3)
plt.tight_layout()
3.1. Introductory 45",0.0054762363433837,"5>

The figure() command here is optional because figure(1) will be created by default, just as a subplot(111) will be created by default if you don’t manually specify any axes. The subplot() com- mand specifies numrows, numcols, fignum where fignum ranges from 1 to numrows*numcols. The commas in the subplot command are optional if numrows*numcols<10. So subplot(211) is identical to subplot(2, 1, 1). You can create an arbitrary number of subplots and axes. If you want to place an axes manually, i.e., not on a rectangular grid, use the axes() command, which allows you to specify the location as axes([left, bottom, width, height]) where all values are in fractional (0 to 1) co- ordinates. See pylab_examples example code: axes_demo.py for an example of placing axes manually and pylab_examples example code: subplots_demo.py for an example with lots of subplots.
You can create multiple figures by using multiple figure() calls with an increasing figure number. Of course, each figure can contain as many axes and subplots as your heart desires:
Matplotlib, Release 2.0.2
     1.0 0.5 0.0 0.5
012345 1.0
0.5 0.0 0.5 1.0
       012345
    import matplotlib.pyplot as plt
plt.figure(1)
"
13,13.0,matplotlib_41-61_pdf.pdf ~ 13,"Matplotlib, Release 2.0.2
0.0 0.5 1.0
x-label
1.0
1.5
2.0y-label
Title
0.0 0.5 1.0
x-label
1.0
1.5
2.0y-label
Title
0.0 0.5 1.0
x-label
1.0
1.5
2.0y-label
Title
It works with subplots created with subplot2grid(). In general, subplots created from the gridspec (Cus-
tomizing Location of Subplot Using GridSpec) will work.
plt.close('all')
fig = plt.figure()
ax1 = plt.subplot2grid((3, 3), (0, 0))
ax2 = plt.subplot2grid((3, 3), (0, 1), colspan=2)
ax3 = plt.subplot2grid((3, 3), (1, 0), colspan=2, rowspan=2)
ax4 = plt.subplot2grid((3, 3), (1, 2), rowspan=2)
example_plot(ax1)
example_plot(ax2)
example_plot(ax3)
example_plot(ax4)
plt.tight_layout()
46 Chapter 3. Tutorials",0.005552053451538,"Matplotlib, Release 2.0.2
0.0
0.5
1.0
x-label
1.0
1.5
2.0
y-label
Title
0.0
0.5
1.0
x-label
1.0
1.5
2.0
y-label
Title
0.0
0.5
1.0
x-label
1.0
1.5
2.0
y-label
Title
It works with subplots created with subplot2grid(). In general, subplots created from the gridspec (Cus-
tomizing Location of Subplot Using GridSpec) will work.
plt.close('all')
fig = plt.figure()
ax1 = plt.subplot2grid((3, 3), (0, 0))
ax2 = plt.subplot2grid((3, 3), (0, 1), colspan=2)
ax3 = plt.subplot2grid((3, 3), (1, 0), colspan=2, rowspan=2)
ax4 = plt.subplot2grid((3, 3), (1, 2), rowspan=2)
example_plot(ax1)
example_plot(ax2)
example_plot(ax3)
example_plot(ax4)
plt.tight_layout()
46
Chapter 3. Tutorials
",0.0010061264038085,"Matplotlib, Release 2.0.2
0.0 0.5 1.0
x-label
1.0
1.5
2.0y-label
Title
0.0 0.5 1.0
x-label
1.0
1.5
2.0y-label
Title
0.0 0.5 1.0
x-label
1.0
1.5
2.0y-label
Title
It works with subplots created with subplot2grid(). In general, subplots created from the gridspec (Cus-
tomizing Location of Subplot Using GridSpec) will work.
plt.close('all')
fig = plt.figure()
ax1 = plt.subplot2grid((3, 3), (0, 0))
ax2 = plt.subplot2grid((3, 3), (0, 1), colspan=2)
ax3 = plt.subplot2grid((3, 3), (1, 0), colspan=2, rowspan=2)
ax4 = plt.subplot2grid((3, 3), (1, 2), rowspan=2)
example_plot(ax1)
example_plot(ax2)
example_plot(ax3)
example_plot(ax4)
plt.tight_layout()
46 Chapter 3. Tutorials",0.0064740180969238,"6>
plt.subplot(211)
plt.plot([1, 2, 3])
plt.subplot(212)
plt.plot([4, 5, 6])
plt.figure(2)
plt.plot([4, 5, 6])
plt.figure(1)
# the first figure
# the first subplot in the first figure
# the second subplot in the first figure
# a second figure
# creates a subplot(111) by default
# figure 1 current; subplot(212) still current
  3.1. Introductory 17

Matplotlib, Release 2.0.2
     plt.subplot(211) # make subplot(211) in figure1 current plt.title('Easy as 1, 2, 3') # subplot 211 title
 You can clear the current figure with clf() and the current axes with cla(). If you find it annoying that states (specifically the current image, figure and axes) are being maintained for you behind the scenes, don’t despair: this is just a thin stateful wrapper around an object oriented API, which you can use instead (see Artist tutorial)
If you are making lots of figures, you need to be aware of one more thing: the memory required for a figure is not completely released until the figure is explicitly closed with close(). Deleting all references to the figure, and/or using the window manager to kill the window in which the figure appears on the screen, is not enough, because pyplot maintains internal references until close() is called.
Working with text
The text() command can be used to add text in an arbitrary location, and the xlabel(), ylabel() and title() are used to add text in the indicated locations (see Text introduction for a more detailed example)
    import numpy as np
import matplotlib.pyplot as plt
# Fixing random state for reproducibility
np.random.seed(19680801)
mu, sigma = 100, 15
x = mu + sigma * np.random.randn(10000) # the histogram of the data
n, bins, patches = plt.hist(x, 50, normed=1, facecolor='g', alpha=0.75)
plt.xlabel('Smarts') plt.ylabel('Probability') plt.title('Histogram of IQ')
plt.text(60, .025, r'$\mu=100,\ \sigma=15$') plt.axis([40, 160, 0, 0.03])
plt.grid(True)
plt.show()
  18 Chapter3. Tutorials
"
14,14.0,matplotlib_41-61_pdf.pdf ~ 14,"Matplotlib, Release 2.0.2
0.0 0.5 1.0
x-label
1.0
1.5
2.0y-label
Title
0.0 0.5 1.0
x-label
1.0
1.5
2.0y-label
Title
0.0 0.5 1.0
x-label
1.0
1.5
2.0y-label
Title
0.0 0.5 1.0
x-label
1.0
1.5
2.0y-label
Title
Although not thoroughly tested, it seems to work for subplots with aspect != “auto” (e.g., axes with images).
arr = np.arange(100).reshape((10,10))
plt.close('all')
fig = plt.figure(figsize=(5,4))
ax = plt.subplot(111)
im = ax.imshow(arr, interpolation=""none"")
plt.tight_layout()
3.1. Introductory 47",0.0048902034759521,"Matplotlib, Release 2.0.2
0.0
0.5
1.0
x-label
1.0
1.5
2.0
y-label
Title
0.0
0.5
1.0
x-label
1.0
1.5
2.0
y-label
Title
0.0
0.5
1.0
x-label
1.0
1.5
2.0
y-label
Title
0.0
0.5
1.0
x-label
1.0
1.5
2.0
y-label
Title
Although not thoroughly tested, it seems to work for subplots with aspect != “auto” (e.g., axes with images).
arr = np.arange(100).reshape((10,10))
plt.close('all')
fig = plt.figure(figsize=(5,4))
ax = plt.subplot(111)
im = ax.imshow(arr, interpolation=""none"")
plt.tight_layout()
3.1. Introductory
47
",0.0008759498596191,"Matplotlib, Release 2.0.2
0.0 0.5 1.0
x-label
1.0
1.5
2.0y-label
Title
0.0 0.5 1.0
x-label
1.0
1.5
2.0y-label
Title
0.0 0.5 1.0
x-label
1.0
1.5
2.0y-label
Title
0.0 0.5 1.0
x-label
1.0
1.5
2.0y-label
Title
Although not thoroughly tested, it seems to work for subplots with aspect != “auto” (e.g., axes with images).
arr = np.arange(100).reshape((10,10))
plt.close('all')
fig = plt.figure(figsize=(5,4))
ax = plt.subplot(111)
im = ax.imshow(arr, interpolation=""none"")
plt.tight_layout()
3.1. Introductory 47",0.0048441886901855,"7>

All of the text() commands return an matplotlib.text.Text instance. Just as with with lines above, you can customize the properties by passing keyword arguments into the text functions or using setp():
t = plt.xlabel('my data', fontsize=14, color='red')
These properties are covered in more detail in Text properties and layout.
Using mathematical expressions in text
matplotlib accepts TeX equation expressions in any text expression. For example to write the expression σi = 15 in the title, you can write a TeX expression surrounded by dollar signs:
plt.title(r'$\sigma_i=15$')
The r preceding the title string is important – it signifies that the string is a raw string and not to treat backslashes as python escapes. matplotlib has a built-in TeX expression parser and layout engine, and ships its own math fonts – for details see Writing mathematical expressions. Thus you can use mathematical text across platforms without requiring a TeX installation. For those who have LaTeX and dvipng installed, you can also use LaTeX to format your text and incorporate the output directly into your display figures or saved postscript – see Text rendering With LaTeX.
Matplotlib, Release 2.0.2
  0.030 0.025 0.020 0.015 0.010 0.005 0.000
Histogram of IQ
40 60 80 100 120 140 160 Smarts
   = 100, = 15
        Probability
             3.1. Introductory 19

"
15,15.0,matplotlib_41-61_pdf.pdf ~ 15,"Matplotlib, Release 2.0.2
0 2 4 6 8
0
2
4
6
8
Caveats
• tight_layout() only considers ticklabels, axis labels, and titles. Thus, other artists may be clipped
and also may overlap.
• It assumes that the extra space needed for ticklabels, axis labels, and titles is independent of original
location of axes. This is often true, but there are rare cases where it is not.
• pad=0 clips some of the texts by a few pixels. This may be a bug or a limitation of the current
algorithm and it is not clear why it happens. Meanwhile, use of pad at least larger than 0.3 is recom-
mended.
Use with GridSpec
GridSpec has its own tight_layout() method (the pyplot api tight_layout() also works).
plt.close('all')
fig = plt.figure()
import matplotlib.gridspec as gridspec
gs1 = gridspec.GridSpec(2, 1)
ax1 = fig.add_subplot(gs1[0])
ax2 = fig.add_subplot(gs1[1])
48 Chapter 3. Tutorials",0.0063228607177734,"Matplotlib, Release 2.0.2
0
2
4
6
8
0
2
4
6
8
Caveats
• tight_layout() only considers ticklabels, axis labels, and titles. Thus, other artists may be clipped
and also may overlap.
• It assumes that the extra space needed for ticklabels, axis labels, and titles is independent of original
location of axes. This is often true, but there are rare cases where it is not.
• pad=0 clips some of the texts by a few pixels. This may be a bug or a limitation of the current
algorithm and it is not clear why it happens. Meanwhile, use of pad at least larger than 0.3 is recom-
mended.
Use with GridSpec
GridSpec has its own tight_layout() method (the pyplot api tight_layout() also works).
plt.close('all')
fig = plt.figure()
import matplotlib.gridspec as gridspec
gs1 = gridspec.GridSpec(2, 1)
ax1 = fig.add_subplot(gs1[0])
ax2 = fig.add_subplot(gs1[1])
48
Chapter 3. Tutorials
",0.0011680126190185,"Matplotlib, Release 2.0.2
0 2 4 6 8
0
2
4
6
8
Caveats
• tight_layout() only considers ticklabels, axis labels, and titles. Thus, other artists may be clipped
and also may overlap.
• It assumes that the extra space needed for ticklabels, axis labels, and titles is independent of original
location of axes. This is often true, but there are rare cases where it is not.
• pad=0 clips some of the texts by a few pixels. This may be a bug or a limitation of the current
algorithm and it is not clear why it happens. Meanwhile, use of pad at least larger than 0.3 is recom-
mended.
Use with GridSpec
GridSpec has its own tight_layout() method (the pyplot api tight_layout() also works).
plt.close('all')
fig = plt.figure()
import matplotlib.gridspec as gridspec
gs1 = gridspec.GridSpec(2, 1)
ax1 = fig.add_subplot(gs1[0])
ax2 = fig.add_subplot(gs1[1])
48 Chapter 3. Tutorials",0.0057411193847656,"8>
Matplotlib, Release 2.0.2
 Annotating text
The uses of the basic text() command above place text at an arbitrary position on the Axes. A common use for text is to annotate some feature of the plot, and the annotate() method provides helper functionality to make annotations easy. In an annotation, there are two points to consider: the location being annotated represented by the argument xy and the location of the text xytext. Both of these arguments are (x,y) tuples.
    import numpy as np
import matplotlib.pyplot as plt
ax = plt.subplot(111)
t = np.arange(0.0, 5.0, 0.01)
s = np.cos(2*np.pi*t)
line, = plt.plot(t, s, lw=2)
plt.annotate('local max', xy=(2, 1), xytext=(3, 1.5), arrowprops=dict(facecolor='black', shrink=0.05), )
plt.ylim(-2,2)
plt.show()
  2.0 1.5 1.0 0.5 0.0 0.5 1.0 1.5 2.0
012345
   local max
   In this basic example, both the xy (arrow tip) and xytext locations (text location) are in data coordinates. 20 Chapter3. Tutorials
 
"
16,16.0,matplotlib_41-61_pdf.pdf ~ 16,"Matplotlib, Release 2.0.2
example_plot(ax1)
example_plot(ax2)
gs1.tight_layout(fig)
0.0 0.5 1.0
x-label
1.0
1.5
2.0y-label
Title
0.0 0.5 1.0
x-label
1.0
1.5
2.0y-label
Title
You may provide an optional rect parameter, which speciﬁes the bounding box that the subplots will be ﬁt
inside. The coordinates must be in normalized ﬁgure coordinates and the default is (0, 0, 1, 1).
gs1.tight_layout(fig, rect=[0, 0, 0.5, 1])
3.1. Introductory 49",0.0038309097290039,"Matplotlib, Release 2.0.2
example_plot(ax1)
example_plot(ax2)
gs1.tight_layout(fig)
0.0
0.5
1.0
x-label
1.0
1.5
2.0
y-label
Title
0.0
0.5
1.0
x-label
1.0
1.5
2.0
y-label
Title
You may provide an optional rect parameter, which speciﬁes the bounding box that the subplots will be ﬁt
inside. The coordinates must be in normalized ﬁgure coordinates and the default is (0, 0, 1, 1).
gs1.tight_layout(fig, rect=[0, 0, 0.5, 1])
3.1. Introductory
49
",0.0010328292846679,"Matplotlib, Release 2.0.2
example_plot(ax1)
example_plot(ax2)
gs1.tight_layout(fig)
0.0 0.5 1.0
x-label
1.0
1.5
2.0y-label
Title
0.0 0.5 1.0
x-label
1.0
1.5
2.0y-label
Title
You may provide an optional rect parameter, which speciﬁes the bounding box that the subplots will be ﬁt
inside. The coordinates must be in normalized ﬁgure coordinates and the default is (0, 0, 1, 1).
gs1.tight_layout(fig, rect=[0, 0, 0.5, 1])
3.1. Introductory 49",0.0036470890045166,"9> 
Matplotlib, Release 2.0.2
 There are a variety of other coordinate systems one can choose – see Basic annotation and Advanced Anno- tation for details. More examples can be found in pylab_examples example code: annotation_demo.py.
Logarithmic and other nonlinear axes
matplotlib.pyplot supports not only linear axis scales, but also logarithmic and logit scales. This is commonly used if data spans many orders of magnitude. Changing the scale of an axis is easy:
plt.xscale(‘log’)
An example of four plots with the same data and different scales for the y axis is shown below.
    import numpy as np
import matplotlib.pyplot as plt
from matplotlib.ticker import NullFormatter # useful for `logit` scale # Fixing random state for reproducibility
np.random.seed(19680801)
# make up some data in the interval ]0, 1[
y = np.random.normal(loc=0.5, scale=0.4, size=1000)
y = y[(y > 0) & (y < 1)]
y.sort()
x = np.arange(len(y))
# plot with various axes scales
plt.figure(1)
# linear
plt.subplot(221) plt.plot(x, y) plt.yscale('linear') plt.title('linear') plt.grid(True)
# log
plt.subplot(222) plt.plot(x, y) plt.yscale('log') plt.title('log') plt.grid(True)
# symmetric log
plt.subplot(223)
plt.plot(x, y - y.mean()) plt.yscale('symlog', linthreshy=0.01) plt.title('symlog')
plt.grid(True)
# logit
  3.1. Introductory 21

"
17,17.0,matplotlib_41-61_pdf.pdf ~ 17,"Matplotlib, Release 2.0.2
0.0 0.5 1.0
x-label
1.0
1.5
2.0y-label
Title
0.0 0.5 1.0
x-label
1.0
1.5
2.0y-label
Title
For example, this can be used for a ﬁgure with multiple gridspecs.
gs2 = gridspec.GridSpec(3, 1)
for ss in gs2:
ax = fig.add_subplot(ss)
example_plot(ax)
ax.set_title("""")
ax.set_xlabel("""")
ax.set_xlabel(""x-label"", fontsize=12)
gs2.tight_layout(fig, rect=[0.5, 0, 1, 1], h_pad=0.5)
50 Chapter 3. Tutorials",0.0050971508026123,"Matplotlib, Release 2.0.2
0.0
0.5
1.0
x-label
1.0
1.5
2.0
y-label
Title
0.0
0.5
1.0
x-label
1.0
1.5
2.0
y-label
Title
For example, this can be used for a ﬁgure with multiple gridspecs.
gs2 = gridspec.GridSpec(3, 1)
for ss in gs2:
ax = fig.add_subplot(ss)
example_plot(ax)
ax.set_title("""")
ax.set_xlabel("""")
ax.set_xlabel(""x-label"", fontsize=12)
gs2.tight_layout(fig, rect=[0.5, 0, 1, 1], h_pad=0.5)
50
Chapter 3. Tutorials
",0.0007851123809814,"Matplotlib, Release 2.0.2
0.0 0.5 1.0
x-label
1.0
1.5
2.0y-label
Title
0.0 0.5 1.0
x-label
1.0
1.5
2.0y-label
Title
For example, this can be used for a ﬁgure with multiple gridspecs.
gs2 = gridspec.GridSpec(3, 1)
for ss in gs2:
ax = fig.add_subplot(ss)
example_plot(ax)
ax.set_title("""")
ax.set_xlabel("""")
ax.set_xlabel(""x-label"", fontsize=12)
gs2.tight_layout(fig, rect=[0.5, 0, 1, 1], h_pad=0.5)
50 Chapter 3. Tutorials",0.0042319297790527,"10>
Matplotlib, Release 2.0.2
     plt.subplot(224) plt.plot(x, y) plt.yscale('logit') plt.title('logit') plt.grid(True)
# Format the minor tick labels of the y-axis into empty strings with
# `NullFormatter`, to avoid cumbering the axis with too many labels. plt.gca().yaxis.set_minor_formatter(NullFormatter())
# Adjust the subplot layout, because the logit one may take more space
# than usual, due to y-tick labels like ""1 - 10^{-3}"" plt.subplots_adjust(top=0.92, bottom=0.08, left=0.10, right=0.95, hspace=0.25,
plt.show()
wspace=0.35)
    1.0 0.8 0.6 0.4 0.2 0.0
10 1 10 2
0
10 2 10 1 100
0
250 500 750 symlog
100 10 1 10 2
1 103 0.99 0.90 0.50 0.10 0.01
0
250 500 750 logit
linear
log
                                   0
250 500 750
0
250 500 750
It is also possible to add your own scale, see Developer’s guide for creating scales and transformations for details.
3.1.2 Image tutorial
 22 Chapter3. Tutorials

"
18,18.0,matplotlib_41-61_pdf.pdf ~ 18,"Matplotlib, Release 2.0.2
0.0 0.5 1.0
x-label
1.0
1.5
2.0y-label
Title
0.0 0.5 1.0
x-label
1.0
1.5
2.0y-label
Title
0.0 0.5 1.0
1.0
1.5
2.0y-label
0.0 0.5 1.0
1.0
1.5
2.0y-label
0.0 0.5 1.0
x-label
1.0
1.5
2.0y-label
We may try to match the top and bottom of two grids
top = min(gs1.top, gs2.top)
bottom = max(gs1.bottom, gs2.bottom)
gs1.update(top=top, bottom=bottom)
gs2.update(top=top, bottom=bottom)
While this should be mostly good enough, adjusting top and bottom may require adjustment of hspace also.
To update hspace & vspace, we call tight_layout() again with updated rect argument. Note that the rect
argument speciﬁes the area including the ticklabels, etc. Thus, we will increase the bottom (which is 0 for
the normal case) by the di ﬀerence between the bottom from above and the bottom of each gridspec. Same
thing for the top.
top = min(gs1.top, gs2.top)
bottom = max(gs1.bottom, gs2.bottom)
gs1.tight_layout(fig, rect=[None, 0 + (bottom-gs1.bottom),
0.5, 1 - (gs1.top-top)])
gs2.tight_layout(fig, rect=[0.5, 0 + (bottom-gs2.bottom),
None, 1 - (gs2.top-top)],
h_pad=0.5)
3.1. Introductory 51",0.0074172019958496,"Matplotlib, Release 2.0.2
0.0
0.5
1.0
x-label
1.0
1.5
2.0
y-label
Title
0.0
0.5
1.0
x-label
1.0
1.5
2.0
y-label
Title
0.0
0.5
1.0
1.0
1.5
2.0
y-label
0.0
0.5
1.0
1.0
1.5
2.0
y-label
0.0
0.5
1.0
x-label
1.0
1.5
2.0
y-label
We may try to match the top and bottom of two grids
top = min(gs1.top, gs2.top)
bottom = max(gs1.bottom, gs2.bottom)
gs1.update(top=top, bottom=bottom)
gs2.update(top=top, bottom=bottom)
While this should be mostly good enough, adjusting top and bottom may require adjustment of hspace also.
To update hspace & vspace, we call tight_layout() again with updated rect argument. Note that the rect
argument speciﬁes the area including the ticklabels, etc. Thus, we will increase the bottom (which is 0 for
the normal case) by the diﬀerence between the bottom from above and the bottom of each gridspec. Same
thing for the top.
top = min(gs1.top, gs2.top)
bottom = max(gs1.bottom, gs2.bottom)
gs1.tight_layout(fig, rect=[None, 0 + (bottom-gs1.bottom),
0.5, 1 - (gs1.top-top)])
gs2.tight_layout(fig, rect=[0.5, 0 + (bottom-gs2.bottom),
None, 1 - (gs2.top-top)],
h_pad=0.5)
3.1. Introductory
51
",0.0014898777008056,"Matplotlib, Release 2.0.2
0.0 0.5 1.0
x-label
1.0
1.5
2.0y-label
Title
0.0 0.5 1.0
x-label
1.0
1.5
2.0y-label
Title
0.0 0.5 1.0
1.0
1.5
2.0y-label
0.0 0.5 1.0
1.0
1.5
2.0y-label
0.0 0.5 1.0
x-label
1.0
1.5
2.0y-label
We may try to match the top and bottom of two grids
top = min(gs1.top, gs2.top)
bottom = max(gs1.bottom, gs2.bottom)
gs1.update(top=top, bottom=bottom)
gs2.update(top=top, bottom=bottom)
While this should be mostly good enough, adjusting top and bottom may require adjustment of hspace also.
To update hspace & vspace, we call tight_layout() again with updated rect argument. Note that the rect
argument speciﬁes the area including the ticklabels, etc. Thus, we will increase the bottom (which is 0 for
the normal case) by the di ﬀerence between the bottom from above and the bottom of each gridspec. Same
thing for the top.
top = min(gs1.top, gs2.top)
bottom = max(gs1.bottom, gs2.bottom)
gs1.tight_layout(fig, rect=[None, 0 + (bottom-gs1.bottom),
0.5, 1 - (gs1.top-top)])
gs2.tight_layout(fig, rect=[0.5, 0 + (bottom-gs2.bottom),
None, 1 - (gs2.top-top)],
h_pad=0.5)
3.1. Introductory 51",0.0072252750396728,"11>
Startup commands
First, let’s start IPython. It is a most excellent enhancement to the standard Python prompt, and it ties in especially well with Matplotlib. Start IPython either at a shell, or the IPython Notebook now.
With IPython started, we now need to connect to a GUI event loop. This tells IPython where (and how) to display plots. To connect to a GUI loop, execute the %matplotlib magic at your IPython prompt. There’s more detail on exactly what this does at IPython’s documentation on GUI event loops.
If you’re using IPython Notebook, the same commands are available, but people commonly use a specific argument to the %matplotlib magic:
In [1]: %matplotlib inline
This turns on inline plotting, where plot graphics will appear in your notebook. This has important implica- tions for interactivity. For inline plotting, commands in cells below the cell that outputs a plot will not affect the plot. For example, changing the color map is not possible from cells below the cell that creates a plot. However, for other backends, such as qt4, that open a separate window, cells below those that create the plot will change the plot - it is a live object in memory.
This tutorial will use matplotlib’s imperative-style plotting interface, pyplot. This interface maintains global state, and is very useful for quickly and easily experimenting with various plot settings. The alternative is the object-oriented interface, which is also very powerful, and generally more suitable for large application development. If you’d like to learn about the object-oriented interface, a great place to start is our FAQ on usage. For now, let’s get on with the imperative-style approach:
Importing image data into Numpy arrays
Loading image data is supported by the Pillow library. Natively, matplotlib only supports PNG images. The commands shown below fall back on Pillow if the native read fails.
The image used in this example is a PNG file, but keep that Pillow requirement in mind for your own data. Here’s the image we’re going to play with:
Matplotlib, Release 2.0.2
        In [2]: import matplotlib.pyplot as plt
In [3]: import matplotlib.image as mpimg
In [4]: import numpy as np
  3.1. Introductory 23

"
19,19.0,matplotlib_41-61_pdf.pdf ~ 19,"Matplotlib, Release 2.0.2
0.0 0.5 1.0
x-label
1.0
1.5
2.0y-label
Title
0.0 0.5 1.0
x-label
1.0
1.5
2.0y-label
Title
0.0 0.5 1.0
1.0
1.5
2.0y-label
0.0 0.5 1.0
1.0
1.5
2.0y-label
0.0 0.5 1.0
x-label
1.0
1.5
2.0y-label
Use with AxesGrid1
While limited, the axes_grid1 toolkit is also supported.
plt.close('all')
fig = plt.figure()
from mpl_toolkits.axes_grid1 import Grid
grid = Grid(fig, rect=111, nrows_ncols=(2,2),
axes_pad=0.25, label_mode='L',
)
for ax in grid:
example_plot(ax)
ax.title.set_visible(False)
plt.tight_layout()
52 Chapter 3. Tutorials",0.0055360794067382,"Matplotlib, Release 2.0.2
0.0
0.5
1.0
x-label
1.0
1.5
2.0
y-label
Title
0.0
0.5
1.0
x-label
1.0
1.5
2.0
y-label
Title
0.0
0.5
1.0
1.0
1.5
2.0
y-label
0.0
0.5
1.0
1.0
1.5
2.0
y-label
0.0
0.5
1.0
x-label
1.0
1.5
2.0
y-label
Use with AxesGrid1
While limited, the axes_grid1 toolkit is also supported.
plt.close('all')
fig = plt.figure()
from mpl_toolkits.axes_grid1 import Grid
grid = Grid(fig, rect=111, nrows_ncols=(2,2),
axes_pad=0.25, label_mode='L',
)
for ax in grid:
example_plot(ax)
ax.title.set_visible(False)
plt.tight_layout()
52
Chapter 3. Tutorials
",0.0010051727294921,"Matplotlib, Release 2.0.2
0.0 0.5 1.0
x-label
1.0
1.5
2.0y-label
Title
0.0 0.5 1.0
x-label
1.0
1.5
2.0y-label
Title
0.0 0.5 1.0
1.0
1.5
2.0y-label
0.0 0.5 1.0
1.0
1.5
2.0y-label
0.0 0.5 1.0
x-label
1.0
1.5
2.0y-label
Use with AxesGrid1
While limited, the axes_grid1 toolkit is also supported.
plt.close('all')
fig = plt.figure()
from mpl_toolkits.axes_grid1 import Grid
grid = Grid(fig, rect=111, nrows_ncols=(2,2),
axes_pad=0.25, label_mode='L',
)
for ax in grid:
example_plot(ax)
ax.title.set_visible(False)
plt.tight_layout()
52 Chapter 3. Tutorials",0.0067420005798339,"12>
Matplotlib, Release 2.0.2
  It’s a 24-bit RGB PNG image (8 bits for each of R, G, B). Depending on where you get your data, the other kinds of image that you’ll most likely encounter are RGBA images, which allow for transparency, or single- channel grayscale (luminosity) images. You can right click on it and choose “Save image as” to download it to your computer for the rest of this tutorial.
And here we go...
    In [5]: img=mpimg.imread('stinkbug.png')
Out[5]:
array([[[ 0.40784314, 0.40784314, 0.40784314],
        [ 0.40784314,  0.40784314,  0.40784314],
        [ 0.40784314,  0.40784314,  0.40784314],
        ...,
        [ 0.42745098,  0.42745098,  0.42745098],
        [ 0.42745098,  0.42745098,  0.42745098],
        [ 0.42745098,  0.42745098,  0.42745098]],
       ...,
       [[ 0.44313726,  0.44313726,  0.44313726],
        [ 0.4509804 ,  0.4509804 ,  0.4509804 ],
        [ 0.4509804 ,  0.4509804 ,  0.4509804 ],
        ...,
        [ 0.44705883,  0.44705883,  0.44705883],
  24 Chapter3. Tutorials

"
20,0.0,matplotlib_61-81_pdf.pdf ~ 0,"Matplotlib, Release 2.0.2
1.0
1.5
2.0y-label
0.0 0.5 1.0
x-label
1.0
1.5
2.0y-label
0.0 0.5 1.0
x-label
Colorbar
If you create a colorbar with the colorbar() command, the created colorbar is an instance of Axes, not
Subplot, so tight_layout does not work. With Matplotlib v1.1, you may create a colorbar as a subplot using
the gridspec.
plt.close('all')
arr = np.arange(100).reshape((10,10))
fig = plt.figure(figsize=(4, 4))
im = plt.imshow(arr, interpolation=""none"")
plt.colorbar(im, use_gridspec=True)
plt.tight_layout()
3.1. Introductory 53",0.0083789825439453,"Matplotlib, Release 2.0.2
1.0
1.5
2.0
y-label
0.0
0.5
1.0
x-label
1.0
1.5
2.0
y-label
0.0
0.5
1.0
x-label
Colorbar
If you create a colorbar with the colorbar() command, the created colorbar is an instance of Axes, not
Subplot, so tight_layout does not work. With Matplotlib v1.1, you may create a colorbar as a subplot using
the gridspec.
plt.close('all')
arr = np.arange(100).reshape((10,10))
fig = plt.figure(figsize=(4, 4))
im = plt.imshow(arr, interpolation=""none"")
plt.colorbar(im, use_gridspec=True)
plt.tight_layout()
3.1. Introductory
53
",0.0031039714813232,"Matplotlib, Release 2.0.2
1.0
1.5
2.0y-label
0.0 0.5 1.0
x-label
1.0
1.5
2.0y-label
0.0 0.5 1.0
x-label
Colorbar
If you create a colorbar with the colorbar() command, the created colorbar is an instance of Axes, not
Subplot, so tight_layout does not work. With Matplotlib v1.1, you may create a colorbar as a subplot using
the gridspec.
plt.close('all')
arr = np.arange(100).reshape((10,10))
fig = plt.figure(figsize=(4, 4))
im = plt.imshow(arr, interpolation=""none"")
plt.colorbar(im, use_gridspec=True)
plt.tight_layout()
3.1. Introductory 53",0.0079860687255859,"13>
Matplotlib, Release 2.0.2
     [ 0.44705883,  0.44705883,  0.44705883],
[ 0.44313726,  0.44313726,  0.44313726]]], dtype=float32)
 Note the dtype there - float32. Matplotlib has rescaled the 8 bit data from each channel to floating point data between 0.0 and 1.0. As a side note, the only datatype that Pillow can work with is uint8. Matplotlib plotting can handle float32 and uint8, but image reading/writing for any format other than PNG is limited to uint8 data. Why 8 bits? Most displays can only render 8 bits per channel worth of color gradation. Why can they only render 8 bits/channel? Because that’s about all the human eye can see. More here (from a photography standpoint): Luminous Landscape bit depth tutorial.
Each inner list represents a pixel. Here, with an RGB image, there are 3 values. Since it’s a black and white image, R, G, and B are all similar. An RGBA (where A is alpha, or transparency), has 4 values per inner list, and a simple luminance image just has one value (and is thus only a 2-D array, not a 3-D array). For RGB and RGBA images, matplotlib supports float32 and uint8 data types. For grayscale, matplotlib supports only float32. If your array data does not meet one of these descriptions, you need to rescale it.
Plotting numpy arrays as images
So, you have your data in a numpy array (either by importing it, or by generating it). Let’s render it. In Matplotlib, this is performed using the imshow() function. Here we’ll grab the plot object. This object gives you an easy way to manipulate the plot from the prompt.
In [6]: imgplot = plt.imshow(img)
      0
 50
100
150
200
250
300
350
     0 100
200 300
400 500
 3.1. Introductory 25

"
21,1.0,matplotlib_61-81_pdf.pdf ~ 1,"Matplotlib, Release 2.0.2
0 2 4 6 8
0
2
4
6
8
0
20
40
60
80
Another option is to use AxesGrid1 toolkit to explicitly create an axes for colorbar.
plt.close('all')
arr = np.arange(100).reshape((10,10))
fig = plt.figure(figsize=(4, 4))
im = plt.imshow(arr, interpolation=""none"")
from mpl_toolkits.axes_grid1 import make_axes_locatable
divider = make_axes_locatable(plt.gca())
cax = divider.append_axes(""right"", ""5%"", pad=""3%"")
plt.colorbar(im, cax=cax)
plt.tight_layout()
54 Chapter 3. Tutorials",0.0050930976867675,"Matplotlib, Release 2.0.2
0
2
4
6
8
0
2
4
6
8
0
20
40
60
80
Another option is to use AxesGrid1 toolkit to explicitly create an axes for colorbar.
plt.close('all')
arr = np.arange(100).reshape((10,10))
fig = plt.figure(figsize=(4, 4))
im = plt.imshow(arr, interpolation=""none"")
from mpl_toolkits.axes_grid1 import make_axes_locatable
divider = make_axes_locatable(plt.gca())
cax = divider.append_axes(""right"", ""5%"", pad=""3%"")
plt.colorbar(im, cax=cax)
plt.tight_layout()
54
Chapter 3. Tutorials
",0.0009982585906982,"Matplotlib, Release 2.0.2
0 2 4 6 8
0
2
4
6
8
0
20
40
60
80
Another option is to use AxesGrid1 toolkit to explicitly create an axes for colorbar.
plt.close('all')
arr = np.arange(100).reshape((10,10))
fig = plt.figure(figsize=(4, 4))
im = plt.imshow(arr, interpolation=""none"")
from mpl_toolkits.axes_grid1 import make_axes_locatable
divider = make_axes_locatable(plt.gca())
cax = divider.append_axes(""right"", ""5%"", pad=""3%"")
plt.colorbar(im, cax=cax)
plt.tight_layout()
54 Chapter 3. Tutorials",0.0050132274627685,"14>
Matplotlib, Release 2.0.2
 You can also plot any numpy array.
Applying pseudocolor schemes to image plots
Pseudocolor can be a useful tool for enhancing contrast and visualizing your data more easily. This is especially useful when making presentations of your data using projectors - their contrast is typically quite poor.
Pseudocolor is only relevant to single-channel, grayscale, luminosity images. We currently have an RGB image. Since R, G, and B are all similar (see for yourself above or in your data), we can just pick one channel of our data:
In [7]: lum_img = img[:,:,0]
This is array slicing. You can read more in the Numpy tutorial.
In [8]: plt.imshow(lum_img)
Now, with a luminosity (2D, no color) image, the default colormap (aka lookup table, LUT), is applied. The default is called viridis. There are plenty of others to choose from.
In [9]: plt.imshow(lum_img, cmap=""hot"")
"
22,2.0,matplotlib_61-81_pdf.pdf ~ 2,"Matplotlib, Release 2.0.2
0 2 4 6 8
0
2
4
6
8
0
20
40
60
80
3.2 Intermediate
3.2.1 Artist tutorial
There are three layers to the matplotlib API. Thematplotlib.backend_bases.FigureCanvasis the area
onto which the ﬁgure is drawn, the matplotlib.backend_bases.Renderer is the object which knows
how to draw on theFigureCanvas, and the matplotlib.artist.Artist is the object that knows how to
use a renderer to paint onto the canvas. The FigureCanvasand Rendererhandle all the details of talking
to user interface toolkits like wxPython or drawing languages like PostScript®, and the Artisthandles all
the high level constructs like representing and laying out the ﬁgure, text, and lines. The typical user will
spend 95% of their time working with the Artists.
There are two types of Artists: primitives and containers. The primitives represent the standard graphical
objects we want to paint onto our canvas: Line2D, Rectangle, Text, AxesImage, etc., and the containers
are places to put them ( Axis, Axes and Figure). The standard use is to create a Figure instance, use
the Figure to create one or more Axes or Subplot instances, and use the Axes instance helper methods
to create the primitives. In the example below, we create a Figure instance using matplotlib.pyplot.
figure(), which is a convenience method for instantiating Figure instances and connecting them with
your user interface or drawing toolkit FigureCanvas. As we will discuss below, this is not necessary –
you can work directly with PostScript, PDF Gtk+, or wxPython FigureCanvas instances, instantiate your
Figures directly and connect them yourselves – but since we are focusing here on the Artist API we’ll
let pyplot handle some of those details for us:
3.2. Intermediate 55",0.0079779624938964,"Matplotlib, Release 2.0.2
0
2
4
6
8
0
2
4
6
8
0
20
40
60
80
3.2 Intermediate
3.2.1 Artist tutorial
There are three layers to the matplotlib API. The matplotlib.backend_bases.FigureCanvas is the area
onto which the ﬁgure is drawn, the matplotlib.backend_bases.Renderer is the object which knows
how to draw on the FigureCanvas, and the matplotlib.artist.Artist is the object that knows how to
use a renderer to paint onto the canvas. The FigureCanvas and Renderer handle all the details of talking
to user interface toolkits like wxPython or drawing languages like PostScript®, and the Artist handles all
the high level constructs like representing and laying out the ﬁgure, text, and lines. The typical user will
spend 95% of their time working with the Artists.
There are two types of Artists: primitives and containers. The primitives represent the standard graphical
objects we want to paint onto our canvas: Line2D, Rectangle, Text, AxesImage, etc., and the containers
are places to put them (Axis, Axes and Figure). The standard use is to create a Figure instance, use
the Figure to create one or more Axes or Subplot instances, and use the Axes instance helper methods
to create the primitives. In the example below, we create a Figure instance using matplotlib.pyplot.
figure(), which is a convenience method for instantiating Figure instances and connecting them with
your user interface or drawing toolkit FigureCanvas. As we will discuss below, this is not necessary –
you can work directly with PostScript, PDF Gtk+, or wxPython FigureCanvas instances, instantiate your
Figures directly and connect them yourselves – but since we are focusing here on the Artist API we’ll
let pyplot handle some of those details for us:
3.2. Intermediate
55
",0.0019319057464599,"Matplotlib, Release 2.0.2
0 2 4 6 8
0
2
4
6
8
0
20
40
60
80
3.2 Intermediate
3.2.1 Artist tutorial
There are three layers to the matplotlib API. Thematplotlib.backend_bases.FigureCanvasis the area
onto which the ﬁgure is drawn, the matplotlib.backend_bases.Renderer is the object which knows
how to draw on theFigureCanvas, and the matplotlib.artist.Artist is the object that knows how to
use a renderer to paint onto the canvas. The FigureCanvasand Rendererhandle all the details of talking
to user interface toolkits like wxPython or drawing languages like PostScript®, and the Artisthandles all
the high level constructs like representing and laying out the ﬁgure, text, and lines. The typical user will
spend 95% of their time working with the Artists.
There are two types of Artists: primitives and containers. The primitives represent the standard graphical
objects we want to paint onto our canvas: Line2D, Rectangle, Text, AxesImage, etc., and the containers
are places to put them ( Axis, Axes and Figure). The standard use is to create a Figure instance, use
the Figure to create one or more Axes or Subplot instances, and use the Axes instance helper methods
to create the primitives. In the example below, we create a Figure instance using matplotlib.pyplot.
figure(), which is a convenience method for instantiating Figure instances and connecting them with
your user interface or drawing toolkit FigureCanvas. As we will discuss below, this is not necessary –
you can work directly with PostScript, PDF Gtk+, or wxPython FigureCanvas instances, instantiate your
Figures directly and connect them yourselves – but since we are focusing here on the Artist API we’ll
let pyplot handle some of those details for us:
3.2. Intermediate 55",0.0074212551116943,"15>
         0
 50
100
150
200
250
300
350
     0 100
200 300
400 500
    26 Chapter3. Tutorials

Note that you can also change colormaps on existing plot objects using the set_cmap() method:
Matplotlib, Release 2.0.2
    0
 50
100
150
200
250
300
350
     0 100
200 300
400 500
    In [10]: imgplot = plt.imshow(lum_img)
In [11]: imgplot.set_cmap('nipy_spectral')
  3.1. Introductory 27

"
23,3.0,matplotlib_61-81_pdf.pdf ~ 3,"Matplotlib, Release 2.0.2
import matplotlib.pyplot as plt
fig = plt.figure()
ax = fig.add_subplot(2,1,1) # two rows, one column, first plot
The Axes is probably the most important class in the matplotlib API, and the one you will be working with
most of the time. This is because the Axes is the plotting area into which most of the objects go, and the
Axes has many special helper methods (plot(), text(), hist(), imshow()) to create the most common
graphics primitives (Line2D, Text, Rectangle, Image, respectively). These helper methods will take your
data (e.g., numpy arrays and strings) and create primitive Artist instances as needed (e.g., Line2D), add
them to the relevant containers, and draw them when requested. Most of you are probably familiar with the
Subplot, which is just a special case of an Axes that lives on a regular rows by columns grid of Subplot
instances. If you want to create an Axesat an arbitrary location, simply use the add_axes() method which
takes a list of [left, bottom, width, height]values in 0-1 relative ﬁgure coordinates:
fig2 = plt.figure()
ax2 = fig2.add_axes([0.15, 0.1, 0.7, 0.3])
Continuing with our example:
import numpy as np
t = np.arange(0.0, 1.0, 0.01)
s = np.sin(2*np.pi*t)
line, = ax.plot(t, s, color='blue', lw=2)
In this example, axis the Axesinstance created by the fig.add_subplotcall above (remember Subplot
is just a subclass of Axes) and when you call ax.plot, it creates a Line2D instance and adds it to the
Axes.lines list. In the interactive ipython session below, you can see that the Axes.lines list is length
one and contains the same line that was returned by the line, = ax.plot...call:
In [101]: ax.lines[0]
Out[101]: <matplotlib.lines.Line2D instance at 0x19a95710>
In [102]: line
Out[102]: <matplotlib.lines.Line2D instance at 0x19a95710>
If you make subsequent calls to ax.plot (and the hold state is “on” which is the default) then additional
lines will be added to the list. You can remove lines later simply by calling the list methods; either of these
will work:
del ax.lines[0]
ax.lines.remove(line) # one or the other, not both!
The Axes also has helper methods to conﬁgure and decorate the x-axis and y-axis tick, tick labels and axis
labels:
xtext = ax.set_xlabel('my xdata') # returns a Text instance
ytext = ax.set_ylabel('my ydata')
When you call ax.set_xlabel, it passes the information on the Text instance of the XAxis. Each Axes
instance contains an XAxis and a YAxis instance, which handle the layout and drawing of the ticks, tick
labels and axis labels.
56 Chapter 3. Tutorials",0.0282139778137207,"Matplotlib, Release 2.0.2
import matplotlib.pyplot as plt
fig = plt.figure()
ax = fig.add_subplot(2,1,1) # two rows, one column, first plot
The Axes is probably the most important class in the matplotlib API, and the one you will be working with
most of the time. This is because the Axes is the plotting area into which most of the objects go, and the
Axes has many special helper methods (plot(), text(), hist(), imshow()) to create the most common
graphics primitives (Line2D, Text, Rectangle, Image, respectively). These helper methods will take your
data (e.g., numpy arrays and strings) and create primitive Artist instances as needed (e.g., Line2D), add
them to the relevant containers, and draw them when requested. Most of you are probably familiar with the
Subplot, which is just a special case of an Axes that lives on a regular rows by columns grid of Subplot
instances. If you want to create an Axes at an arbitrary location, simply use the add_axes() method which
takes a list of [left, bottom, width, height] values in 0-1 relative ﬁgure coordinates:
fig2 = plt.figure()
ax2 = fig2.add_axes([0.15, 0.1, 0.7, 0.3])
Continuing with our example:
import numpy as np
t = np.arange(0.0, 1.0, 0.01)
s = np.sin(2*np.pi*t)
line, = ax.plot(t, s, color='blue', lw=2)
In this example, ax is the Axes instance created by the fig.add_subplot call above (remember Subplot
is just a subclass of Axes) and when you call ax.plot, it creates a Line2D instance and adds it to the
Axes.lines list. In the interactive ipython session below, you can see that the Axes.lines list is length
one and contains the same line that was returned by the line, = ax.plot... call:
In [101]: ax.lines[0]
Out[101]: <matplotlib.lines.Line2D instance at 0x19a95710>
In [102]: line
Out[102]: <matplotlib.lines.Line2D instance at 0x19a95710>
If you make subsequent calls to ax.plot (and the hold state is “on” which is the default) then additional
lines will be added to the list. You can remove lines later simply by calling the list methods; either of these
will work:
del ax.lines[0]
ax.lines.remove(line)
# one or the other, not both!
The Axes also has helper methods to conﬁgure and decorate the x-axis and y-axis tick, tick labels and axis
labels:
xtext = ax.set_xlabel('my xdata') # returns a Text instance
ytext = ax.set_ylabel('my ydata')
When you call ax.set_xlabel, it passes the information on the Text instance of the XAxis. Each Axes
instance contains an XAxis and a YAxis instance, which handle the layout and drawing of the ticks, tick
labels and axis labels.
56
Chapter 3. Tutorials
",0.002763032913208,"Matplotlib, Release 2.0.2
import matplotlib.pyplot as plt
fig = plt.figure()
ax = fig.add_subplot(2,1,1) # two rows, one column, first plot
The Axes is probably the most important class in the matplotlib API, and the one you will be working with
most of the time. This is because the Axes is the plotting area into which most of the objects go, and the
Axes has many special helper methods (plot(), text(), hist(), imshow()) to create the most common
graphics primitives (Line2D, Text, Rectangle, Image, respectively). These helper methods will take your
data (e.g., numpy arrays and strings) and create primitive Artist instances as needed (e.g., Line2D), add
them to the relevant containers, and draw them when requested. Most of you are probably familiar with the
Subplot, which is just a special case of an Axes that lives on a regular rows by columns grid of Subplot
instances. If you want to create an Axesat an arbitrary location, simply use the add_axes() method which
takes a list of [left, bottom, width, height]values in 0-1 relative ﬁgure coordinates:
fig2 = plt.figure()
ax2 = fig2.add_axes([0.15, 0.1, 0.7, 0.3])
Continuing with our example:
import numpy as np
t = np.arange(0.0, 1.0, 0.01)
s = np.sin(2*np.pi*t)
line, = ax.plot(t, s, color='blue', lw=2)
In this example, axis the Axesinstance created by the fig.add_subplotcall above (remember Subplot
is just a subclass of Axes) and when you call ax.plot, it creates a Line2D instance and adds it to the
Axes.lines list. In the interactive ipython session below, you can see that the Axes.lines list is length
one and contains the same line that was returned by the line, = ax.plot...call:
In [101]: ax.lines[0]
Out[101]: <matplotlib.lines.Line2D instance at 0x19a95710>
In [102]: line
Out[102]: <matplotlib.lines.Line2D instance at 0x19a95710>
If you make subsequent calls to ax.plot (and the hold state is “on” which is the default) then additional
lines will be added to the list. You can remove lines later simply by calling the list methods; either of these
will work:
del ax.lines[0]
ax.lines.remove(line) # one or the other, not both!
The Axes also has helper methods to conﬁgure and decorate the x-axis and y-axis tick, tick labels and axis
labels:
xtext = ax.set_xlabel('my xdata') # returns a Text instance
ytext = ax.set_ylabel('my ydata')
When you call ax.set_xlabel, it passes the information on the Text instance of the XAxis. Each Axes
instance contains an XAxis and a YAxis instance, which handle the layout and drawing of the ticks, tick
labels and axis labels.
56 Chapter 3. Tutorials",0.0285110473632812,"16>
Matplotlib, Release 2.0.2
    0
 50
100
150
200
250
300
350
     0 100
200 300
400 500
 Note: However, remember that in the IPython notebook with the inline backend, you can’t make changes to plots that have already been rendered. If you create imgplot here in one cell, you cannot call set_cmap() on it in a later cell and expect the earlier plot to change. Make sure that you enter these commands together in one cell. plt commands will not change plots from earlier cells.
There are many other colormap schemes available. See the list and images of the colormaps.
Color scale reference
It’s helpful to have an idea of what value a color represents. We can do that by adding color bars.
     In [12]: imgplot = plt.imshow(lum_img) In [13]: plt.colorbar()
  28 Chapter3. Tutorials

"
24,4.0,matplotlib_61-81_pdf.pdf ~ 4,"Matplotlib, Release 2.0.2
Try creating the ﬁgure below.
0.0 0.2 0.4 0.6 0.8 1.0
1.0
0.5
0.0
0.5
1.0
volts
a sine wave
4
 3
 2
 1
 0 1 2 3 4
time (s)
0
20
40
60
Customizing your objects
Every element in the ﬁgure is represented by a matplotlib Artist, and each has an extensive list of proper-
ties to conﬁgure its appearance. The ﬁgure itself contains a Rectangle exactly the size of the ﬁgure, which
you can use to set the background color and transparency of the ﬁgures. Likewise, each Axes bounding
box (the standard white box with black edges in the typical matplotlib plot, has a Rectangle instance that
determines the color, transparency, and other properties of the Axes. These instances are stored as mem-
ber variables Figure.patch and Axes.patch (“Patch” is a name inherited from MATLAB, and is a 2D
“patch” of color on the ﬁgure, e.g., rectangles, circles and polygons). Every matplotlib Artist has the
following properties
3.2. Intermediate 57",0.0080540180206298,"Matplotlib, Release 2.0.2
Try creating the ﬁgure below.
0.0
0.2
0.4
0.6
0.8
1.0
1.0
0.5
0.0
0.5
1.0
volts
a sine wave
4
3
2
1
0
1
2
3
4
time (s)
0
20
40
60
Customizing your objects
Every element in the ﬁgure is represented by a matplotlib Artist, and each has an extensive list of proper-
ties to conﬁgure its appearance. The ﬁgure itself contains a Rectangle exactly the size of the ﬁgure, which
you can use to set the background color and transparency of the ﬁgures. Likewise, each Axes bounding
box (the standard white box with black edges in the typical matplotlib plot, has a Rectangle instance that
determines the color, transparency, and other properties of the Axes. These instances are stored as mem-
ber variables Figure.patch and Axes.patch (“Patch” is a name inherited from MATLAB, and is a 2D
“patch” of color on the ﬁgure, e.g., rectangles, circles and polygons). Every matplotlib Artist has the
following properties
3.2. Intermediate
57
",0.0015020370483398,"Matplotlib, Release 2.0.2
Try creating the ﬁgure below.
0.0 0.2 0.4 0.6 0.8 1.0
1.0
0.5
0.0
0.5
1.0
volts
a sine wave
4
 3
 2
 1
 0 1 2 3 4
time (s)
0
20
40
60
Customizing your objects
Every element in the ﬁgure is represented by a matplotlib Artist, and each has an extensive list of proper-
ties to conﬁgure its appearance. The ﬁgure itself contains a Rectangle exactly the size of the ﬁgure, which
you can use to set the background color and transparency of the ﬁgures. Likewise, each Axes bounding
box (the standard white box with black edges in the typical matplotlib plot, has a Rectangle instance that
determines the color, transparency, and other properties of the Axes. These instances are stored as mem-
ber variables Figure.patch and Axes.patch (“Patch” is a name inherited from MATLAB, and is a 2D
“patch” of color on the ﬁgure, e.g., rectangles, circles and polygons). Every matplotlib Artist has the
following properties
3.2. Intermediate 57",0.007997989654541,"17>
Matplotlib, Release 2.0.2
     0
 50
100
150
200
250
300
350
0.8 0.7 0.6 0.5 0.4 0.3 0.2 0.1 0.0
     0 100
200 300
400 500
This adds a colorbar to your existing figure. This won’t automatically change if you change you switch to a different colormap - you have to re-create your plot, and add in the colorbar again.
Examining a specific data range
Sometimes you want to enhance the contrast in your image, or expand the contrast in a particular region while sacrificing the detail in colors that don’t vary much, or don’t matter. A good tool to find interesting regions is the histogram. To create a histogram of our image data, we use the hist() function.
In [14]: plt.hist(lum_img.ravel(), bins=256, range=(0.0, 1.0), fc='k', ec='k')
    3.1. Introductory 29

"
25,5.0,matplotlib_61-81_pdf.pdf ~ 5,"Matplotlib, Release 2.0.2
Property Description
alpha The transparency - a scalar from 0-1
animated A boolean that is used to facilitate animated drawing
axes The axes that the Artist lives in, possibly None
clip_box The bounding box that clips the Artist
clip_on Whether clipping is enabled
clip_path The path the artist is clipped to
contains A picking function to test whether the artist contains the pick point
ﬁgure The ﬁgure instance the artist lives in, possibly None
label A text label (e.g., for auto-labeling)
picker A python object that controls object picking
transform The transformation
visible A boolean whether the artist should be drawn
zorder A number which determines the drawing order
rasterized Boolean; Turns vectors into rastergraphics: (for compression & eps transparency)
Each of the properties is accessed with an old-fashioned setter or getter (yes we know this irritates Python-
istas and we plan to support direct access via properties or traits but it hasn’t been done yet). For example,
to multiply the current alpha by a half:
a = o.get_alpha()
o.set_alpha(0.5*a)
If you want to set a number of properties at once, you can also use thesetmethod with keyword arguments.
For example:
o.set(alpha=0.5, zorder=2)
If you are working interactively at the python shell, a handy way to inspect the Artist properties is to use
the matplotlib.artist.getp() function (simply getp() in pylab), which lists the properties and their
values. This works for classes derived from Artist as well, e.g., Figure and Rectangle. Here are the
Figurerectangle properties mentioned above:
In [149]: matplotlib.artist.getp(fig.patch)
alpha = 1.0
animated = False
antialiased or aa = True
axes = None
clip_box = None
clip_on = False
clip_path = None
contains = None
edgecolor or ec = w
facecolor or fc = 0.75
figure = Figure(8.125x6.125)
fill = 1
hatch = None
height = 1
label =
linewidth or lw = 1.0
picker = None
58 Chapter 3. Tutorials",0.0091309547424316,"Matplotlib, Release 2.0.2
Property
Description
alpha
The transparency - a scalar from 0-1
animated
A boolean that is used to facilitate animated drawing
axes
The axes that the Artist lives in, possibly None
clip_box
The bounding box that clips the Artist
clip_on
Whether clipping is enabled
clip_path
The path the artist is clipped to
contains
A picking function to test whether the artist contains the pick point
ﬁgure
The ﬁgure instance the artist lives in, possibly None
label
A text label (e.g., for auto-labeling)
picker
A python object that controls object picking
transform
The transformation
visible
A boolean whether the artist should be drawn
zorder
A number which determines the drawing order
rasterized
Boolean; Turns vectors into rastergraphics: (for compression & eps transparency)
Each of the properties is accessed with an old-fashioned setter or getter (yes we know this irritates Python-
istas and we plan to support direct access via properties or traits but it hasn’t been done yet). For example,
to multiply the current alpha by a half:
a = o.get_alpha()
o.set_alpha(0.5*a)
If you want to set a number of properties at once, you can also use the set method with keyword arguments.
For example:
o.set(alpha=0.5, zorder=2)
If you are working interactively at the python shell, a handy way to inspect the Artist properties is to use
the matplotlib.artist.getp() function (simply getp() in pylab), which lists the properties and their
values. This works for classes derived from Artist as well, e.g., Figure and Rectangle. Here are the
Figure rectangle properties mentioned above:
In [149]: matplotlib.artist.getp(fig.patch)
alpha = 1.0
animated = False
antialiased or aa = True
axes = None
clip_box = None
clip_on = False
clip_path = None
contains = None
edgecolor or ec = w
facecolor or fc = 0.75
figure = Figure(8.125x6.125)
fill = 1
hatch = None
height = 1
label =
linewidth or lw = 1.0
picker = None
58
Chapter 3. Tutorials
",0.0022461414337158,"Matplotlib, Release 2.0.2
Property Description
alpha The transparency - a scalar from 0-1
animated A boolean that is used to facilitate animated drawing
axes The axes that the Artist lives in, possibly None
clip_box The bounding box that clips the Artist
clip_on Whether clipping is enabled
clip_path The path the artist is clipped to
contains A picking function to test whether the artist contains the pick point
ﬁgure The ﬁgure instance the artist lives in, possibly None
label A text label (e.g., for auto-labeling)
picker A python object that controls object picking
transform The transformation
visible A boolean whether the artist should be drawn
zorder A number which determines the drawing order
rasterized Boolean; Turns vectors into rastergraphics: (for compression & eps transparency)
Each of the properties is accessed with an old-fashioned setter or getter (yes we know this irritates Python-
istas and we plan to support direct access via properties or traits but it hasn’t been done yet). For example,
to multiply the current alpha by a half:
a = o.get_alpha()
o.set_alpha(0.5*a)
If you want to set a number of properties at once, you can also use thesetmethod with keyword arguments.
For example:
o.set(alpha=0.5, zorder=2)
If you are working interactively at the python shell, a handy way to inspect the Artist properties is to use
the matplotlib.artist.getp() function (simply getp() in pylab), which lists the properties and their
values. This works for classes derived from Artist as well, e.g., Figure and Rectangle. Here are the
Figurerectangle properties mentioned above:
In [149]: matplotlib.artist.getp(fig.patch)
alpha = 1.0
animated = False
antialiased or aa = True
axes = None
clip_box = None
clip_on = False
clip_path = None
contains = None
edgecolor or ec = w
facecolor or fc = 0.75
figure = Figure(8.125x6.125)
fill = 1
hatch = None
height = 1
label =
linewidth or lw = 1.0
picker = None
58 Chapter 3. Tutorials",0.0105280876159667,"18>
Matplotlib, Release 2.0.2
      8000
6000
4000
2000
0
0.0 0.2
0.4 0.6
0.8 1.0
 Most often, the “interesting” part of the image is around the peak, and you can get extra contrast by clipping the regions above and/or below the peak. In our histogram, it looks like there’s not much useful information in the high end (not many white things in the image). Let’s adjust the upper limit, so that we effectively “zoom in on” part of the histogram. We do this by passing the clim argument to imshow. You could also do this by calling the set_clim() method of the image plot object, but make sure that you do so in the same cell as your plot command when working with the IPython Notebook - it will not change plots from earlier cells.
In [15]: imgplot = plt.imshow(lum_img, clim=(0.0, 0.7))
    30 Chapter3. Tutorials
"
26,6.0,matplotlib_61-81_pdf.pdf ~ 6,"Matplotlib, Release 2.0.2
transform = <Affine object at 0x134cca84>
verts = ((0, 0), (0, 1), (1, 1), (1, 0))
visible = True
width = 1
window_extent = <Bbox object at 0x134acbcc>
x = 0
y = 0
zorder = 1
The docstrings for all of the classes also contain the Artist properties, so you can consult the interactive
“help” or theartist Module for a listing of properties for a given object.
Object containers
Now that we know how to inspect and set the properties of a given object we want to conﬁgure, we need to
know how to get at that object. As mentioned in the introduction, there are two kinds of objects: primitives
and containers. The primitives are usually the things you want to conﬁgure (the font of a Text instance,
the width of a Line2D) although the containers also have some properties as well – for example the Axes
Artist is a container that contains many of the primitives in your plot, but it also has properties like the
xscale to control whether the xaxis is ‘linear’ or ‘log’. In this section we’ll review where the various
container objects store the Artiststhat you want to get at.
Figure container
The top level container Artist is the matplotlib.figure.Figure, and it contains everything in the
ﬁgure. The background of the ﬁgure is a Rectangle which is stored in Figure.patch. As you add
subplots (add_subplot()) and axes ( add_axes()) to the ﬁgure these will be appended to the Figure.
axes. These are also returned by the methods that create them:
In [156]: fig = plt.figure()
In [157]: ax1 = fig.add_subplot(211)
In [158]: ax2 = fig.add_axes([0.1, 0.1, 0.7, 0.3])
In [159]: ax1
Out[159]: <matplotlib.axes.Subplot instance at 0xd54b26c>
In [160]: print fig.axes
[<matplotlib.axes.Subplot instance at 0xd54b26c>, <matplotlib.axes.Axes instance at␣
↪→0xd3f0b2c>]
Because the ﬁgure maintains the concept of the “current axes” (see Figure.gca and Figure.sca) to
support the pylab/pyplot state machine, you should not insert or remove axes directly from the axes list, but
rather use the add_subplot() and add_axes() methods to insert, and the delaxes() method to delete.
You are free however, to iterate over the list of axes or index into it to get access toAxesinstances you want
to customize. Here is an example which turns all the axes grids on:
3.2. Intermediate 59",0.0100233554840087,"Matplotlib, Release 2.0.2
transform = <Affine object at 0x134cca84>
verts = ((0, 0), (0, 1), (1, 1), (1, 0))
visible = True
width = 1
window_extent = <Bbox object at 0x134acbcc>
x = 0
y = 0
zorder = 1
The docstrings for all of the classes also contain the Artist properties, so you can consult the interactive
“help” or the artist Module for a listing of properties for a given object.
Object containers
Now that we know how to inspect and set the properties of a given object we want to conﬁgure, we need to
know how to get at that object. As mentioned in the introduction, there are two kinds of objects: primitives
and containers. The primitives are usually the things you want to conﬁgure (the font of a Text instance,
the width of a Line2D) although the containers also have some properties as well – for example the Axes
Artist is a container that contains many of the primitives in your plot, but it also has properties like the
xscale to control whether the xaxis is ‘linear’ or ‘log’. In this section we’ll review where the various
container objects store the Artists that you want to get at.
Figure container
The top level container Artist is the matplotlib.figure.Figure, and it contains everything in the
ﬁgure. The background of the ﬁgure is a Rectangle which is stored in Figure.patch. As you add
subplots (add_subplot()) and axes (add_axes()) to the ﬁgure these will be appended to the Figure.
axes. These are also returned by the methods that create them:
In [156]: fig = plt.figure()
In [157]: ax1 = fig.add_subplot(211)
In [158]: ax2 = fig.add_axes([0.1, 0.1, 0.7, 0.3])
In [159]: ax1
Out[159]: <matplotlib.axes.Subplot instance at 0xd54b26c>
In [160]: print fig.axes
[<matplotlib.axes.Subplot instance at 0xd54b26c>, <matplotlib.axes.Axes instance at␣
,→0xd3f0b2c>]
Because the ﬁgure maintains the concept of the “current axes” (see Figure.gca and Figure.sca) to
support the pylab/pyplot state machine, you should not insert or remove axes directly from the axes list, but
rather use the add_subplot() and add_axes() methods to insert, and the delaxes() method to delete.
You are free however, to iterate over the list of axes or index into it to get access to Axes instances you want
to customize. Here is an example which turns all the axes grids on:
3.2. Intermediate
59
",0.0026922225952148,"Matplotlib, Release 2.0.2
transform = <Affine object at 0x134cca84>
verts = ((0, 0), (0, 1), (1, 1), (1, 0))
visible = True
width = 1
window_extent = <Bbox object at 0x134acbcc>
x = 0
y = 0
zorder = 1
The docstrings for all of the classes also contain the Artist properties, so you can consult the interactive
“help” or theartist Module for a listing of properties for a given object.
Object containers
Now that we know how to inspect and set the properties of a given object we want to conﬁgure, we need to
know how to get at that object. As mentioned in the introduction, there are two kinds of objects: primitives
and containers. The primitives are usually the things you want to conﬁgure (the font of a Text instance,
the width of a Line2D) although the containers also have some properties as well – for example the Axes
Artist is a container that contains many of the primitives in your plot, but it also has properties like the
xscale to control whether the xaxis is ‘linear’ or ‘log’. In this section we’ll review where the various
container objects store the Artiststhat you want to get at.
Figure container
The top level container Artist is the matplotlib.figure.Figure, and it contains everything in the
ﬁgure. The background of the ﬁgure is a Rectangle which is stored in Figure.patch. As you add
subplots (add_subplot()) and axes ( add_axes()) to the ﬁgure these will be appended to the Figure.
axes. These are also returned by the methods that create them:
In [156]: fig = plt.figure()
In [157]: ax1 = fig.add_subplot(211)
In [158]: ax2 = fig.add_axes([0.1, 0.1, 0.7, 0.3])
In [159]: ax1
Out[159]: <matplotlib.axes.Subplot instance at 0xd54b26c>
In [160]: print fig.axes
[<matplotlib.axes.Subplot instance at 0xd54b26c>, <matplotlib.axes.Axes instance at␣
↪→0xd3f0b2c>]
Because the ﬁgure maintains the concept of the “current axes” (see Figure.gca and Figure.sca) to
support the pylab/pyplot state machine, you should not insert or remove axes directly from the axes list, but
rather use the add_subplot() and add_axes() methods to insert, and the delaxes() method to delete.
You are free however, to iterate over the list of axes or index into it to get access toAxesinstances you want
to customize. Here is an example which turns all the axes grids on:
3.2. Intermediate 59",0.0093829631805419,"19>
Array Interpolation schemes
Interpolation calculates what the color or value of a pixel “should” be, according to different mathematical schemes. One common place that this happens is when you resize an image. The number of pixels change, but you want the same information. Since pixels are discrete, there’s missing space. Interpolation is how you fill that space. This is why your images sometimes come out looking pixelated when you blow them up. The effect is more pronounced when the difference between the original image and the expanded image is greater. Let’s take our image and shrink it. We’re effectively discarding pixels, only keeping a select few. Now when we plot it, that data gets blown up to the size on your screen. The old pixels aren’t there anymore, and the computer has to draw in pixels to fill that space.
We’ll use the Pillow library that we used to load the image also to resize the image.
Matplotlib, Release 2.0.2
  0 100 200 300
Before
0 After
100 200 300
  0 200 400 0 200 400
0.1 0.3 0.5 0.7 0.1 0.3 0.5 0.7
      In [16]: from PIL import Image
In [17]: img = Image.open('../_static/stinkbug.png')
In [18]: img.thumbnail((64, 64), Image.ANTIALIAS) # resizes image in-place In [19]: imgplot = plt.imshow(img)
  3.1. Introductory 31
  
"
27,7.0,matplotlib_61-81_pdf.pdf ~ 7,"Matplotlib, Release 2.0.2
for ax in fig.axes:
ax.grid(True)
The ﬁgure also has its own text, lines, patches and images, which you can use to add primitives directly. The
default coordinate system for the Figurewill simply be in pixels (which is not usually what you want) but
you can control this by setting the transform property of the Artistyou are adding to the ﬁgure.
More useful is “ﬁgure coordinates” where (0, 0) is the bottom-left of the ﬁgure and (1, 1) is the top-right of
the ﬁgure which you can obtain by setting the Artisttransform to fig.transFigure:
In [191]: fig = plt.figure()
In [192]: l1 = matplotlib.lines.Line2D([0, 1], [0, 1],
transform=fig.transFigure, figure=fig)
In [193]: l2 = matplotlib.lines.Line2D([0, 1], [1, 0],
transform=fig.transFigure, figure=fig)
In [194]: fig.lines.extend([l1, l2])
In [195]: fig.canvas.draw()
Here is a summary of the Artists the ﬁgure contains
60 Chapter 3. Tutorials",0.0051708221435546,"Matplotlib, Release 2.0.2
for ax in fig.axes:
ax.grid(True)
The ﬁgure also has its own text, lines, patches and images, which you can use to add primitives directly. The
default coordinate system for the Figure will simply be in pixels (which is not usually what you want) but
you can control this by setting the transform property of the Artist you are adding to the ﬁgure.
More useful is “ﬁgure coordinates” where (0, 0) is the bottom-left of the ﬁgure and (1, 1) is the top-right of
the ﬁgure which you can obtain by setting the Artist transform to fig.transFigure:
In [191]: fig = plt.figure()
In [192]: l1 = matplotlib.lines.Line2D([0, 1], [0, 1],
transform=fig.transFigure, figure=fig)
In [193]: l2 = matplotlib.lines.Line2D([0, 1], [1, 0],
transform=fig.transFigure, figure=fig)
In [194]: fig.lines.extend([l1, l2])
In [195]: fig.canvas.draw()
Here is a summary of the Artists the ﬁgure contains
60
Chapter 3. Tutorials
",0.0009601116180419,"Matplotlib, Release 2.0.2
for ax in fig.axes:
ax.grid(True)
The ﬁgure also has its own text, lines, patches and images, which you can use to add primitives directly. The
default coordinate system for the Figurewill simply be in pixels (which is not usually what you want) but
you can control this by setting the transform property of the Artistyou are adding to the ﬁgure.
More useful is “ﬁgure coordinates” where (0, 0) is the bottom-left of the ﬁgure and (1, 1) is the top-right of
the ﬁgure which you can obtain by setting the Artisttransform to fig.transFigure:
In [191]: fig = plt.figure()
In [192]: l1 = matplotlib.lines.Line2D([0, 1], [0, 1],
transform=fig.transFigure, figure=fig)
In [193]: l2 = matplotlib.lines.Line2D([0, 1], [1, 0],
transform=fig.transFigure, figure=fig)
In [194]: fig.lines.extend([l1, l2])
In [195]: fig.canvas.draw()
Here is a summary of the Artists the ﬁgure contains
60 Chapter 3. Tutorials",0.0042989253997802,"20>
Matplotlib, Release 2.0.2
  0
10
20
30
40
     0 10 20 30 40 50 60
Here we have the default interpolation, bilinear, since we did not give imshow() any interpolation argument. Let’s try some others:
In [20]: imgplot = plt.imshow(img, interpolation=""nearest"")
    32 Chapter3. Tutorials
"
28,8.0,matplotlib_61-81_pdf.pdf ~ 8,"Matplotlib, Release 2.0.2
Figure attribute Description
axes A list of Axes instances (includes Subplot)
patch The Rectangle background
images A list of FigureImages patches - useful for raw pixel display
legends A list of Figure Legend instances (diﬀerent from Axes.legends)
lines A list of Figure Line2D instances (rarely used, see Axes.lines)
patches A list of Figure patches (rarely used, see Axes.patches)
texts A list Figure Text instances
Axes container
The matplotlib.axes.Axes is the center of the matplotlib universe – it contains the vast majority of all
the Artists used in a ﬁgure with many helper methods to create and add these Artists to itself, as well
as helper methods to access and customize the Artists it contains. Like the Figure, it contains a Patch
patch which is a Rectangle for Cartesian coordinates and a Circle for polar coordinates; this patch
determines the shape, background and border of the plotting region:
ax = fig.add_subplot(111)
rect = ax.patch # a Rectangle instance
rect.set_facecolor('green')
When you call a plotting method, e.g., the canonicalplot() and pass in arrays or lists of values, the method
will create amatplotlib.lines.Line2D() instance, update the line with all theLine2Dproperties passed
as keyword arguments, add the line to the Axes.linescontainer, and returns it to you:
In [213]: x, y = np.random.rand(2, 100)
In [214]: line, = ax.plot(x, y, '-', color='blue', linewidth=2)
plotreturns a list of lines because you can pass in multiple x, y pairs to plot, and we are unpacking the ﬁrst
element of the length one list into the line variable. The line has been added to the Axes.lineslist:
In [229]: print ax.lines
[<matplotlib.lines.Line2D instance at 0xd378b0c>]
Similarly, methods that create patches, like bar() creates a list of rectangles, will add the patches to the
Axes.patcheslist:
In [233]: n, bins, rectangles = ax.hist(np.random.randn(1000), 50, facecolor='yellow')
In [234]: rectangles
Out[234]: <a list of 50 Patch objects>
In [235]: print len(ax.patches)
You should not add objects directly to the Axes.lines or Axes.patches lists unless you know exactly
what you are doing, because theAxesneeds to do a few things when it creates and adds an object. It sets the
ﬁgure and axes property of theArtist, as well as the defaultAxestransformation (unless a transformation is
set). It also inspects the data contained in the Artistto update the data structures controlling auto-scaling,
3.2. Intermediate 61",0.0103061199188232,"Matplotlib, Release 2.0.2
Figure attribute
Description
axes
A list of Axes instances (includes Subplot)
patch
The Rectangle background
images
A list of FigureImages patches - useful for raw pixel display
legends
A list of Figure Legend instances (diﬀerent from Axes.legends)
lines
A list of Figure Line2D instances (rarely used, see Axes.lines)
patches
A list of Figure patches (rarely used, see Axes.patches)
texts
A list Figure Text instances
Axes container
The matplotlib.axes.Axes is the center of the matplotlib universe – it contains the vast majority of all
the Artists used in a ﬁgure with many helper methods to create and add these Artists to itself, as well
as helper methods to access and customize the Artists it contains. Like the Figure, it contains a Patch
patch which is a Rectangle for Cartesian coordinates and a Circle for polar coordinates; this patch
determines the shape, background and border of the plotting region:
ax = fig.add_subplot(111)
rect = ax.patch
# a Rectangle instance
rect.set_facecolor('green')
When you call a plotting method, e.g., the canonical plot() and pass in arrays or lists of values, the method
will create a matplotlib.lines.Line2D() instance, update the line with all the Line2D properties passed
as keyword arguments, add the line to the Axes.lines container, and returns it to you:
In [213]: x, y = np.random.rand(2, 100)
In [214]: line, = ax.plot(x, y, '-', color='blue', linewidth=2)
plot returns a list of lines because you can pass in multiple x, y pairs to plot, and we are unpacking the ﬁrst
element of the length one list into the line variable. The line has been added to the Axes.lines list:
In [229]: print ax.lines
[<matplotlib.lines.Line2D instance at 0xd378b0c>]
Similarly, methods that create patches, like bar() creates a list of rectangles, will add the patches to the
Axes.patches list:
In [233]: n, bins, rectangles = ax.hist(np.random.randn(1000), 50, facecolor='yellow')
In [234]: rectangles
Out[234]: <a list of 50 Patch objects>
In [235]: print len(ax.patches)
You should not add objects directly to the Axes.lines or Axes.patches lists unless you know exactly
what you are doing, because the Axes needs to do a few things when it creates and adds an object. It sets the
ﬁgure and axes property of the Artist, as well as the default Axes transformation (unless a transformation is
set). It also inspects the data contained in the Artist to update the data structures controlling auto-scaling,
3.2. Intermediate
61
",0.0025482177734375,"Matplotlib, Release 2.0.2
Figure attribute Description
axes A list of Axes instances (includes Subplot)
patch The Rectangle background
images A list of FigureImages patches - useful for raw pixel display
legends A list of Figure Legend instances (diﬀerent from Axes.legends)
lines A list of Figure Line2D instances (rarely used, see Axes.lines)
patches A list of Figure patches (rarely used, see Axes.patches)
texts A list Figure Text instances
Axes container
The matplotlib.axes.Axes is the center of the matplotlib universe – it contains the vast majority of all
the Artists used in a ﬁgure with many helper methods to create and add these Artists to itself, as well
as helper methods to access and customize the Artists it contains. Like the Figure, it contains a Patch
patch which is a Rectangle for Cartesian coordinates and a Circle for polar coordinates; this patch
determines the shape, background and border of the plotting region:
ax = fig.add_subplot(111)
rect = ax.patch # a Rectangle instance
rect.set_facecolor('green')
When you call a plotting method, e.g., the canonicalplot() and pass in arrays or lists of values, the method
will create amatplotlib.lines.Line2D() instance, update the line with all theLine2Dproperties passed
as keyword arguments, add the line to the Axes.linescontainer, and returns it to you:
In [213]: x, y = np.random.rand(2, 100)
In [214]: line, = ax.plot(x, y, '-', color='blue', linewidth=2)
plotreturns a list of lines because you can pass in multiple x, y pairs to plot, and we are unpacking the ﬁrst
element of the length one list into the line variable. The line has been added to the Axes.lineslist:
In [229]: print ax.lines
[<matplotlib.lines.Line2D instance at 0xd378b0c>]
Similarly, methods that create patches, like bar() creates a list of rectangles, will add the patches to the
Axes.patcheslist:
In [233]: n, bins, rectangles = ax.hist(np.random.randn(1000), 50, facecolor='yellow')
In [234]: rectangles
Out[234]: <a list of 50 Patch objects>
In [235]: print len(ax.patches)
You should not add objects directly to the Axes.lines or Axes.patches lists unless you know exactly
what you are doing, because theAxesneeds to do a few things when it creates and adds an object. It sets the
ﬁgure and axes property of theArtist, as well as the defaultAxestransformation (unless a transformation is
set). It also inspects the data contained in the Artistto update the data structures controlling auto-scaling,
3.2. Intermediate 61",0.0099279880523681,
29,9.0,matplotlib_61-81_pdf.pdf ~ 9,"Matplotlib, Release 2.0.2
so that the view limits can be adjusted to contain the plotted data. You can, nonetheless, create objects
yourself and add them directly to the Axes using helper methods like add_line() and add_patch().
Here is an annotated interactive session illustrating what is going on:
In [261]: fig = plt.figure()
In [262]: ax = fig.add_subplot(111)
# create a rectangle instance
In [263]: rect = matplotlib.patches.Rectangle( (1,1), width=5, height=12)
# by default the axes instance is None
In [264]: print rect.get_axes()
None
# and the transformation instance is set to the ""identity transform""
In [265]: print rect.get_transform()
<Affine object at 0x13695544>
# now we add the Rectangle to the Axes
In [266]: ax.add_patch(rect)
# and notice that the ax.add_patch method has set the axes
# instance
In [267]: print rect.get_axes()
Axes(0.125,0.1;0.775x0.8)
# and the transformation has been set too
In [268]: print rect.get_transform()
<Affine object at 0x15009ca4>
# the default axes transformation is ax.transData
In [269]: print ax.transData
<Affine object at 0x15009ca4>
# notice that the xlimits of the Axes have not been changed
In [270]: print ax.get_xlim()
(0.0, 1.0)
# but the data limits have been updated to encompass the rectangle
In [271]: print ax.dataLim.bounds
(1.0, 1.0, 5.0, 12.0)
# we can manually invoke the auto-scaling machinery
In [272]: ax.autoscale_view()
# and now the xlim are updated to encompass the rectangle
In [273]: print ax.get_xlim()
(1.0, 6.0)
# we have to manually force a figure draw
In [274]: ax.figure.canvas.draw()
62 Chapter 3. Tutorials",0.0062909126281738,"Matplotlib, Release 2.0.2
so that the view limits can be adjusted to contain the plotted data. You can, nonetheless, create objects
yourself and add them directly to the Axes using helper methods like add_line() and add_patch().
Here is an annotated interactive session illustrating what is going on:
In [261]: fig = plt.figure()
In [262]: ax = fig.add_subplot(111)
# create a rectangle instance
In [263]: rect = matplotlib.patches.Rectangle( (1,1), width=5, height=12)
# by default the axes instance is None
In [264]: print rect.get_axes()
None
# and the transformation instance is set to the ""identity transform""
In [265]: print rect.get_transform()
<Affine object at 0x13695544>
# now we add the Rectangle to the Axes
In [266]: ax.add_patch(rect)
# and notice that the ax.add_patch method has set the axes
# instance
In [267]: print rect.get_axes()
Axes(0.125,0.1;0.775x0.8)
# and the transformation has been set too
In [268]: print rect.get_transform()
<Affine object at 0x15009ca4>
# the default axes transformation is ax.transData
In [269]: print ax.transData
<Affine object at 0x15009ca4>
# notice that the xlimits of the Axes have not been changed
In [270]: print ax.get_xlim()
(0.0, 1.0)
# but the data limits have been updated to encompass the rectangle
In [271]: print ax.dataLim.bounds
(1.0, 1.0, 5.0, 12.0)
# we can manually invoke the auto-scaling machinery
In [272]: ax.autoscale_view()
# and now the xlim are updated to encompass the rectangle
In [273]: print ax.get_xlim()
(1.0, 6.0)
# we have to manually force a figure draw
In [274]: ax.figure.canvas.draw()
62
Chapter 3. Tutorials
",0.0014553070068359,"Matplotlib, Release 2.0.2
so that the view limits can be adjusted to contain the plotted data. You can, nonetheless, create objects
yourself and add them directly to the Axes using helper methods like add_line() and add_patch().
Here is an annotated interactive session illustrating what is going on:
In [261]: fig = plt.figure()
In [262]: ax = fig.add_subplot(111)
# create a rectangle instance
In [263]: rect = matplotlib.patches.Rectangle( (1,1), width=5, height=12)
# by default the axes instance is None
In [264]: print rect.get_axes()
None
# and the transformation instance is set to the ""identity transform""
In [265]: print rect.get_transform()
<Affine object at 0x13695544>
# now we add the Rectangle to the Axes
In [266]: ax.add_patch(rect)
# and notice that the ax.add_patch method has set the axes
# instance
In [267]: print rect.get_axes()
Axes(0.125,0.1;0.775x0.8)
# and the transformation has been set too
In [268]: print rect.get_transform()
<Affine object at 0x15009ca4>
# the default axes transformation is ax.transData
In [269]: print ax.transData
<Affine object at 0x15009ca4>
# notice that the xlimits of the Axes have not been changed
In [270]: print ax.get_xlim()
(0.0, 1.0)
# but the data limits have been updated to encompass the rectangle
In [271]: print ax.dataLim.bounds
(1.0, 1.0, 5.0, 12.0)
# we can manually invoke the auto-scaling machinery
In [272]: ax.autoscale_view()
# and now the xlim are updated to encompass the rectangle
In [273]: print ax.get_xlim()
(1.0, 6.0)
# we have to manually force a figure draw
In [274]: ax.figure.canvas.draw()
62 Chapter 3. Tutorials",0.0073060989379882,"1>
Matplotlib, Release 2.0.2
  0
10
20
30
40
     0 10 20 30 40 50 60
  In [21]: imgplot = plt.imshow(img, interpolation=""bicubic"")
  3.1. Introductory 33

"
30,10.0,matplotlib_61-81_pdf.pdf ~ 10,"Matplotlib, Release 2.0.2
There are many, manyAxeshelper methods for creating primitiveArtistsand adding them to their respec-
tive containers. The table below summarizes a small sampling of them, the kinds of Artist they create,
and where they store them
Helper method Artist Container
ax.annotate - text annotations Annotate ax.texts
ax.bar - bar charts Rectangle ax.patches
ax.errorbar - error bar plots Line2D and Rectangle ax.lines and ax.patches
ax.ﬁll - shared area Polygon ax.patches
ax.hist - histograms Rectangle ax.patches
ax.imshow - image data AxesImage ax.images
ax.legend - axes legends Legend ax.legends
ax.plot - xy plots Line2D ax.lines
ax.scatter - scatter charts PolygonCollection ax.collections
ax.text - text Text ax.texts
In addition to all of these Artists, the Axes contains two important Artist containers: the XAxis and
YAxis, which handle the drawing of the ticks and labels. These are stored as instance variables xaxis and
yaxis. The XAxis and YAxis containers will be detailed below, but note that the Axes contains many
helper methods which forward calls on to the Axis instances so you often do not need to work with them
directly unless you want to. For example, you can set the font color of the XAxisticklabels using the Axes
helper method:
for label in ax.get_xticklabels():
label.set_color('orange')
Below is a summary of the Artists that the Axes contains
Axes attribute Description
artists A list of Artist instances
patch Rectangle instance for Axes background
collections A list of Collection instances
images A list of AxesImage
legends A list of Legend instances
lines A list of Line2D instances
patches A list of Patch instances
texts A list of Text instances
xaxis matplotlib.axis.XAxis instance
yaxis matplotlib.axis.Y Axis instance
Axis containers
The matplotlib.axis.Axis instances handle the drawing of the tick lines, the grid lines, the tick labels
and the axis label. You can conﬁgure the left and right ticks separately for the y-axis, and the upper and
lower ticks separately for the x-axis. The Axis also stores the data and view intervals used in auto-scaling,
panning and zooming, as well as the Locator and Formatter instances which control where the ticks are
placed and how they are represented as strings.
Each Axis object contains a label attribute (this is what pylab modiﬁes in calls to xlabel() and
3.2. Intermediate 63",0.0106787681579589,"Matplotlib, Release 2.0.2
There are many, many Axes helper methods for creating primitive Artists and adding them to their respec-
tive containers. The table below summarizes a small sampling of them, the kinds of Artist they create,
and where they store them
Helper method
Artist
Container
ax.annotate - text annotations
Annotate
ax.texts
ax.bar - bar charts
Rectangle
ax.patches
ax.errorbar - error bar plots
Line2D and Rectangle
ax.lines and ax.patches
ax.ﬁll - shared area
Polygon
ax.patches
ax.hist - histograms
Rectangle
ax.patches
ax.imshow - image data
AxesImage
ax.images
ax.legend - axes legends
Legend
ax.legends
ax.plot - xy plots
Line2D
ax.lines
ax.scatter - scatter charts
PolygonCollection
ax.collections
ax.text - text
Text
ax.texts
In addition to all of these Artists, the Axes contains two important Artist containers: the XAxis and
YAxis, which handle the drawing of the ticks and labels. These are stored as instance variables xaxis and
yaxis. The XAxis and YAxis containers will be detailed below, but note that the Axes contains many
helper methods which forward calls on to the Axis instances so you often do not need to work with them
directly unless you want to. For example, you can set the font color of the XAxis ticklabels using the Axes
helper method:
for label in ax.get_xticklabels():
label.set_color('orange')
Below is a summary of the Artists that the Axes contains
Axes attribute
Description
artists
A list of Artist instances
patch
Rectangle instance for Axes background
collections
A list of Collection instances
images
A list of AxesImage
legends
A list of Legend instances
lines
A list of Line2D instances
patches
A list of Patch instances
texts
A list of Text instances
xaxis
matplotlib.axis.XAxis instance
yaxis
matplotlib.axis.YAxis instance
Axis containers
The matplotlib.axis.Axis instances handle the drawing of the tick lines, the grid lines, the tick labels
and the axis label. You can conﬁgure the left and right ticks separately for the y-axis, and the upper and
lower ticks separately for the x-axis. The Axis also stores the data and view intervals used in auto-scaling,
panning and zooming, as well as the Locator and Formatter instances which control where the ticks are
placed and how they are represented as strings.
Each Axis object contains a label attribute (this is what pylab modiﬁes in calls to xlabel() and
3.2. Intermediate
63
",0.0026662349700927,"Matplotlib, Release 2.0.2
There are many, manyAxeshelper methods for creating primitiveArtistsand adding them to their respec-
tive containers. The table below summarizes a small sampling of them, the kinds of Artist they create,
and where they store them
Helper method Artist Container
ax.annotate - text annotations Annotate ax.texts
ax.bar - bar charts Rectangle ax.patches
ax.errorbar - error bar plots Line2D and Rectangle ax.lines and ax.patches
ax.ﬁll - shared area Polygon ax.patches
ax.hist - histograms Rectangle ax.patches
ax.imshow - image data AxesImage ax.images
ax.legend - axes legends Legend ax.legends
ax.plot - xy plots Line2D ax.lines
ax.scatter - scatter charts PolygonCollection ax.collections
ax.text - text Text ax.texts
In addition to all of these Artists, the Axes contains two important Artist containers: the XAxis and
YAxis, which handle the drawing of the ticks and labels. These are stored as instance variables xaxis and
yaxis. The XAxis and YAxis containers will be detailed below, but note that the Axes contains many
helper methods which forward calls on to the Axis instances so you often do not need to work with them
directly unless you want to. For example, you can set the font color of the XAxisticklabels using the Axes
helper method:
for label in ax.get_xticklabels():
label.set_color('orange')
Below is a summary of the Artists that the Axes contains
Axes attribute Description
artists A list of Artist instances
patch Rectangle instance for Axes background
collections A list of Collection instances
images A list of AxesImage
legends A list of Legend instances
lines A list of Line2D instances
patches A list of Patch instances
texts A list of Text instances
xaxis matplotlib.axis.XAxis instance
yaxis matplotlib.axis.Y Axis instance
Axis containers
The matplotlib.axis.Axis instances handle the drawing of the tick lines, the grid lines, the tick labels
and the axis label. You can conﬁgure the left and right ticks separately for the y-axis, and the upper and
lower ticks separately for the x-axis. The Axis also stores the data and view intervals used in auto-scaling,
panning and zooming, as well as the Locator and Formatter instances which control where the ticks are
placed and how they are represented as strings.
Each Axis object contains a label attribute (this is what pylab modiﬁes in calls to xlabel() and
3.2. Intermediate 63",0.0104262828826904,"2>
Matplotlib, Release 2.0.2
  0
10
20
30
40
     0 10 20 30 40 50 60
Bicubic interpolation is often used when blowing up photos - people tend to prefer blurry over pixelated.
3.1.3 Customizing Location of Subplot Using GridSpec
GridSpec specifies the geometry of the grid that a subplot will be placed. The number of rows and number of columns of the grid need to be set. Optionally, the subplot layout parameters (e.g., left, right, etc.) can be tuned.
SubplotSpec specifies the location of the subplot in the given GridSpec.
subplot2grid() a helper function that is similar to subplot() but uses 0-based indexing
and let subplot to occupy multiple cells.
Basic Example of using subplot2grid
To use subplot2grid(), you provide geometry of the grid and the location of the subplot in the grid. For a simple single-cell subplot:
ax = plt.subplot2grid((2, 2), (0, 0)) is identical to
    34 Chapter3. Tutorials
"
31,11.0,matplotlib_61-81_pdf.pdf ~ 11,"Matplotlib, Release 2.0.2
ylabel()) as well as a list of major and minor ticks. The ticks are XTick and YTick instances, which
contain the actual line and text primitives that render the ticks and ticklabels. Because the ticks are dynam-
ically created as needed (e.g., when panning and zooming), you should access the lists of major and minor
ticks through their accessor methods get_major_ticks() and get_minor_ticks(). Although the ticks
contain all the primitives and will be covered below, Axis instances have accessor methods that return the
tick lines, tick labels, tick locations etc.:
In [285]: axis = ax.xaxis
In [286]: axis.get_ticklocs()
Out[286]: array([ 0., 1., 2., 3., 4., 5., 6., 7., 8., 9.])
In [287]: axis.get_ticklabels()
Out[287]: <a list of 10 Text major ticklabel objects>
# note there are twice as many ticklines as labels because by
# default there are tick lines at the top and bottom but only tick
# labels below the xaxis; this can be customized
In [288]: axis.get_ticklines()
Out[288]: <a list of 20 Line2D ticklines objects>
# by default you get the major ticks back
In [291]: axis.get_ticklines()
Out[291]: <a list of 20 Line2D ticklines objects>
# but you can also ask for the minor ticks
In [292]: axis.get_ticklines(minor=True)
Out[292]: <a list of 0 Line2D ticklines objects>
Here is a summary of some of the useful accessor methods of the Axis (these have corresponding setters
where useful, such as set_major_formatter)
Accessor method Description
get_scale The scale of the axis, e.g., ‘log’ or ‘linear’
get_view_interval The interval instance of the axis view limits
get_data_interval The interval instance of the axis data limits
get_gridlines A list of grid lines for the Axis
get_label The axis label - a Text instance
get_ticklabels A list of Text instances - keyword minor=True|False
get_ticklines A list of Line2D instances - keyword minor=True|False
get_ticklocs A list of Tick locations - keyword minor=True|False
get_major_locator The matplotlib.ticker.Locator instance for major ticks
get_major_formatter The matplotlib.ticker.Formatter instance for major ticks
get_minor_locator The matplotlib.ticker.Locator instance for minor ticks
get_minor_formatter The matplotlib.ticker.Formatter instance for minor ticks
get_major_ticks A list of Tick instances for major ticks
get_minor_ticks A list of Tick instances for minor ticks
grid Turn the grid on or oﬀ for the major or minor ticks
Here is an example, not recommended for its beauty, which customizes the axes and tick properties
64 Chapter 3. Tutorials",0.0096440315246582,"Matplotlib, Release 2.0.2
ylabel()) as well as a list of major and minor ticks. The ticks are XTick and YTick instances, which
contain the actual line and text primitives that render the ticks and ticklabels. Because the ticks are dynam-
ically created as needed (e.g., when panning and zooming), you should access the lists of major and minor
ticks through their accessor methods get_major_ticks() and get_minor_ticks(). Although the ticks
contain all the primitives and will be covered below, Axis instances have accessor methods that return the
tick lines, tick labels, tick locations etc.:
In [285]: axis = ax.xaxis
In [286]: axis.get_ticklocs()
Out[286]: array([ 0.,
1.,
2.,
3.,
4.,
5.,
6.,
7.,
8.,
9.])
In [287]: axis.get_ticklabels()
Out[287]: <a list of 10 Text major ticklabel objects>
# note there are twice as many ticklines as labels because by
#
default there are tick lines at the top and bottom but only tick
#
labels below the xaxis; this can be customized
In [288]: axis.get_ticklines()
Out[288]: <a list of 20 Line2D ticklines objects>
# by default you get the major ticks back
In [291]: axis.get_ticklines()
Out[291]: <a list of 20 Line2D ticklines objects>
# but you can also ask for the minor ticks
In [292]: axis.get_ticklines(minor=True)
Out[292]: <a list of 0 Line2D ticklines objects>
Here is a summary of some of the useful accessor methods of the Axis (these have corresponding setters
where useful, such as set_major_formatter)
Accessor method
Description
get_scale
The scale of the axis, e.g., ‘log’ or ‘linear’
get_view_interval
The interval instance of the axis view limits
get_data_interval
The interval instance of the axis data limits
get_gridlines
A list of grid lines for the Axis
get_label
The axis label - a Text instance
get_ticklabels
A list of Text instances - keyword minor=True|False
get_ticklines
A list of Line2D instances - keyword minor=True|False
get_ticklocs
A list of Tick locations - keyword minor=True|False
get_major_locator
The matplotlib.ticker.Locator instance for major ticks
get_major_formatter
The matplotlib.ticker.Formatter instance for major ticks
get_minor_locator
The matplotlib.ticker.Locator instance for minor ticks
get_minor_formatter
The matplotlib.ticker.Formatter instance for minor ticks
get_major_ticks
A list of Tick instances for major ticks
get_minor_ticks
A list of Tick instances for minor ticks
grid
Turn the grid on or oﬀfor the major or minor ticks
Here is an example, not recommended for its beauty, which customizes the axes and tick properties
64
Chapter 3. Tutorials
",0.0028469562530517,"Matplotlib, Release 2.0.2
ylabel()) as well as a list of major and minor ticks. The ticks are XTick and YTick instances, which
contain the actual line and text primitives that render the ticks and ticklabels. Because the ticks are dynam-
ically created as needed (e.g., when panning and zooming), you should access the lists of major and minor
ticks through their accessor methods get_major_ticks() and get_minor_ticks(). Although the ticks
contain all the primitives and will be covered below, Axis instances have accessor methods that return the
tick lines, tick labels, tick locations etc.:
In [285]: axis = ax.xaxis
In [286]: axis.get_ticklocs()
Out[286]: array([ 0., 1., 2., 3., 4., 5., 6., 7., 8., 9.])
In [287]: axis.get_ticklabels()
Out[287]: <a list of 10 Text major ticklabel objects>
# note there are twice as many ticklines as labels because by
# default there are tick lines at the top and bottom but only tick
# labels below the xaxis; this can be customized
In [288]: axis.get_ticklines()
Out[288]: <a list of 20 Line2D ticklines objects>
# by default you get the major ticks back
In [291]: axis.get_ticklines()
Out[291]: <a list of 20 Line2D ticklines objects>
# but you can also ask for the minor ticks
In [292]: axis.get_ticklines(minor=True)
Out[292]: <a list of 0 Line2D ticklines objects>
Here is a summary of some of the useful accessor methods of the Axis (these have corresponding setters
where useful, such as set_major_formatter)
Accessor method Description
get_scale The scale of the axis, e.g., ‘log’ or ‘linear’
get_view_interval The interval instance of the axis view limits
get_data_interval The interval instance of the axis data limits
get_gridlines A list of grid lines for the Axis
get_label The axis label - a Text instance
get_ticklabels A list of Text instances - keyword minor=True|False
get_ticklines A list of Line2D instances - keyword minor=True|False
get_ticklocs A list of Tick locations - keyword minor=True|False
get_major_locator The matplotlib.ticker.Locator instance for major ticks
get_major_formatter The matplotlib.ticker.Formatter instance for major ticks
get_minor_locator The matplotlib.ticker.Locator instance for minor ticks
get_minor_formatter The matplotlib.ticker.Formatter instance for minor ticks
get_major_ticks A list of Tick instances for major ticks
get_minor_ticks A list of Tick instances for minor ticks
grid Turn the grid on or oﬀ for the major or minor ticks
Here is an example, not recommended for its beauty, which customizes the axes and tick properties
64 Chapter 3. Tutorials",0.0094802379608154,"3>
ax = plt.subplot(2, 2, 1)
Note that, unlike Matplotlib’s subplot, the index starts from 0 in GridSpec.
To create a subplot that spans multiple cells,
For example, the following commands
creates
Matplotlib, Release 2.0.2
        ax2 = plt.subplot2grid((3, 3), (1, 0), colspan=2)
ax3 = plt.subplot2grid((3, 3), (1, 2), rowspan=2)
     ax1 = plt.subplot2grid((3, 3), (0, 0), colspan=3)
ax2 = plt.subplot2grid((3, 3), (1, 0), colspan=2)
ax3 = plt.subplot2grid((3, 3), (1, 2), rowspan=2)
ax4 = plt.subplot2grid((3, 3), (2, 0))
ax5 = plt.subplot2grid((3, 3), (2, 1))
  subplot2grid
   ax1
   ax2
ax3
  ax4
ax5
GridSpec and SubplotSpec
You can create GridSpec explicitly and use them to create a subplot. For example,
 3.1. Introductory 35
"
32,12.0,matplotlib_61-81_pdf.pdf ~ 12,"Matplotlib, Release 2.0.2
import numpy as np
import matplotlib.pyplot as plt
# plt.figure creates a matplotlib.figure.Figure instance
fig = plt.figure()
rect = fig.patch # a rectangle instance
rect.set_facecolor('lightgoldenrodyellow')
ax1 = fig.add_axes([0.1, 0.3, 0.4, 0.4])
rect = ax1.patch
rect.set_facecolor('lightslategray')
for label in ax1.xaxis.get_ticklabels():
# label is a Text instance
label.set_color('red')
label.set_rotation(45)
label.set_fontsize(16)
for line in ax1.yaxis.get_ticklines():
# line is a Line2D instance
line.set_color('green')
line.set_markersize(25)
line.set_markeredgewidth(3)
plt.show()
3.2. Intermediate 65",0.0049569606781005,"Matplotlib, Release 2.0.2
import numpy as np
import matplotlib.pyplot as plt
# plt.figure creates a matplotlib.figure.Figure instance
fig = plt.figure()
rect = fig.patch # a rectangle instance
rect.set_facecolor('lightgoldenrodyellow')
ax1 = fig.add_axes([0.1, 0.3, 0.4, 0.4])
rect = ax1.patch
rect.set_facecolor('lightslategray')
for label in ax1.xaxis.get_ticklabels():
# label is a Text instance
label.set_color('red')
label.set_rotation(45)
label.set_fontsize(16)
for line in ax1.yaxis.get_ticklines():
# line is a Line2D instance
line.set_color('green')
line.set_markersize(25)
line.set_markeredgewidth(3)
plt.show()
3.2. Intermediate
65
",0.0009710788726806,"Matplotlib, Release 2.0.2
import numpy as np
import matplotlib.pyplot as plt
# plt.figure creates a matplotlib.figure.Figure instance
fig = plt.figure()
rect = fig.patch # a rectangle instance
rect.set_facecolor('lightgoldenrodyellow')
ax1 = fig.add_axes([0.1, 0.3, 0.4, 0.4])
rect = ax1.patch
rect.set_facecolor('lightslategray')
for label in ax1.xaxis.get_ticklabels():
# label is a Text instance
label.set_color('red')
label.set_rotation(45)
label.set_fontsize(16)
for line in ax1.yaxis.get_ticklines():
# line is a Line2D instance
line.set_color('green')
line.set_markersize(25)
line.set_markeredgewidth(3)
plt.show()
3.2. Intermediate 65",0.0041289329528808,"4>
Matplotlib, Release 2.0.2
   ax = plt.subplot2grid((2, 2), (0, 0)) is equal to
A GridSpec instance provides array-like (2d or 1d) indexing that returns the SubplotSpec instance. For a SubplotSpec that spans multiple cells, use slice.
The above example becomes
     import matplotlib.gridspec as gridspec gs = gridspec.GridSpec(2, 2)
ax = plt.subplot(gs[0, 0])
     ax2 = plt.subplot(gs[1, :-1])
ax3 = plt.subplot(gs[1:, -1])
     gs = gridspec.GridSpec(3, 3)
ax1 = plt.subplot(gs[0, :])
ax2 = plt.subplot(gs[1, :-1])
ax3 = plt.subplot(gs[1:, -1])
ax4 = plt.subplot(gs[-1, 0])
ax5 = plt.subplot(gs[-1, -2])
  GridSpec
   ax1
   ax2
ax3
  ax4
ax5
 36 Chapter3. Tutorials

"
33,13.0,matplotlib_61-81_pdf.pdf ~ 13,"Matplotlib, Release 2.0.2
0.0 0.2 0.4 0.6 0.8 1.0
0.0
0.2
0.4
0.6
0.8
1.0
Tick containers
The matplotlib.axis.Tick is the ﬁnal container object in our descent from the Figure to the Axes to
the Axis to the Tick. The Tick contains the tick and grid line instances, as well as the label instances for
the upper and lower ticks. Each of these is accessible directly as an attribute of the Tick. In addition, there
are boolean variables that determine whether the upper labels and ticks are on for the x-axis and whether the
right labels and ticks are on for the y-axis.
Tick attribute Description
tick1line Line2D instance
tick2line Line2D instance
gridline Line2D instance
label1 Text instance
label2 Text instance
gridOn boolean which determines whether to draw the gridline
tick1On boolean which determines whether to draw the 1st tickline
tick2On boolean which determines whether to draw the 2nd tickline
label1On boolean which determines whether to draw the 1st tick label
label2On boolean which determines whether to draw the 2nd tick label
Here is an example which sets the formatter for the right side ticks with dollar signs and colors them green
on the right side of the yaxis
66 Chapter 3. Tutorials",0.0066559314727783,"Matplotlib, Release 2.0.2
0.0
0.2
0.4
0.6
0.8
1.0
0.0
0.2
0.4
0.6
0.8
1.0
Tick containers
The matplotlib.axis.Tick is the ﬁnal container object in our descent from the Figure to the Axes to
the Axis to the Tick. The Tick contains the tick and grid line instances, as well as the label instances for
the upper and lower ticks. Each of these is accessible directly as an attribute of the Tick. In addition, there
are boolean variables that determine whether the upper labels and ticks are on for the x-axis and whether the
right labels and ticks are on for the y-axis.
Tick attribute
Description
tick1line
Line2D instance
tick2line
Line2D instance
gridline
Line2D instance
label1
Text instance
label2
Text instance
gridOn
boolean which determines whether to draw the gridline
tick1On
boolean which determines whether to draw the 1st tickline
tick2On
boolean which determines whether to draw the 2nd tickline
label1On
boolean which determines whether to draw the 1st tick label
label2On
boolean which determines whether to draw the 2nd tick label
Here is an example which sets the formatter for the right side ticks with dollar signs and colors them green
on the right side of the yaxis
66
Chapter 3. Tutorials
",0.0014290809631347,"Matplotlib, Release 2.0.2
0.0 0.2 0.4 0.6 0.8 1.0
0.0
0.2
0.4
0.6
0.8
1.0
Tick containers
The matplotlib.axis.Tick is the ﬁnal container object in our descent from the Figure to the Axes to
the Axis to the Tick. The Tick contains the tick and grid line instances, as well as the label instances for
the upper and lower ticks. Each of these is accessible directly as an attribute of the Tick. In addition, there
are boolean variables that determine whether the upper labels and ticks are on for the x-axis and whether the
right labels and ticks are on for the y-axis.
Tick attribute Description
tick1line Line2D instance
tick2line Line2D instance
gridline Line2D instance
label1 Text instance
label2 Text instance
gridOn boolean which determines whether to draw the gridline
tick1On boolean which determines whether to draw the 1st tickline
tick2On boolean which determines whether to draw the 2nd tickline
label1On boolean which determines whether to draw the 1st tick label
label2On boolean which determines whether to draw the 2nd tick label
Here is an example which sets the formatter for the right side ticks with dollar signs and colors them green
on the right side of the yaxis
66 Chapter 3. Tutorials",0.0073750019073486,"5>
Matplotlib, Release 2.0.2
 Adjust GridSpec layout
When a GridSpec is explicitly used, you can adjust the layout parameters of subplots that are created from the GridSpec.
This is similar to subplots_adjust(), but it only affects the subplots that are created from the given GridSpec.
The code below
    gs1 = gridspec.GridSpec(3, 3)
gs1.update(left=0.05, right=0.48, wspace=0.05)
     gs1 = gridspec.GridSpec(3, 3)
gs1.update(left=0.05, right=0.48, wspace=0.05)
ax1 = plt.subplot(gs1[:-1, :])
ax2 = plt.subplot(gs1[-1, :-1])
ax3 = plt.subplot(gs1[-1, -1])
gs2 = gridspec.GridSpec(3, 3)
gs2.update(left=0.55, right=0.98, hspace=0.05)
ax4 = plt.subplot(gs2[:, :-1])
ax5 = plt.subplot(gs2[:-1, -1])
ax6 = plt.subplot(gs2[-1, -1])
 creates
 GridSpec w/ different subplotpars
   ax1
    ax4
    ax5
  ax6
  ax2
   ax3
 3.1. Introductory 37

"
34,14.0,matplotlib_61-81_pdf.pdf ~ 14,"Matplotlib, Release 2.0.2
import numpy as np
import matplotlib.pyplot as plt
import matplotlib.ticker as ticker
# Fixing random state for reproducibility
np.random.seed(19680801)
fig = plt.figure()
ax = fig.add_subplot(111)
ax.plot(100*np.random.rand(20))
formatter = ticker.FormatStrFormatter('$%1.2f')
ax.yaxis.set_major_formatter(formatter)
for tick in ax.yaxis.get_major_ticks():
tick.label1On = False
tick.label2On = True
tick.label2.set_color('green')
plt.show()
0.0 2.5 5.0 7.5 10.0 12.5 15.0 17.5
$20.00
$40.00
$60.00
$80.00
$100.00
3.2. Intermediate 67",0.005321979522705,"Matplotlib, Release 2.0.2
import numpy as np
import matplotlib.pyplot as plt
import matplotlib.ticker as ticker
# Fixing random state for reproducibility
np.random.seed(19680801)
fig = plt.figure()
ax = fig.add_subplot(111)
ax.plot(100*np.random.rand(20))
formatter = ticker.FormatStrFormatter('$%1.2f')
ax.yaxis.set_major_formatter(formatter)
for tick in ax.yaxis.get_major_ticks():
tick.label1On = False
tick.label2On = True
tick.label2.set_color('green')
plt.show()
0.0
2.5
5.0
7.5
10.0
12.5
15.0
17.5
$20.00
$40.00
$60.00
$80.00
$100.0
3.2. Intermediate
67
",0.0009779930114746,"Matplotlib, Release 2.0.2
import numpy as np
import matplotlib.pyplot as plt
import matplotlib.ticker as ticker
# Fixing random state for reproducibility
np.random.seed(19680801)
fig = plt.figure()
ax = fig.add_subplot(111)
ax.plot(100*np.random.rand(20))
formatter = ticker.FormatStrFormatter('$%1.2f')
ax.yaxis.set_major_formatter(formatter)
for tick in ax.yaxis.get_major_ticks():
tick.label1On = False
tick.label2On = True
tick.label2.set_color('green')
plt.show()
0.0 2.5 5.0 7.5 10.0 12.5 15.0 17.5
$20.00
$40.00
$60.00
$80.00
$100.00
3.2. Intermediate 67",0.0062999725341796,"6>
Matplotlib, Release 2.0.2
 GridSpec using SubplotSpec
You can create GridSpec from the SubplotSpec, in which case its layout parameters are set to that of the location of the given SubplotSpec.
    gs0 = gridspec.GridSpec(1, 2)
gs00 = gridspec.GridSpecFromSubplotSpec(3, 3, subplot_spec=gs0[0])
gs01 = gridspec.GridSpecFromSubplotSpec(3, 3, subplot_spec=gs0[1])
  GirdSpec Inside GridSpec
   ax1
    ax4
  ax5
   ax2
ax3
ax6
A Complex Nested GridSpec using SubplotSpec
Here’s a more sophisticated example of nested GridSpec where we put a box around each cell of the outer 4x4 grid, by hiding appropriate spines in each of the inner 3x3 grids.
 38 Chapter3. Tutorials

"
35,15.0,matplotlib_61-81_pdf.pdf ~ 15,"Matplotlib, Release 2.0.2
3.2.2 Legend guide
This legend guide is an extension of the documentation available at legend() - please ensure you are
familiar with contents of that documentation before proceeding with this guide.
This guide makes use of some common terms, which are documented here for clarity:
legend entry A legend is made up of one or more legend entries. An entry is made up of exactly one key
and one label.
legend key The colored/patterned marker to the left of each legend label.
legend label The text which describes the handle represented by the key.
legend handle The original object which is used to generate an appropriate entry in the legend.
Controlling the legend entries
Calling legend() with no arguments automatically fetches the legend handles and their associated labels.
This functionality is equivalent to:
handles, labels = ax.get_legend_handles_labels()
ax.legend(handles, labels)
The get_legend_handles_labels() function returns a list of handles /artists which exist on the Axes
which can be used to generate entries for the resulting legend - it is worth noting however that not all artists
can be added to a legend, at which point a “proxy” will have to be created (see Creating artists speciﬁcally
for adding to the legend (aka. Proxy artists) for further details).
For full control of what is being added to the legend, it is common to pass the appropriate handles directly
to legend():
line_up, = plt.plot([1,2,3], label='Line 2')
line_down, = plt.plot([3,2,1], label='Line 1')
plt.legend(handles=[line_up, line_down])
In some cases, it is not possible to set the label of the handle, so it is possible to pass through the list of
labels to legend():
line_up, = plt.plot([1,2,3], label='Line 2')
line_down, = plt.plot([3,2,1], label='Line 1')
plt.legend([line_up, line_down], ['Line Up', 'Line Down'])
Creating artists speciﬁcally for adding to the legend (aka. Proxy artists)
Not all handles can be turned into legend entries automatically, so it is often necessary to create an artist
which can. Legend handles don’t have to exists on the Figure or Axes in order to be used.
Suppose we wanted to create a legend which has an entry for some data which is represented by a red color:
68 Chapter 3. Tutorials",0.0089349746704101,"Matplotlib, Release 2.0.2
3.2.2 Legend guide
This legend guide is an extension of the documentation available at legend() - please ensure you are
familiar with contents of that documentation before proceeding with this guide.
This guide makes use of some common terms, which are documented here for clarity:
legend entry
A legend is made up of one or more legend entries. An entry is made up of exactly one key
and one label.
legend key
The colored/patterned marker to the left of each legend label.
legend label
The text which describes the handle represented by the key.
legend handle
The original object which is used to generate an appropriate entry in the legend.
Controlling the legend entries
Calling legend() with no arguments automatically fetches the legend handles and their associated labels.
This functionality is equivalent to:
handles, labels = ax.get_legend_handles_labels()
ax.legend(handles, labels)
The get_legend_handles_labels() function returns a list of handles/artists which exist on the Axes
which can be used to generate entries for the resulting legend - it is worth noting however that not all artists
can be added to a legend, at which point a “proxy” will have to be created (see Creating artists speciﬁcally
for adding to the legend (aka. Proxy artists) for further details).
For full control of what is being added to the legend, it is common to pass the appropriate handles directly
to legend():
line_up, = plt.plot([1,2,3], label='Line 2')
line_down, = plt.plot([3,2,1], label='Line 1')
plt.legend(handles=[line_up, line_down])
In some cases, it is not possible to set the label of the handle, so it is possible to pass through the list of
labels to legend():
line_up, = plt.plot([1,2,3], label='Line 2')
line_down, = plt.plot([3,2,1], label='Line 1')
plt.legend([line_up, line_down], ['Line Up', 'Line Down'])
Creating artists speciﬁcally for adding to the legend (aka. Proxy artists)
Not all handles can be turned into legend entries automatically, so it is often necessary to create an artist
which can. Legend handles don’t have to exists on the Figure or Axes in order to be used.
Suppose we wanted to create a legend which has an entry for some data which is represented by a red color:
68
Chapter 3. Tutorials
",0.0025956630706787,"Matplotlib, Release 2.0.2
3.2.2 Legend guide
This legend guide is an extension of the documentation available at legend() - please ensure you are
familiar with contents of that documentation before proceeding with this guide.
This guide makes use of some common terms, which are documented here for clarity:
legend entry A legend is made up of one or more legend entries. An entry is made up of exactly one key
and one label.
legend key The colored/patterned marker to the left of each legend label.
legend label The text which describes the handle represented by the key.
legend handle The original object which is used to generate an appropriate entry in the legend.
Controlling the legend entries
Calling legend() with no arguments automatically fetches the legend handles and their associated labels.
This functionality is equivalent to:
handles, labels = ax.get_legend_handles_labels()
ax.legend(handles, labels)
The get_legend_handles_labels() function returns a list of handles /artists which exist on the Axes
which can be used to generate entries for the resulting legend - it is worth noting however that not all artists
can be added to a legend, at which point a “proxy” will have to be created (see Creating artists speciﬁcally
for adding to the legend (aka. Proxy artists) for further details).
For full control of what is being added to the legend, it is common to pass the appropriate handles directly
to legend():
line_up, = plt.plot([1,2,3], label='Line 2')
line_down, = plt.plot([3,2,1], label='Line 1')
plt.legend(handles=[line_up, line_down])
In some cases, it is not possible to set the label of the handle, so it is possible to pass through the list of
labels to legend():
line_up, = plt.plot([1,2,3], label='Line 2')
line_down, = plt.plot([3,2,1], label='Line 1')
plt.legend([line_up, line_down], ['Line Up', 'Line Down'])
Creating artists speciﬁcally for adding to the legend (aka. Proxy artists)
Not all handles can be turned into legend entries automatically, so it is often necessary to create an artist
which can. Legend handles don’t have to exists on the Figure or Axes in order to be used.
Suppose we wanted to create a legend which has an entry for some data which is represented by a red color:
68 Chapter 3. Tutorials",0.0086898803710937,"7>
                                                                                       GridSpec with Varying Cell Sizes
By default, GridSpec creates cells of equal sizes. You can adjust relative heights and widths of rows and columns. Note that absolute values are meaningless, only their relative ratios matter.
3.1. Introductory 39
Matplotlib, Release 2.0.2
     gs = gridspec.GridSpec(2, 2,
                       width_ratios=[1, 2],
                       height_ratios=[4, 1]
                       )
ax1 = plt.subplot(gs[0])
ax2 = plt.subplot(gs[1])

"
36,16.0,matplotlib_61-81_pdf.pdf ~ 16,"Matplotlib, Release 2.0.2
import matplotlib.patches as mpatches
import matplotlib.pyplot as plt
red_patch = mpatches.Patch(color='red', label='The red data')
plt.legend(handles=[red_patch])
plt.show()
0.0 0.2 0.4 0.6 0.8 1.0
0.0
0.2
0.4
0.6
0.8
1.0
The red data
There are many supported legend handles, instead of creating a patch of color we could have created a line
with a marker:
import matplotlib.lines as mlines
import matplotlib.pyplot as plt
blue_line = mlines.Line2D([], [], color='blue', marker='*',
markersize=15, label='Blue stars')
plt.legend(handles=[blue_line])
plt.show()
3.2. Intermediate 69",0.0066738128662109,"Matplotlib, Release 2.0.2
import matplotlib.patches as mpatches
import matplotlib.pyplot as plt
red_patch = mpatches.Patch(color='red', label='The red data')
plt.legend(handles=[red_patch])
plt.show()
0.0
0.2
0.4
0.6
0.8
1.0
0.0
0.2
0.4
0.6
0.8
1.0
The red data
There are many supported legend handles, instead of creating a patch of color we could have created a line
with a marker:
import matplotlib.lines as mlines
import matplotlib.pyplot as plt
blue_line = mlines.Line2D([], [], color='blue', marker='*',
markersize=15, label='Blue stars')
plt.legend(handles=[blue_line])
plt.show()
3.2. Intermediate
69
",0.0009939670562744,"Matplotlib, Release 2.0.2
import matplotlib.patches as mpatches
import matplotlib.pyplot as plt
red_patch = mpatches.Patch(color='red', label='The red data')
plt.legend(handles=[red_patch])
plt.show()
0.0 0.2 0.4 0.6 0.8 1.0
0.0
0.2
0.4
0.6
0.8
1.0
The red data
There are many supported legend handles, instead of creating a patch of color we could have created a line
with a marker:
import matplotlib.lines as mlines
import matplotlib.pyplot as plt
blue_line = mlines.Line2D([], [], color='blue', marker='*',
markersize=15, label='Blue stars')
plt.legend(handles=[blue_line])
plt.show()
3.2. Intermediate 69",0.0052690505981445,"8>
Matplotlib, Release 2.0.2
     ax3 = plt.subplot(gs[2])
ax4 = plt.subplot(gs[3])
      ax2
 ax1
  ax3
ax4
3.1.4 Tight Layout guide
tight_layout automatically adjusts subplot params so that the subplot(s) fits in to the figure area. This is an experimental feature and may not work for some cases. It only checks the extents of ticklabels, axis labels, and titles.
Simple Example
In matplotlib, the location of axes (including subplots) are specified in normalized figure coordinates. It can happen that your axis labels or titles (or sometimes even ticklabels) go outside the figure area, and are thus clipped.
    plt.rcParams['savefig.facecolor'] = ""0.8""
def example_plot(ax, fontsize=12): ax.plot([1, 2])
ax.locator_params(nbins=3) ax.set_xlabel('x-label', fontsize=fontsize) ax.set_ylabel('y-label', fontsize=fontsize)
  40 Chapter3. Tutorials

"
37,17.0,matplotlib_61-81_pdf.pdf ~ 17,"Matplotlib, Release 2.0.2
0.0 0.2 0.4 0.6 0.8 1.0
0.0
0.2
0.4
0.6
0.8
1.0
Blue stars
Legend location
The location of the legend can be speciﬁed by the keyword argument loc. Please see the documentation at
legend() for more details.
The bbox_to_anchorkeyword gives a great degree of control for manual legend placement. For example,
if you want your axes legend located at the ﬁgure’s top right-hand corner instead of the axes’ corner, simply
specify the corner’s location, and the coordinate system of that location:
plt.legend(bbox_to_anchor=(1, 1),
bbox_transform=plt.gcf().transFigure)
More examples of custom legend placement:
import matplotlib.pyplot as plt
plt.subplot(211)
plt.plot([1,2,3], label=""test1"")
plt.plot([3,2,1], label=""test2"")
# Place a legend above this subplot, expanding itself to
# fully use the given bounding box.
plt.legend(bbox_to_anchor=(0., 1.02, 1., .102), loc=3,
ncol=2, mode=""expand"", borderaxespad=0.)
70 Chapter 3. Tutorials",0.0068180561065673,"Matplotlib, Release 2.0.2
0.0
0.2
0.4
0.6
0.8
1.0
0.0
0.2
0.4
0.6
0.8
1.0
Blue stars
Legend location
The location of the legend can be speciﬁed by the keyword argument loc. Please see the documentation at
legend() for more details.
The bbox_to_anchor keyword gives a great degree of control for manual legend placement. For example,
if you want your axes legend located at the ﬁgure’s top right-hand corner instead of the axes’ corner, simply
specify the corner’s location, and the coordinate system of that location:
plt.legend(bbox_to_anchor=(1, 1),
bbox_transform=plt.gcf().transFigure)
More examples of custom legend placement:
import matplotlib.pyplot as plt
plt.subplot(211)
plt.plot([1,2,3], label=""test1"")
plt.plot([3,2,1], label=""test2"")
# Place a legend above this subplot, expanding itself to
# fully use the given bounding box.
plt.legend(bbox_to_anchor=(0., 1.02, 1., .102), loc=3,
ncol=2, mode=""expand"", borderaxespad=0.)
70
Chapter 3. Tutorials
",0.0012528896331787,"Matplotlib, Release 2.0.2
0.0 0.2 0.4 0.6 0.8 1.0
0.0
0.2
0.4
0.6
0.8
1.0
Blue stars
Legend location
The location of the legend can be speciﬁed by the keyword argument loc. Please see the documentation at
legend() for more details.
The bbox_to_anchorkeyword gives a great degree of control for manual legend placement. For example,
if you want your axes legend located at the ﬁgure’s top right-hand corner instead of the axes’ corner, simply
specify the corner’s location, and the coordinate system of that location:
plt.legend(bbox_to_anchor=(1, 1),
bbox_transform=plt.gcf().transFigure)
More examples of custom legend placement:
import matplotlib.pyplot as plt
plt.subplot(211)
plt.plot([1,2,3], label=""test1"")
plt.plot([3,2,1], label=""test2"")
# Place a legend above this subplot, expanding itself to
# fully use the given bounding box.
plt.legend(bbox_to_anchor=(0., 1.02, 1., .102), loc=3,
ncol=2, mode=""expand"", borderaxespad=0.)
70 Chapter 3. Tutorials",0.0065667629241943,"9>
To prevent this, the location of axes needs to be adjusted. For subplots, this can be done by adjusting the subplot params (Move the edge of an axes to make room for tick labels). Matplotlib v1.1 introduces a new command tight_layout() that does this automatically for you.
3.1. Introductory 41
Matplotlib, Release 2.0.2
     ax.set_title('Title', fontsize=fontsize)
plt.close('all')
fig, ax = plt.subplots() example_plot(ax, fontsize=24)
  Title
     2.0
1.5
1.0
0.0
0.5 1.0 x-label
y-label
  plt.tight_layout()

"
38,18.0,matplotlib_61-81_pdf.pdf ~ 18,"Matplotlib, Release 2.0.2
plt.subplot(223)
plt.plot([1,2,3], label=""test1"")
plt.plot([3,2,1], label=""test2"")
# Place a legend to the right of this smaller subplot.
plt.legend(bbox_to_anchor=(1.05, 1), loc=2, borderaxespad=0.)
plt.show()
0.00 0.25 0.50 0.75 1.00 1.25 1.50 1.75 2.00
1.0
1.5
2.0
2.5
3.0
test1 test2
0 1 2
1.0
1.5
2.0
2.5
3.0 test1
test2
Multiple legends on the same Axes
Sometimes it is more clear to split legend entries across multiple legends. Whilst the instinctive approach
to doing this might be to call the legend() function multiple times, you will ﬁnd that only one legend ever
exists on the Axes. This has been done so that it is possible to calllegend() repeatedly to update the legend
to the latest handles on the Axes, so to persist old legend instances, we must add them manually to the Axes:
import matplotlib.pyplot as plt
line1, = plt.plot([1,2,3], label=""Line 1"", linestyle='--')
line2, = plt.plot([3,2,1], label=""Line 2"", linewidth=4)
# Create a legend for the first line.
first_legend = plt.legend(handles=[line1], loc=1)
3.2. Intermediate 71",0.0076501369476318,"Matplotlib, Release 2.0.2
plt.subplot(223)
plt.plot([1,2,3], label=""test1"")
plt.plot([3,2,1], label=""test2"")
# Place a legend to the right of this smaller subplot.
plt.legend(bbox_to_anchor=(1.05, 1), loc=2, borderaxespad=0.)
plt.show()
0.00
0.25
0.50
0.75
1.00
1.25
1.50
1.75
2.00
1.0
1.5
2.0
2.5
3.0
test1
test2
0
1
2
1.0
1.5
2.0
2.5
3.0
test1
test2
Multiple legends on the same Axes
Sometimes it is more clear to split legend entries across multiple legends. Whilst the instinctive approach
to doing this might be to call the legend() function multiple times, you will ﬁnd that only one legend ever
exists on the Axes. This has been done so that it is possible to call legend() repeatedly to update the legend
to the latest handles on the Axes, so to persist old legend instances, we must add them manually to the Axes:
import matplotlib.pyplot as plt
line1, = plt.plot([1,2,3], label=""Line 1"", linestyle='--')
line2, = plt.plot([3,2,1], label=""Line 2"", linewidth=4)
# Create a legend for the first line.
first_legend = plt.legend(handles=[line1], loc=1)
3.2. Intermediate
71
",0.0014958381652832,"Matplotlib, Release 2.0.2
plt.subplot(223)
plt.plot([1,2,3], label=""test1"")
plt.plot([3,2,1], label=""test2"")
# Place a legend to the right of this smaller subplot.
plt.legend(bbox_to_anchor=(1.05, 1), loc=2, borderaxespad=0.)
plt.show()
0.00 0.25 0.50 0.75 1.00 1.25 1.50 1.75 2.00
1.0
1.5
2.0
2.5
3.0
test1 test2
0 1 2
1.0
1.5
2.0
2.5
3.0 test1
test2
Multiple legends on the same Axes
Sometimes it is more clear to split legend entries across multiple legends. Whilst the instinctive approach
to doing this might be to call the legend() function multiple times, you will ﬁnd that only one legend ever
exists on the Axes. This has been done so that it is possible to calllegend() repeatedly to update the legend
to the latest handles on the Axes, so to persist old legend instances, we must add them manually to the Axes:
import matplotlib.pyplot as plt
line1, = plt.plot([1,2,3], label=""Line 1"", linestyle='--')
line2, = plt.plot([3,2,1], label=""Line 2"", linewidth=4)
# Create a legend for the first line.
first_legend = plt.legend(handles=[line1], loc=1)
3.2. Intermediate 71",0.0083687305450439,"10>
Matplotlib, Release 2.0.2
When you have multiple subplots, often you see labels of different axes overlapping each other.
42 Chapter3. Tutorials
  Title
     2.0
1.5
1.0
0.0
0.5 1.0 x-label
y-label
    plt.close('all')
fig, ((ax1, ax2), (ax3, ax4)) = plt.subplots(nrows=2, ncols=2) example_plot(ax1)
example_plot(ax2)
example_plot(ax3)
example_plot(ax4)
  
"
39,19.0,matplotlib_61-81_pdf.pdf ~ 19,"Matplotlib, Release 2.0.2
# Add the legend manually to the current Axes.
ax = plt.gca().add_artist(first_legend)
# Create another legend for the second line.
plt.legend(handles=[line2], loc=4)
plt.show()
0.00 0.25 0.50 0.75 1.00 1.25 1.50 1.75 2.00
1.00
1.25
1.50
1.75
2.00
2.25
2.50
2.75
3.00 Line 1
Line 2
Legend Handlers
In order to create legend entries, handles are given as an argument to an appropriateHandlerBase subclass.
The choice of handler subclass is determined by the following rules:
1. Update get_legend_handler_map() with the value in the handler_mapkeyword.
2. Check if the handleis in the newly created handler_map.
3. Check if the type of handleis in the newly created handler_map.
4. Check if any of the types in the handle‘s mro is in the newly createdhandler_map.
For completeness, this logic is mostly implemented in get_legend_handler().
72 Chapter 3. Tutorials",0.005328893661499,"Matplotlib, Release 2.0.2
# Add the legend manually to the current Axes.
ax = plt.gca().add_artist(first_legend)
# Create another legend for the second line.
plt.legend(handles=[line2], loc=4)
plt.show()
0.00
0.25
0.50
0.75
1.00
1.25
1.50
1.75
2.00
1.00
1.25
1.50
1.75
2.00
2.25
2.50
2.75
3.00
Line 1
Line 2
Legend Handlers
In order to create legend entries, handles are given as an argument to an appropriate HandlerBase subclass.
The choice of handler subclass is determined by the following rules:
1. Update get_legend_handler_map() with the value in the handler_map keyword.
2. Check if the handle is in the newly created handler_map.
3. Check if the type of handle is in the newly created handler_map.
4. Check if any of the types in the handle‘s mro is in the newly created handler_map.
For completeness, this logic is mostly implemented in get_legend_handler().
72
Chapter 3. Tutorials
",0.001166820526123,"Matplotlib, Release 2.0.2
# Add the legend manually to the current Axes.
ax = plt.gca().add_artist(first_legend)
# Create another legend for the second line.
plt.legend(handles=[line2], loc=4)
plt.show()
0.00 0.25 0.50 0.75 1.00 1.25 1.50 1.75 2.00
1.00
1.25
1.50
1.75
2.00
2.25
2.50
2.75
3.00 Line 1
Line 2
Legend Handlers
In order to create legend entries, handles are given as an argument to an appropriateHandlerBase subclass.
The choice of handler subclass is determined by the following rules:
1. Update get_legend_handler_map() with the value in the handler_mapkeyword.
2. Check if the handleis in the newly created handler_map.
3. Check if the type of handleis in the newly created handler_map.
4. Check if any of the types in the handle‘s mro is in the newly createdhandler_map.
For completeness, this logic is mostly implemented in get_legend_handler().
72 Chapter 3. Tutorials",0.0056109428405761,"11>  
Matplotlib, Release 2.0.2
  2.0
1.5
1.0
0.0
2.0
1.5
1.0
0.0
0.5 1.0 Title
2.0
1.5
1.0 2.0
1.5
1.0
0.0
0.5 1.0 Title
Title
Title
0.5 1.0 x-label
0.0
0.5 1.0 x-label
 y-label
 x-label
 y-label
x-label
 y-label y-label
tight_layout() will also adjust spacing between subplots to minimize the overlaps. plt.tight_layout()
    3.1. Introductory 43

"
40,0.0,latex_pdf.pdf ~ 0,"Sample PDF Document
Robert Maron
Grzegorz Grudzi´nski
February 20, 1999",0.0007929801940917,"Sample PDF Document
Robert Maron
Grzegorz Grudzi´nski
February 20, 1999
",0.0235309600830078,"Sample PDF Document
Robert Maron
Grzegorz Grudzi´nski
February 20, 1999",0.0007729530334472,"12>
Matplotlib, Release 2.0.2
  2.0
1.5
1.0
0.0
2.0
1.5
1.0
0.0
Title
0.5 1.0 x-label
Title
0.5 1.0 x-label
2.0
1.5
1.0
2.0
1.5
1.0
0.0
Title
0.5 1.0 x-label
Title
0.5 1.0 x-label
0.0
    y-label y-label
y-label y-label
tight_layout() can take keyword arguments of pad, w_pad and h_pad. These control the extra padding around the figure border and between subplots. The pads are specified in fraction of fontsize.
plt.tight_layout(pad=0.4, w_pad=0.5, h_pad=1.0)
    44 Chapter3. Tutorials
"
41,1.0,latex_pdf.pdf ~ 1,2,0.0002338886260986,"2
",0.0005590915679931,2,0.0002171993255615,"13>
tight_layout() will work even if the sizes of subplots are different as far as their grid specification is compatible. In the example below, ax1 and ax2 are subplots of a 2x2 grid, while ax3 is of a 1x2 grid.
3.1. Introductory 45

Matplotlib, Release 2.0.2
 2.0
1.5
1.0
0.0
2.0
1.5
1.0
0.0
0.5 1.0
x-label Title
2.0
1.5
1.0
2.0
1.5
1.0
0.0
0.5 1.0
x-label Title
Title
Title
0.5 1.0 x-label
0.0
0.5 1.0 x-label
     y-label y-label
y-label y-label
    plt.close('all') fig = plt.figure()
ax1 = plt.subplot(221)
ax2 = plt.subplot(223)
ax3 = plt.subplot(122)
example_plot(ax1)
example_plot(ax2)
example_plot(ax3)
plt.tight_layout()
  
"
42,2.0,latex_pdf.pdf ~ 2,"Contents
1 Template 5
1.1 How to compile a.texﬁle to a.pdfﬁle. . . . . . . . . . . . .5
1.1.1 Tools . . . . . . . . . . . . . . . . . . . . . . . . . . . .5
1.1.2 How to use the tools. . . . . . . . . . . . . . . . . . . .5
1.2 How to write a document. . . . . . . . . . . . . . . . . . . . . .6
1.2.1 The main document. . . . . . . . . . . . . . . . . . . . .6
1.2.2 Chapters . . . . . . . . . . . . . . . . . . . . . . . . . .6
1.2.3 Spell-checking. . . . . . . . . . . . . . . . . . . . . . .6
1.3 LATEX and pdfLATEX capabilities. . . . . . . . . . . . . . . . . . .7
1.3.1 Overview . . . . . . . . . . . . . . . . . . . . . . . . . .7
1.3.2 LATEX . . . . . . . . . . . . . . . . . . . . . . . . . . . .7
1.3.3 pdfLATEX . . . . . . . . . . . . . . . . . . . . . . . . . .7
1.3.4 Examples . . . . . . . . . . . . . . . . . . . . . . . . . .7
3",0.0054831504821777,"Contents
1
Template
5
1.1
How to compile a .tex ﬁle to a .pdf ﬁle . . . . . . . . . . . . .
5
1.1.1
Tools
. . . . . . . . . . . . . . . . . . . . . . . . . . . .
5
1.1.2
How to use the tools
. . . . . . . . . . . . . . . . . . . .
5
1.2
How to write a document . . . . . . . . . . . . . . . . . . . . . .
6
1.2.1
The main document . . . . . . . . . . . . . . . . . . . . .
6
1.2.2
Chapters
. . . . . . . . . . . . . . . . . . . . . . . . . .
6
1.2.3
Spell-checking . . . . . . . . . . . . . . . . . . . . . . .
6
1.3
LATEX and pdfLATEX capabilities . . . . . . . . . . . . . . . . . . .
7
1.3.1
Overview . . . . . . . . . . . . . . . . . . . . . . . . . .
7
1.3.2
LATEX . . . . . . . . . . . . . . . . . . . . . . . . . . . .
7
1.3.3
pdfLATEX
. . . . . . . . . . . . . . . . . . . . . . . . . .
7
1.3.4
Examples . . . . . . . . . . . . . . . . . . . . . . . . . .
7
3
",0.0033869743347167,"Contents
1 Template 5
1.1 How to compile a.texﬁle to a.pdfﬁle. . . . . . . . . . . . .5
1.1.1 Tools . . . . . . . . . . . . . . . . . . . . . . . . . . . .5
1.1.2 How to use the tools. . . . . . . . . . . . . . . . . . . .5
1.2 How to write a document. . . . . . . . . . . . . . . . . . . . . .6
1.2.1 The main document. . . . . . . . . . . . . . . . . . . . .6
1.2.2 Chapters . . . . . . . . . . . . . . . . . . . . . . . . . .6
1.2.3 Spell-checking. . . . . . . . . . . . . . . . . . . . . . .6
1.3 LATEX and pdfLATEX capabilities. . . . . . . . . . . . . . . . . . .7
1.3.1 Overview . . . . . . . . . . . . . . . . . . . . . . . . . .7
1.3.2 LATEX . . . . . . . . . . . . . . . . . . . . . . . . . . . .7
1.3.3 pdfLATEX . . . . . . . . . . . . . . . . . . . . . . . . . .7
1.3.4 Examples . . . . . . . . . . . . . . . . . . . . . . . . . .7
3",0.0054230690002441,"14>  
Matplotlib, Release 2.0.2
  2.0 1.5 1.0
2.0 1.5 1.0
0.0 0.5 1.0 x-label
2.0
1.5
1.0
Title
0.0 0.5 x-label
1.0
0.0
0.5 1.0 x-label
Title
Title
       y-label
y-label
y-label
It works with subplots created with subplot2grid(). In general, subplots created from the gridspec (Cus- tomizing Location of Subplot Using GridSpec) will work.
    plt.close('all') fig = plt.figure()
ax1 = plt.subplot2grid((3, 3), (0, 0))
ax2 = plt.subplot2grid((3, 3), (0, 1), colspan=2)
ax3 = plt.subplot2grid((3, 3), (1, 0), colspan=2, rowspan=2)
ax4 = plt.subplot2grid((3, 3), (1, 2), rowspan=2)
example_plot(ax1)
example_plot(ax2)
example_plot(ax3)
example_plot(ax4)
plt.tight_layout()
  46 Chapter3. Tutorials

"
43,3.0,latex_pdf.pdf ~ 3,4 CONTENTS,0.0002980232238769,"4
CONTENTS
",0.0004646778106689,4 CONTENTS,0.0003061294555664,"15>
Although not thoroughly tested, it seems to work for subplots with aspect != “auto” (e.g., axes with images).
Matplotlib, Release 2.0.2
  2.0 1.5 1.0
0.0
2.0
1.5
1.0
Title
0.5 1.0 x-label
2.0 1.5 1.0
Title
0.0
Title
0.5 x-label
2.0
1.5
1.0
1.0
0.0
0.5 x-label
1.0
0.0
0.5 1.0 x-label
Title
        y-label y-label
y-label
y-label
    arr = np.arange(100).reshape((10,10)) plt.close('all')
fig = plt.figure(figsize=(5,4))
ax = plt.subplot(111)
im = ax.imshow(arr, interpolation=""none"")
plt.tight_layout()
  3.1. Introductory 47

"
44,4.0,latex_pdf.pdf ~ 4,"Chapter 1
Template
1.1 How to compile a.texﬁle to a.pdfﬁle
1.1.1 Tools
To process the ﬁles you (may) need:
•pdflatex(for example fromtetexpackage≥0.9-6, which you can
get fromRed Hat 5.2);
•acroread(a PDF viewer, available fromhttp://www.adobe.com/);
•ghostscript≥5.10(for example fromRed Hat Contrib) andghostview
orgv(from RedHat Linux);
•efaxpackage could be useful, if you plan to fax documents.
1.1.2 How to use the tools
Follow these steps:
1. put all source.texﬁles in one directory, then chdir to the directory (or put
some of them in the LATEXsearch path — if you know how to do this);
2. run “pdflatex file.tex” on the main ﬁle of the document three times
(three — to prepare valid table of contents);
3. to see or print the result useacroread(unfortunately some versions of
acroreadmay produce PostScript which is too complex), or
5",0.003709077835083,"Chapter 1
Template
1.1
How to compile a .tex ﬁle to a .pdf ﬁle
1.1.1
Tools
To process the ﬁles you (may) need:
• pdflatex (for example from tetex package ≥0.9-6, which you can
get from Red Hat 5.2);
• acroread (a PDF viewer, available from http://www.adobe.com/);
• ghostscript ≥5.10 (for example from Red Hat Contrib) and ghostview
or gv (from RedHat Linux);
• efax package could be useful, if you plan to fax documents.
1.1.2
How to use the tools
Follow these steps:
1. put all source .tex ﬁles in one directory, then chdir to the directory (or put
some of them in the LATEXsearch path — if you know how to do this);
2. run “pdflatex file.tex” on the main ﬁle of the document three times
(three — to prepare valid table of contents);
3. to see or print the result use acroread (unfortunately some versions of
acroread may produce PostScript which is too complex), or
5
",0.0024483203887939,"Chapter 1
Template
1.1 How to compile a.texﬁle to a.pdfﬁle
1.1.1 Tools
To process the ﬁles you (may) need:
•pdflatex(for example fromtetexpackage≥0.9-6, which you can
get fromRed Hat 5.2);
•acroread(a PDF viewer, available fromhttp://www.adobe.com/);
•ghostscript≥5.10(for example fromRed Hat Contrib) andghostview
orgv(from RedHat Linux);
•efaxpackage could be useful, if you plan to fax documents.
1.1.2 How to use the tools
Follow these steps:
1. put all source.texﬁles in one directory, then chdir to the directory (or put
some of them in the LATEXsearch path — if you know how to do this);
2. run “pdflatex file.tex” on the main ﬁle of the document three times
(three — to prepare valid table of contents);
3. to see or print the result useacroread(unfortunately some versions of
acroreadmay produce PostScript which is too complex), or
5",0.0036702156066894,"16>
Matplotlib, Release 2.0.2
      0
2
4
6
8
 02468
Caveats
• tight_layout() only considers ticklabels, axis labels, and titles. Thus, other artists may be clipped and also may overlap.
• It assumes that the extra space needed for ticklabels, axis labels, and titles is independent of original location of axes. This is often true, but there are rare cases where it is not.
• pad=0 clips some of the texts by a few pixels. This may be a bug or a limitation of the current algorithm and it is not clear why it happens. Meanwhile, use of pad at least larger than 0.3 is recom- mended.
Use with GridSpec
GridSpec has its own tight_layout() method (the pyplot api tight_layout() also works).
    plt.close('all') fig = plt.figure()
import matplotlib.gridspec as gridspec
gs1 = gridspec.GridSpec(2, 1)
ax1 = fig.add_subplot(gs1[0])
ax2 = fig.add_subplot(gs1[1])
  48 Chapter3. Tutorials

"
45,5.0,latex_pdf.pdf ~ 5,"6 CHAPTER 1. TEMPLATE
4. runghostscript: “gv file.pdf” to display or:
“gs -dNOPAUSE -sDEVICE=pswrite -q -dBATCH -sOutputFile=ﬁle.ps ﬁle.pdf”
to produce a PostScript ﬁle;
5. run “fax send phone-number file.ps” as root to send a fax, or — if you
know how to do this — modify thefaxscript to be able to fax.pdfﬁles directly
(you have to insert “|%PDF*” somewhere. . . ).
1.2 How to write a document
1.2.1 The main document
Choose the name of the document, saydocument. Copy template.texto
document.tex, then edit it, change the title, the authors and set proper in-
clude(s) for all the chapters.
1.2.2 Chapters
Each chapter should be included in the main document as a separate ﬁle. You can
choose any name for the ﬁle, but we suggest adding a sufﬁx to the name of the
main ﬁle. For our example we use the ﬁle namedocument_chapter1.tex.
First, copytemplate_chapter.texto document_chapter1.tex
and add the line
\include{document_chapter1}
in thedocument.tex, then editdocument_chapter1.tex, change the
chapter title and edit the body of the chapter appropriately.
1.2.3 Spell-checking
Do use a spell-checker, please!
You may also want to check grammar, style and so on. Actually you should
do it (if you have enough spare time). But youmust check spelling!
You can use theispellpackage for this, from withinemacs, or from the
command line:
ispell -t document_chapter1.tex",0.0038280487060546,"6
CHAPTER 1. TEMPLATE
4. run ghostscript: “gv file.pdf” to display or:
“gs -dNOPAUSE -sDEVICE=pswrite -q -dBATCH -sOutputFile=ﬁle.ps ﬁle.pdf”
to produce a PostScript ﬁle;
5. run “fax send phone-number file.ps” as root to send a fax, or — if you
know how to do this — modify the fax script to be able to fax .pdf ﬁles directly
(you have to insert “|%PDF*” somewhere. . .).
1.2
How to write a document
1.2.1
The main document
Choose the name of the document, say document. Copy template.tex to
document.tex, then edit it, change the title, the authors and set proper in-
clude(s) for all the chapters.
1.2.2
Chapters
Each chapter should be included in the main document as a separate ﬁle. You can
choose any name for the ﬁle, but we suggest adding a sufﬁx to the name of the
main ﬁle. For our example we use the ﬁle name document_chapter1.tex.
First, copy template_chapter.tex to document_chapter1.tex
and add the line
\include{document_chapter1}
in the document.tex, then edit document_chapter1.tex, change the
chapter title and edit the body of the chapter appropriately.
1.2.3
Spell-checking
Do use a spell-checker, please!
You may also want to check grammar, style and so on. Actually you should
do it (if you have enough spare time). But you must check spelling!
You can use the ispell package for this, from within emacs, or from the
command line:
ispell -t document_chapter1.tex
",0.00266695022583,"6 CHAPTER 1. TEMPLATE
4. runghostscript: “gv file.pdf” to display or:
“gs -dNOPAUSE -sDEVICE=pswrite -q -dBATCH -sOutputFile=ﬁle.ps ﬁle.pdf”
to produce a PostScript ﬁle;
5. run “fax send phone-number file.ps” as root to send a fax, or — if you
know how to do this — modify thefaxscript to be able to fax.pdfﬁles directly
(you have to insert “|%PDF*” somewhere. . . ).
1.2 How to write a document
1.2.1 The main document
Choose the name of the document, saydocument. Copy template.texto
document.tex, then edit it, change the title, the authors and set proper in-
clude(s) for all the chapters.
1.2.2 Chapters
Each chapter should be included in the main document as a separate ﬁle. You can
choose any name for the ﬁle, but we suggest adding a sufﬁx to the name of the
main ﬁle. For our example we use the ﬁle namedocument_chapter1.tex.
First, copytemplate_chapter.texto document_chapter1.tex
and add the line
\include{document_chapter1}
in thedocument.tex, then editdocument_chapter1.tex, change the
chapter title and edit the body of the chapter appropriately.
1.2.3 Spell-checking
Do use a spell-checker, please!
You may also want to check grammar, style and so on. Actually you should
do it (if you have enough spare time). But youmust check spelling!
You can use theispellpackage for this, from withinemacs, or from the
command line:
ispell -t document_chapter1.tex",0.0038237571716308,"17>
Matplotlib, Release 2.0.2
     example_plot(ax1)
example_plot(ax2)
gs1.tight_layout(fig)
  2.0 1.5 1.0
2.0 1.5 1.0
0.0
Title
0.5 1.0 x-label
Title
0.5 1.0 x-label
0.0
          y-label y-label
You may provide an optional rect parameter, which specifies the bounding box that the subplots will be fit inside. The coordinates must be in normalized figure coordinates and the default is (0, 0, 1, 1).
gs1.tight_layout(fig, rect=[0, 0, 0.5, 1])
    3.1. Introductory 49

"
46,6.0,latex_pdf.pdf ~ 6,"1.3. LATEX AND PDFL ATEX CAPABILITIES 7
1.3 LATEX and pdfLATEX capabilities
1.3.1 Overview
First you edit your source.texﬁle. In LATEX you compile it using thelatex
command to a.dviﬁle (which stands for device-independent). The.dviﬁle
can be converted to any device-dependent format you like using an appropriate
driver, for exampledvips.
When producing.pdfﬁles you should usepdflatex, which produces di-
rectly.pdfﬁles out of.texsources. Note that in the.texﬁle you may need
to use some PDF speciﬁc packages.
For viewing.texﬁles use your favourite text editor, for viewing.dviﬁles
under X Window System usexdvicommand, .psﬁles can be viewed withgv
(orghostview) and.pdfﬁles withacroread,gvorxpdf.
1.3.2 LATEX
A lot of examples can be found in this document.
You should also print
•doc/latex/general/latex2e.dviand
•doc/latex/general/lshort2e.dvi
from yourtetexdistribution (usually in
•/usr/share/texmfor
•/usr/lib/texmf/texmf).
1.3.3 pdfLATEX
Consultdoc/pdftex/manual.pdffrom yourtetexdistribution for more
details. Very useful informations can be found in thehyperrefand graphics
package manuals:
•doc/latex/hyperref/manual.pdfand
•doc/latex/graphics/grfguide.dvi.
1.3.4 Examples
References
MIMUW",0.0051031112670898,"1.3. LATEX AND PDFLATEX CAPABILITIES
7
1.3
LATEX and pdfLATEX capabilities
1.3.1
Overview
First you edit your source .tex ﬁle. In LATEX you compile it using the latex
command to a .dvi ﬁle (which stands for device-independent). The .dvi ﬁle
can be converted to any device-dependent format you like using an appropriate
driver, for example dvips.
When producing .pdf ﬁles you should use pdflatex, which produces di-
rectly .pdf ﬁles out of .tex sources. Note that in the .tex ﬁle you may need
to use some PDF speciﬁc packages.
For viewing .tex ﬁles use your favourite text editor, for viewing .dvi ﬁles
under X Window System use xdvi command, .ps ﬁles can be viewed with gv
(or ghostview) and .pdf ﬁles with acroread, gv or xpdf.
1.3.2
LATEX
A lot of examples can be found in this document.
You should also print
• doc/latex/general/latex2e.dvi and
• doc/latex/general/lshort2e.dvi
from your tetex distribution (usually in
• /usr/share/texmf or
• /usr/lib/texmf/texmf).
1.3.3
pdfLATEX
Consult doc/pdftex/manual.pdf from your tetex distribution for more
details. Very useful informations can be found in the hyperref and graphics
package manuals:
• doc/latex/hyperref/manual.pdf and
• doc/latex/graphics/grfguide.dvi.
1.3.4
Examples
References
MIMUW
",0.001866340637207,"1.3. LATEX AND PDFL ATEX CAPABILITIES 7
1.3 LATEX and pdfLATEX capabilities
1.3.1 Overview
First you edit your source.texﬁle. In LATEX you compile it using thelatex
command to a.dviﬁle (which stands for device-independent). The.dviﬁle
can be converted to any device-dependent format you like using an appropriate
driver, for exampledvips.
When producing.pdfﬁles you should usepdflatex, which produces di-
rectly.pdfﬁles out of.texsources. Note that in the.texﬁle you may need
to use some PDF speciﬁc packages.
For viewing.texﬁles use your favourite text editor, for viewing.dviﬁles
under X Window System usexdvicommand, .psﬁles can be viewed withgv
(orghostview) and.pdfﬁles withacroread,gvorxpdf.
1.3.2 LATEX
A lot of examples can be found in this document.
You should also print
•doc/latex/general/latex2e.dviand
•doc/latex/general/lshort2e.dvi
from yourtetexdistribution (usually in
•/usr/share/texmfor
•/usr/lib/texmf/texmf).
1.3.3 pdfLATEX
Consultdoc/pdftex/manual.pdffrom yourtetexdistribution for more
details. Very useful informations can be found in thehyperrefand graphics
package manuals:
•doc/latex/hyperref/manual.pdfand
•doc/latex/graphics/grfguide.dvi.
1.3.4 Examples
References
MIMUW",0.004364013671875,"18>
Matplotlib, Release 2.0.2
  2.0
1.5
1.0
2.0
1.5
1.0
0.0
Title
0.5 1.0 x-label
Title
0.5 1.0 x-label
0.0
  y-label y-label
For example, this can be used for a figure with multiple gridspecs.
    gs2 = gridspec.GridSpec(3, 1)
for ss in gs2:
ax = fig.add_subplot(ss) example_plot(ax) ax.set_title("""") ax.set_xlabel("""")
ax.set_xlabel(""x-label"", fontsize=12)
gs2.tight_layout(fig, rect=[0.5, 0, 1, 1], h_pad=0.5)
  50 Chapter3. Tutorials

"
47,7.0,latex_pdf.pdf ~ 7,"8 CHAPTER 1. TEMPLATE
Hyperlinks
This is a target.
And this is a link.
Dashes, etc.
There are three kinds of horizontal dash:
•- (use inside words; for example “home-page”, “X-rated”)
•– (use this one between numbers; for example “pages 2–22”)
•— (use this one as a sentence separator — like here)
National characters
•ó, é, í, . . .
•è, à, ì, . . .
•ô, ê, . . .
•õ, ñ, . . .
•ö, ë, . . .
• ˙ z
• ˛ a, ˛ e
•ł, ø, ß
There are other ways to do this, see the documentation forinputencpack-
age.
Reserved characters
Some characters have some special meaning, thus cannot be entered in the usual
way.
•$ & % # _ { }
•\
•˜ ˆ",0.0031180381774902,"8
CHAPTER 1. TEMPLATE
Hyperlinks
This is a target.
And this is a link.
Dashes, etc.
There are three kinds of horizontal dash:
• - (use inside words; for example “home-page”, “X-rated”)
• – (use this one between numbers; for example “pages 2–22”)
• — (use this one as a sentence separator — like here)
National characters
• ó, é, í, ...
• è, à, ì, .. .
• ô, ê, .. .
• õ, ñ, . ..
• ö, ë, .. .
• ˙z
• ˛a, ˛e
• ł, ø, ß
There are other ways to do this, see the documentation for inputenc pack-
age.
Reserved characters
Some characters have some special meaning, thus cannot be entered in the usual
way.
• $ & % # _ { }
• \
• ˜ ˆ
",0.000640869140625,"8 CHAPTER 1. TEMPLATE
Hyperlinks
This is a target.
And this is a link.
Dashes, etc.
There are three kinds of horizontal dash:
•- (use inside words; for example “home-page”, “X-rated”)
•– (use this one between numbers; for example “pages 2–22”)
•— (use this one as a sentence separator — like here)
National characters
•ó, é, í, . . .
•è, à, ì, . . .
•ô, ê, . . .
•õ, ñ, . . .
•ö, ë, . . .
• ˙ z
• ˛ a, ˛ e
•ł, ø, ß
There are other ways to do this, see the documentation forinputencpack-
age.
Reserved characters
Some characters have some special meaning, thus cannot be entered in the usual
way.
•$ & % # _ { }
•\
•˜ ˆ",0.0034809112548828,"19>
Matplotlib, Release 2.0.2
  2.0
1.5
2.0
1.5
1.0
0.0 0.5 x-label
1.0
Title
2.0 1.5
1.0 2.0
1.5
1.0 2.0
1.5 1.0
1.0
0.0 0.5 1.0
0.0
0.0
0.0
0.5 1.0
0.5 1.0
0.5 1.0 x-label
x-label Title
     y-label y-label
y-label y-label y-label
We may try to match the top and bottom of two grids
While this should be mostly good enough, adjusting top and bottom may require adjustment of hspace also. To update hspace & vspace, we call tight_layout() again with updated rect argument. Note that the rect argument specifies the area including the ticklabels, etc. Thus, we will increase the bottom (which is 0 for the normal case) by the difference between the bottom from above and the bottom of each gridspec. Same thing for the top.
    top = min(gs1.top, gs2.top)
bottom = max(gs1.bottom, gs2.bottom)
gs1.update(top=top, bottom=bottom)
gs2.update(top=top, bottom=bottom)
     top = min(gs1.top, gs2.top)
bottom = max(gs1.bottom, gs2.bottom)
gs1.tight_layout(fig, rect=[None, 0 + (bottom-gs1.bottom),
                            0.5, 1 - (gs1.top-top)])
gs2.tight_layout(fig, rect=[0.5, 0 + (bottom-gs2.bottom),
                            None, 1 - (gs2.top-top)],
h_pad=0.5)
  3.1. Introductory 51

"
48,8.0,latex_pdf.pdf ~ 8,"1.3. LATEX AND PDFL ATEX CAPABILITIES 9
Math
•12,12n, . . .
•i1,i2n, . . .
• 1
2 , 2n
2−3 , . . .
•α,β,γ,Ω, . . .
•→,⇒,≥,̸=,∈,⋆, . . .
•
√
2, . . .
•2 + 2, . . .
For more examples and symbols see chapter 3 oflshort2e.dvi.
Fonts
•Roman
•Emphasis
•Medium weight — the default
•Boldface
•Upright
•Slanted
•Sans serif
• SMALL CAPS
•Typewriter
•and sizes:
– tiny
– scriptsize
– footnotesize
– small
– normalsize",0.0058848857879638,"1.3. LATEX AND PDFLATEX CAPABILITIES
9
Math
• 12, 12n, . ..
• i1, i2n, . ..
•
1
2,
2n
2−3, ...
• α, β, γ, Ω, ...
• →, ⇒, ≥, ̸=, ∈, ⋆, ...
•
√
2, . ..
• 2 + 2, ...
For more examples and symbols see chapter 3 of lshort2e.dvi.
Fonts
• Roman
• Emphasis
• Medium weight — the default
• Boldface
• Upright
• Slanted
• Sans serif
• SMALL CAPS
• Typewriter
• and sizes:
–
tiny
– scriptsize
– footnotesize
– small
– normalsize
",0.0032908916473388,"1.3. LATEX AND PDFL ATEX CAPABILITIES 9
Math
•12,12n, . . .
•i1,i2n, . . .
• 1
2 , 2n
2−3 , . . .
•α,β,γ,Ω, . . .
•→,⇒,≥,̸=,∈,⋆, . . .
•
√
2, . . .
•2 + 2, . . .
For more examples and symbols see chapter 3 oflshort2e.dvi.
Fonts
•Roman
•Emphasis
•Medium weight — the default
•Boldface
•Upright
•Slanted
•Sans serif
• SMALL CAPS
•Typewriter
•and sizes:
– tiny
– scriptsize
– footnotesize
– small
– normalsize",0.006458044052124,"20>
Matplotlib, Release 2.0.2
  2.0
1.5
2.0 1.5
1.0 2.0
1.5
1.0 2.0
1.5 1.0
Title
1.0
0.0 0.5 1.0
0.0
0.0
0.0
0.5 1.0
0.5 1.0
0.5 1.0 x-label
2.0
1.5
1.0
x-label Title
0.0 0.5 x-label
1.0
     y-label y-label
y-label y-label y-label
Use with AxesGrid1
While limited, the axes_grid1 toolkit is also supported.
    plt.close('all') fig = plt.figure()
from mpl_toolkits.axes_grid1 import Grid
grid = Grid(fig, rect=111, nrows_ncols=(2,2),
axes_pad=0.25, label_mode='L', )
for ax in grid: example_plot(ax) ax.title.set_visible(False)
plt.tight_layout()
  52 Chapter3. Tutorials
"
49,9.0,latex_pdf.pdf ~ 9,"10 CHAPTER 1. TEMPLATE
– large
– Large
– LARGE
– huge
– Huge",0.0010700225830078,"10
CHAPTER 1. TEMPLATE
– large
– Large
– LARGE
– huge
– Huge
",0.0012969970703125,"10 CHAPTER 1. TEMPLATE
– large
– Large
– LARGE
– huge
– Huge",0.0011367797851562,
50,0.0,basketball_pdf.pdf ~ 0,"TheGlobal Game: Basketball'sUnifyingPower intheModernEra
FromPeachBasketstoGlobal PhenomenonTheNewFaceof Professional BasketballNumbersThat SpeakVolumesWomenBreakingBarriersTheEconomicSlamDunkTechnology: TheGameChangerYouthDevelopment: PlantingSeedsforTomorrowUrbanRenaissanceThroughBasketballTheFutureGameConclusion: MoreThanJust aGame
1
",0.0066730976104736,"The Global Game: Basketball's Unifying
Power in the Modern Era
From Peach Baskets to Global Phenomenon
The New Face of Professional Basketball
Numbers That Speak Volumes
Women Breaking Barriers
The Economic Slam Dunk
Technology: The Game Changer
Youth Development: Planting Seeds for Tomorrow
Urban Renaissance Through Basketball
The Future Game
Conclusion: More Than Just a Game
1
",0.002295970916748,"TheGlobal Game: Basketball'sUnifyingPower intheModernEra
FromPeachBasketstoGlobal PhenomenonTheNewFaceof Professional BasketballNumbersThat SpeakVolumesWomenBreakingBarriersTheEconomicSlamDunkTechnology: TheGameChangerYouthDevelopment: PlantingSeedsforTomorrowUrbanRenaissanceThroughBasketballTheFutureGameConclusion: MoreThanJust aGame
1
",0.0058920383453369,"1>
All of this flexibility means that we have the necessary hooks to implement custom handlers for our own type of legend key.
The simplest example of using custom handlers is to instantiate one of the existing HandlerBase subclasses. For the sake of simplicity, let’s choose matplotlib.legend_handler.HandlerLine2D which accepts a numpoints argument (note numpoints is a keyword on the legend() function for convenience). We can then pass the mapping of instance to Handler as a keyword to legend.
Matplotlib, Release 2.0.2
     import matplotlib.pyplot as plt
from matplotlib.legend_handler import HandlerLine2D
line1, = plt.plot([3,2,1], marker='o', label='Line 1') line2, = plt.plot([1,2,3], marker='o', label='Line 2')
plt.legend(handler_map={line1: HandlerLine2D(numpoints=4)})
       Line 1 Line 2
  3.00 2.75 2.50 2.25 2.00 1.75 1.50 1.25 1.00
0.00 0.25 0.50 0.75 1.00 1.25 1.50 1.75 2.00
As you can see, “Line 1” now has 4 marker points, where “Line 2” has 2 (the default). Try the above code, only change the map’s key from line1 to type(line1). Notice how now both Line2D instances get 4 markers.
Along with handlers for complex plot types such as errorbars, stem plots and histograms, the default handler_map has a special tuple handler (HandlerTuple) which simply plots the handles on top of one another for each item in the given tuple. The following example demonstrates combining two legend keys on top of one another:
 3.2. Intermediate 73

"
51,1.0,basketball_pdf.pdf ~ 1,"FromPeachBasketstoGlobalPhenomenon
ThestorybeginsinSpringfield, Massachusetts, 1891. Dr. JamesNaismith'ssimpleinventionof nailingpeachbasketstoagymnasiumwall hasevolvedintosomethingextraordinary.Today'sbasketball landscapeshowcasesasport that hasbrokenfreefromitsAmericanroots, becomingacultural forcethat bridgescontinentsandcultures. Thistransformationreflectsnot just athleticevolution, but abroaderstoryof global connectivityandsharedpassion.
TheNewFaceofProfessionalBasketball
TheNBA'stransformationtellsacompellingstoryof basketball'sglobalization. GonearethedayswhentheleaguewaspredominantlyAmerican. Today'sNBAfeaturestranscendentinternational talentslikeNikolaJokić, Joel Embiid, andGiannisAntetokounmpo–playerswhohaveredefinedexcellenceinthesport. Theirsuccessrepresentsmorethanindividualachievement; it symbolizesbasketball'spowertodiscoverandnurturetalent regardlessoforigin.
NumbersThatSpeakVolumes
Thestatisticspaint avividpictureof basketball'sglobal reach. FIBA'slatest reportsindicatethat over450millionpeopleactivelyplaybasketball worldwide. TheNBA'sglobal broadcastreaches215countriesandterritoriesin47languages. Inthe2023-24season, 125international playersfrom40countriesgracedNBArostersonopeningnight. Perhapsmoststrikingly, Chinaaloneboasts300millionbasketball players–anumberthat exceedstheentireU.S. population.
WomenBreakingBarriers
Thewomen'sgamehaswrittenitsownremarkablechapterinbasketball'sglobal story. TheWNBAcontinuestoexpanditsinternational influence, withstarslikeJonquel JonesandEziMagbegorleadingthecharge. AsWNBACommissionerCathyEngelbert notes, ""Women'sbasketball isexperiencingunprecedentedgrowth.""Thisgrowthmanifestsinincreasedviewership, engagement, andparticipationacrossdemographics, creatingnewrolemodelsforaspiringfemaleathletesworldwide.
2
",0.0258917808532714,"From Peach Baskets to Global Phenomenon
The story begins in Springfield, Massachusetts, 1891. Dr. James Naismith's simple invention
of nailing peach baskets to a gymnasium wall has evolved into something extraordinary.
Today's basketball landscape showcases a sport that has broken free from its American
roots, becoming a cultural force that bridges continents and cultures. This transformation
reflects not just athletic evolution, but a broader story of global connectivity and shared
passion.
The New Face of Professional Basketball
The NBA's transformation tells a compelling story of basketball's globalization. Gone are the
days when the league was predominantly American. Today's NBA features transcendent
international talents like Nikola Jokić, Joel Embiid, and Giannis Antetokounmpo – players
who have redefined excellence in the sport. Their success represents more than individual
achievement; it symbolizes basketball's power to discover and nurture talent regardless of
origin.
Numbers That Speak Volumes
The statistics paint a vivid picture of basketball's global reach. FIBA's latest reports indicate
that over 450 million people actively play basketball worldwide. The NBA's global broadcast
reaches 215 countries and territories in 47 languages. In the 2023-24 season, 125
international players from 40 countries graced NBA rosters on opening night. Perhaps most
strikingly, China alone boasts 300 million basketball players – a number that exceeds the
entire U.S. population.
Women Breaking Barriers
The women's game has written its own remarkable chapter in basketball's global story. The
WNBA continues to expand its international influence, with stars like Jonquel Jones and Ezi
Magbegor leading the charge. As WNBA Commissioner Cathy Engelbert notes, ""Women's
basketball is experiencing unprecedented growth."" This growth manifests in increased
viewership, engagement, and participation across demographics, creating new role models
for aspiring female athletes worldwide.
2
",0.0026991367340087,"FromPeachBasketstoGlobalPhenomenon
ThestorybeginsinSpringfield, Massachusetts, 1891. Dr. JamesNaismith'ssimpleinventionof nailingpeachbasketstoagymnasiumwall hasevolvedintosomethingextraordinary.Today'sbasketball landscapeshowcasesasport that hasbrokenfreefromitsAmericanroots, becomingacultural forcethat bridgescontinentsandcultures. Thistransformationreflectsnot just athleticevolution, but abroaderstoryof global connectivityandsharedpassion.
TheNewFaceofProfessionalBasketball
TheNBA'stransformationtellsacompellingstoryof basketball'sglobalization. GonearethedayswhentheleaguewaspredominantlyAmerican. Today'sNBAfeaturestranscendentinternational talentslikeNikolaJokić, Joel Embiid, andGiannisAntetokounmpo–playerswhohaveredefinedexcellenceinthesport. Theirsuccessrepresentsmorethanindividualachievement; it symbolizesbasketball'spowertodiscoverandnurturetalent regardlessoforigin.
NumbersThatSpeakVolumes
Thestatisticspaint avividpictureof basketball'sglobal reach. FIBA'slatest reportsindicatethat over450millionpeopleactivelyplaybasketball worldwide. TheNBA'sglobal broadcastreaches215countriesandterritoriesin47languages. Inthe2023-24season, 125international playersfrom40countriesgracedNBArostersonopeningnight. Perhapsmoststrikingly, Chinaaloneboasts300millionbasketball players–anumberthat exceedstheentireU.S. population.
WomenBreakingBarriers
Thewomen'sgamehaswrittenitsownremarkablechapterinbasketball'sglobal story. TheWNBAcontinuestoexpanditsinternational influence, withstarslikeJonquel JonesandEziMagbegorleadingthecharge. AsWNBACommissionerCathyEngelbert notes, ""Women'sbasketball isexperiencingunprecedentedgrowth.""Thisgrowthmanifestsinincreasedviewership, engagement, andparticipationacrossdemographics, creatingnewrolemodelsforaspiringfemaleathletesworldwide.
2
",0.0268669128417968,"2>
Matplotlib, Release 2.0.2
     import matplotlib.pyplot as plt from numpy.random import randn
z = randn(10)
red_dot, = plt.plot(z, ""ro"", markersize=15)
# Put a white cross over some of the data.
white_cross, = plt.plot(z[:5], ""w+"", markeredgewidth=3, markersize=15)
plt.legend([red_dot, (red_dot, white_cross)], [""Attr A"", ""Attr A+B""])
  2.0 1.5 1.0 0.5 0.0 0.5 1.0 1.5
    Attr A Attr A+B
 02468
Implementing a custom legend handler
A custom handler can be implemented to turn any handle into a legend key (handles don’t necessarily need to be matplotlib artists). The handler must implement a “legend_artist” method which returns a single artist for the legend to use. Signature details about the “legend_artist” are documented at legend_artist().
    import matplotlib.pyplot as plt
import matplotlib.patches as mpatches
"
52,2.0,basketball_pdf.pdf ~ 2,"TheEconomicSlamDunk
Basketball'seconomicimpact extendsfarbeyondticket salesandbroadcastingrights. TheNBA'srevenuereached$10billioninthe2022-24season, withinternational marketsplayinganincreasinglyvital role. Thesport hascreatedeconomicecosystemsindevelopingnationsthroughtourism, youthprograms, andmerchandisesales. Investment inbasketballinfrastructureworldwidehasledtotheemergenceof prestigiouscompetitionslikeEurope'sEuroLeagueandtheAfricanBasketball League.
Technology:TheGameChanger
Moderntechnologyhasrevolutionizedhowbasketball isplayed, watched, andanalyzed.Advancedanalyticshavebecomedemocratized, allowingteamsworldwidetoaccesssophisticatedperformancemetrics. Social mediahastransformedplayerdiscovery, enablingtalentsfromremoteregionstogainglobal visibility. Virtual realityexperiencesanddigitalstreaminghavebrought fansclosertothegamethaneverbefore, creatingnewwaystoexperienceandappreciatebasketball.
YouthDevelopment:PlantingSeedsforTomorrow
Basketball'sroleinyouthdevelopment extendsbeyondthecourt. ProgramslikeBasketballWithout BordersandJr. NBAreachmillionsof youngpeopleannually, focusingnot just onathleticskillsbut onbuildingcharacter, leadership, andglobal understanding. AsCraigBrown, directorof international youthprograms, explains, ""We'rebuildingconfidence,leadershipskills, andglobal understandingthroughsport.""
3
",0.0188419818878173,"The Economic Slam Dunk
Basketball's economic impact extends far beyond ticket sales and broadcasting rights. The
NBA's revenue reached $10 billion in the 2022-24 season, with international markets playing
an increasingly vital role. The sport has created economic ecosystems in developing nations
through tourism, youth programs, and merchandise sales. Investment in basketball
infrastructure worldwide has led to the emergence of prestigious competitions like Europe's
EuroLeague and the African Basketball League.
Technology: The Game Changer
Modern technology has revolutionized how basketball is played, watched, and analyzed.
Advanced analytics have become democratized, allowing teams worldwide to access
sophisticated performance metrics. Social media has transformed player discovery, enabling
talents from remote regions to gain global visibility. Virtual reality experiences and digital
streaming have brought fans closer to the game than ever before, creating new ways to
experience and appreciate basketball.
Youth Development: Planting Seeds for Tomorrow
Basketball's role in youth development extends beyond the court. Programs like Basketball
Without Borders and Jr. NBA reach millions of young people annually, focusing not just on
athletic skills but on building character, leadership, and global understanding. As Craig
Brown, director of international youth programs, explains, ""We're building confidence,
leadership skills, and global understanding through sport.""
3
",0.0014789104461669,"TheEconomicSlamDunk
Basketball'seconomicimpact extendsfarbeyondticket salesandbroadcastingrights. TheNBA'srevenuereached$10billioninthe2022-24season, withinternational marketsplayinganincreasinglyvital role. Thesport hascreatedeconomicecosystemsindevelopingnationsthroughtourism, youthprograms, andmerchandisesales. Investment inbasketballinfrastructureworldwidehasledtotheemergenceof prestigiouscompetitionslikeEurope'sEuroLeagueandtheAfricanBasketball League.
Technology:TheGameChanger
Moderntechnologyhasrevolutionizedhowbasketball isplayed, watched, andanalyzed.Advancedanalyticshavebecomedemocratized, allowingteamsworldwidetoaccesssophisticatedperformancemetrics. Social mediahastransformedplayerdiscovery, enablingtalentsfromremoteregionstogainglobal visibility. Virtual realityexperiencesanddigitalstreaminghavebrought fansclosertothegamethaneverbefore, creatingnewwaystoexperienceandappreciatebasketball.
YouthDevelopment:PlantingSeedsforTomorrow
Basketball'sroleinyouthdevelopment extendsbeyondthecourt. ProgramslikeBasketballWithout BordersandJr. NBAreachmillionsof youngpeopleannually, focusingnot just onathleticskillsbut onbuildingcharacter, leadership, andglobal understanding. AsCraigBrown, directorof international youthprograms, explains, ""We'rebuildingconfidence,leadershipskills, andglobal understandingthroughsport.""
3
",0.018395185470581,"3>
class AnyObject(object): pass
  74 Chapter3. Tutorials

Alternatively, had we wanted to globally accept AnyObject instances without needing to manually set the handler_map keyword all the time, we could have registered the new handler with:
Whilst the power here is clear, remember that there are already many handlers implemented and what you want to achieve may already be easily possible with existing classes. For example, to produce elliptical legend keys, rather than rectangular ones:
Matplotlib, Release 2.0.2
     class AnyObjectHandler(object):
def legend_artist(self, legend, orig_handle, fontsize, handlebox):
x0, y0 = handlebox.xdescent, handlebox.ydescent
width, height = handlebox.width, handlebox.height
patch = mpatches.Rectangle([x0, y0], width, height, facecolor='red',
edgecolor='black', hatch='xx', lw=3, transform=handlebox.get_transform())
handlebox.add_artist(patch) return patch
plt.legend([AnyObject()], ['My first handler'], handler_map={AnyObject: AnyObjectHandler()})
  1.0
0.8
0.6
0.4
0.2
0.0
0.0 0.2
0.4 0.6
0.8 1.0
    My first handler
     from matplotlib.legend import Legend Legend.update_default_handler_map({AnyObject: AnyObjectHandler()})
     from matplotlib.legend_handler import HandlerPatch import matplotlib.pyplot as plt
  3.2. Intermediate 75

"
53,3.0,basketball_pdf.pdf ~ 3,"UrbanRenaissanceThroughBasketball
Thesport'simpact onurbandevelopment deservesspecial attention. Basketball courtshavebecomeessential componentsof urbanplanningworldwide, servingascommunityhubsthatpromotesocial interactionandyouthengagement. FromHarlem'sRuckerParktoManila'sTondodistrict, thesespacestranscendtheirathleticpurposetobecomecentersofcommunitylifeandcultural exchange.
TheFutureGame
Lookingahead, basketball'strajectorysuggestscontinuedgrowthandevolution. Thesport'saccessibility, adaptabilitytolocal cultures, andabilitytounitepeopleacrossbackgroundspositionit uniquelyforfutureexpansion. Theriseof 3x3basketball asanOlympicsportopensnewcompetitiveavenuesfornationswithlimitedresources, whiletechnologicalinnovationspromisetomakethegameevenmoreengagingandaccessible.
Conclusion:MoreThanJustaGame
Basketball'sglobal journeyfromhumblebeginningstoworldwidephenomenondemonstratesthesport'suniqueabilitytotranscendcultural boundaries. Asthegamecontinuestoevolve,itspowertoinspire, unite, andtransformlivesremainsconstant. Ingymnasiums,playgrounds, andarenasacrosstheworld, basketball continuestowritenewchaptersinitsremarkablestoryof global impact andcultural unity
4
",0.0167648792266845,"Urban Renaissance Through Basketball
The sport's impact on urban development deserves special attention. Basketball courts have
become essential components of urban planning worldwide, serving as community hubs that
promote social interaction and youth engagement. From Harlem's Rucker Park to Manila's
Tondo district, these spaces transcend their athletic purpose to become centers of
community life and cultural exchange.
The Future Game
Looking ahead, basketball's trajectory suggests continued growth and evolution. The sport's
accessibility, adaptability to local cultures, and ability to unite people across backgrounds
position it uniquely for future expansion. The rise of 3x3 basketball as an Olympic sport
opens new competitive avenues for nations with limited resources, while technological
innovations promise to make the game even more engaging and accessible.
Conclusion: More Than Just a Game
Basketball's global journey from humble beginnings to worldwide phenomenon demonstrates
the sport's unique ability to transcend cultural boundaries. As the game continues to evolve,
its power to inspire, unite, and transform lives remains constant. In gymnasiums,
playgrounds, and arenas across the world, basketball continues to write new chapters in its
remarkable story of global impact and cultural unity
4
",0.0012717247009277,"UrbanRenaissanceThroughBasketball
Thesport'simpact onurbandevelopment deservesspecial attention. Basketball courtshavebecomeessential componentsof urbanplanningworldwide, servingascommunityhubsthatpromotesocial interactionandyouthengagement. FromHarlem'sRuckerParktoManila'sTondodistrict, thesespacestranscendtheirathleticpurposetobecomecentersofcommunitylifeandcultural exchange.
TheFutureGame
Lookingahead, basketball'strajectorysuggestscontinuedgrowthandevolution. Thesport'saccessibility, adaptabilitytolocal cultures, andabilitytounitepeopleacrossbackgroundspositionit uniquelyforfutureexpansion. Theriseof 3x3basketball asanOlympicsportopensnewcompetitiveavenuesfornationswithlimitedresources, whiletechnologicalinnovationspromisetomakethegameevenmoreengagingandaccessible.
Conclusion:MoreThanJustaGame
Basketball'sglobal journeyfromhumblebeginningstoworldwidephenomenondemonstratesthesport'suniqueabilitytotranscendcultural boundaries. Asthegamecontinuestoevolve,itspowertoinspire, unite, andtransformlivesremainsconstant. Ingymnasiums,playgrounds, andarenasacrosstheworld, basketball continuestowritenewchaptersinitsremarkablestoryof global impact andcultural unity
4
",0.0177280902862548,"4>
Matplotlib, Release 2.0.2
     import matplotlib.patches as mpatches
class HandlerEllipse(HandlerPatch):
def create_artists(self, legend, orig_handle,
                       xdescent, ydescent, width, height, fontsize, trans):
        center = 0.5 * width - 0.5 * xdescent, 0.5 * height - 0.5 * ydescent
        p = mpatches.Ellipse(xy=center, width=width + xdescent,
                             height=height + ydescent)
        self.update_prop(p, orig_handle, legend)
p.set_transform(trans) return [p]
c = mpatches.Circle((0.5, 0.5), 0.25, facecolor=""green"",
                    edgecolor=""red"", linewidth=3)
plt.gca().add_patch(c)
plt.legend([c], [""An ellipse, not a rectangle""],
           handler_map={mpatches.Circle: HandlerEllipse()})
  1.0
0.8
0.6
0.4
0.2
0.0
0.0 0.2
0.4 0.6
0.8 1.0
    An ellipse, not a rectangle
  Known examples of using legend
Here is a non-exhaustive list of the examples available involving legend being used in various ways:
 76 Chapter3. Tutorials

Matplotlib, Release 2.0.2
 • lines_bars_and_markers example code: scatter_with_legend.py • api example code: legend_demo.py
• pylab_examples example code: contourf_hatching.py
• pylab_examples example code: figlegend_demo.py
• pylab_examples example code: scatter_symbol.py 
"
54,0.0,notion_pdf.pdf ~ 0,"Gen AI Intr oduction  Not es
1
Gen AI Introduction - Notes
What is GenAI?
What is CHATGPT?
What are the differences between 
ChapGPT, GPTs, and LLMS?
What is Natural Language 
Processing?
What is next word prediction?
What is NGram language?
You give the AI some data, and using 
that data, that AI gives you whatever 
you ask it for. Main thing to know is 
that itʼs a field. 
A revolution that almost transformed 
the way we interact with computers.
What are some of it's capabilities?
Web browsing
 Advanced data analysis
 Image processing
 Voice interaction
 Large language models that 
basically understand and generate 
natural language.
 GPT's are a type of LLM.
 ChatGPT is the application built on 
GPT's
It's a field of the idea of computers 
being able to understand language. 
Divided into 3 main categories: 
",0.005929946899414,"Gen AI Introduction - Notes
1
Gen AI Introduction - Notes
What is GenAI?
What is CHATGPT?
What are the differences between 
ChapGPT, GPTs, and LLMS?
What is Natural Language 
Processing?
What is next word prediction?
What is N-Gram language?
You give the AI some data, and using 
that data, that AI gives you whatever 
you ask it for. Main thing to know is 
that it’s a field. 
A revolution that almost transformed 
the way we interact with computers.
What are some of it's capabilities?
-Web browsing
- Advanced data analysis
- Image processing
- Voice interaction
- Large language models that 
basically understand and generate 
natural language.
- GPT's are a type of LLM.
- ChatGPT is the application built on 
GPT's
It's a field of the idea of computers 
being able to understand language. 
Divided into 3 main categories: 
1. Things like machine translation
2. Things like human senses
3. Things like text-to-speech and 
automatic speech recognition
Given a sequence of words, find the 
next words. Essentially chooses the 
next word in a sentence just by 
filtering words with the highest 
probability of occurring, and 
choosing the top result.
",0.002695083618164,"Gen AI Intr oduction  Not es
1
Gen AI Introduction - Notes
What is GenAI?
What is CHATGPT?
What are the differences between 
ChapGPT, GPTs, and LLMS?
What is Natural Language 
Processing?
What is next word prediction?
What is NGram language?
You give the AI some data, and using 
that data, that AI gives you whatever 
you ask it for. Main thing to know is 
that itʼs a field. 
A revolution that almost transformed 
the way we interact with computers.
What are some of it's capabilities?
Web browsing
 Advanced data analysis
 Image processing
 Voice interaction
 Large language models that 
basically understand and generate 
natural language.
 GPT's are a type of LLM.
 ChatGPT is the application built on 
GPT's
It's a field of the idea of computers 
being able to understand language. 
Divided into 3 main categories: 
",0.005944013595581,"5>
3.3 Advanced
3.3.1 Transformations Tutorial
Like any graphics packages, matplotlib is built on top of a transformation framework to easily move be- tween coordinate systems, the userland data coordinate system, the axes coordinate system, the figure coordinate system, and the display coordinate system. In 95% of your plotting, you won’t need to think about this, as it happens under the hood, but as you push the limits of custom figure generation, it helps to have an understanding of these objects so you can reuse the existing transformations matplotlib makes available to you, or create your own (see matplotlib.transforms). The table below summarizes the ex- isting coordinate systems, the transformation object you should use to work in that coordinate system, and the description of that system. In the Transformation Object column, ax is a Axes instance, and fig is a Figure instance.
   Co- ordi- nate
 Transfor- mation Object
 Description
  data
 ax.
transData
The userland data coordinate system, controlled by the xlim and ylim
   axes
 ax.
transAxes
The coordinate system of the Axes; (0,0) is bottom left of the axes, and (1,1) is top right of the axes.
    figure fig. transFigur
The coordinate system of the Figure; (0,0) is bottom left of the figure, and (1,1) eis top right of the figure.
    displayNone
This is the pixel coordinate system of the display; (0,0) is the bottom left of the display, and (width, height) is the top right of the display in pixels. Alternatively, the identity transform (matplotlib.transforms.IdentityTransform()) may be used instead of None.
      All of the transformation objects in the table above take inputs in their coordinate system, and transform the input to the display coordinate system. That is why the display coordinate system has None for the Transformation Object column – it already is in display coordinates. The transformations also know how to invert themselves, to go from display back to the native coordinate system. This is particularly useful when processing events from the user interface, which typically occur in display space, and you want to know where the mouse click or key-press occurred in your data coordinate system.
 3.3. Advanced 77

"
55,1.0,notion_pdf.pdf ~ 1,"Gen AI Intr oduction  Not es
2
First early rendition of language 
models in the pre-deep learning era
Problems?
1. Seed text might not exist in the 
training data
2. Exact phrasing might not exist.
Talked about Neural networks..(don't 
need to know for class)",0.001788854598999,"Gen AI Introduction - Notes
2
First early rendition of language 
models in the pre-deep learning era
Problems?
1. Seed text might not exist in the 
training data
2. Exact phrasing might not exist.
Talked about Neural networks..(don't 
need to know for class)
",0.0003418922424316,"Gen AI Intr oduction  Not es
2
First early rendition of language 
models in the pre-deep learning era
Problems?
1. Seed text might not exist in the 
training data
2. Exact phrasing might not exist.
Talked about Neural networks..(don't 
need to know for class)",0.0018157958984375,"6>
Matplotlib, Release 2.0.2
 Data coordinates
Let’s start with the most commonly used coordinate, the data coordinate system. Whenever you add data to the axes, matplotlib updates the datalimits, most commonly updated with the set_xlim() and set_ylim() methods. For example, in the figure below, the data limits stretch from 0 to 10 on the x-axis, and -1 to 1 on the y-axis.
    import numpy as np
import matplotlib.pyplot as plt
x = np.arange(0, 10, 0.005)
y = np.exp(-x/2.) * np.sin(2*np.pi*x)
fig = plt.figure()
ax = fig.add_subplot(111)
ax.plot(x, y)
ax.set_xlim(0, 10)
ax.set_ylim(-1, 1)
plt.show()
  1.00 0.75 0.50 0.25 0.00 0.25 0.50 0.75 1.00
0 2 4 6 8 10
     You can use the ax.transData instance to transform from your data to your display coordinate system, either a single point or a sequence of points as shown below:
 78 Chapter3. Tutorials

"
56,0.0,matplotlib_1-21_pdf.pdf ~ 0,"Matplotlib
Release 2.0.2
John Hunter, Darren Dale, Eric Firing, Michael Droettboom and the matplotlib development team
May 10, 2017",0.00154709815979,"Matplotlib
Release 2.0.2
John Hunter, Darren Dale, Eric Firing, Michael Droettboom and the m
May 10, 2017
",0.0007758140563964,"Matplotlib
Release 2.0.2
John Hunter, Darren Dale, Eric Firing, Michael Droettboom and the matplotlib development team
May 10, 2017",0.0015590190887451,"7>
Matplotlib, Release 2.0.2
     In [14]: type(ax.transData)
Out[14]: <class 'matplotlib.transforms.CompositeGenericTransform'>
In [15]: ax.transData.transform((5, 0)) Out[15]: array([ 335.175, 247. ])
In [16]: ax.transData.transform([(5, 0), (1,2)]) Out[16]:
array([[ 335.175, 247. ],
       [ 132.435,  642.2  ]])
 You can use the inverted() method to create a transform which will take you from display to data coordi- nates:
If your are typing along with this tutorial, the exact values of the display coordinates may differ if you have a different window size or dpi setting. Likewise, in the figure below, the display labeled points are probably not the same as in the ipython session because the documentation figure size defaults are different.
    In [41]: inv = ax.transData.inverted() In [42]: type(inv)
Out[42]: <class 'matplotlib.transforms.CompositeGenericTransform'>
In [43]: inv.transform((335.175, 247.)) Out[43]: array([ 5., 0.])
  1.00 0.75 0.50 0.25 0.00 0.25 0.50 0.75 1.00
= (281.
 data = (5.0, 0.0)
display
 0 2 4 6 8 10
9, 222.8)
 3.3. Advanced
79

"
57,1.0,matplotlib_1-21_pdf.pdf ~ 1,,5.1975250244140625e-05,,4.6253204345703125e-05,,5.125999450683594e-05,"8>
Matplotlib, Release 2.0.2
  Note: If you run the source code in the example above in a GUI backend, you may also find that the two arrows for the data and display annotations do not point to exactly the same point. This is because the display point was computed before the figure was displayed, and the GUI backend may slightly resize the figure when it is created. The effect is more pronounced if you resize the figure yourself. This is one good reason why you rarely want to work in display space, but you can connect to the 'on_draw' Event to update figure coordinates on figure draws; see Event handling and picking.
When you change the x or y limits of your axes, the data limits are updated so the transformation yields a new display point. Note that when we just change the ylim, only the y-display coordinate is altered, and when we change the xlim too, both are altered. More on this later when we talk about the Bbox.
     In [54]: ax.transData.transform((5, 0)) Out[54]: array([ 335.175, 247. ])
In [55]: ax.set_ylim(-1,2) Out[55]: (-1, 2)
In [56]: ax.transData.transform((5, 0)) Out[56]: array([ 335.175 , 181.13333333])
In [57]: ax.set_xlim(10,20) Out[57]: (10, 20)
In [58]: ax.transData.transform((5, 0)) Out[58]: array([-171.675 , 181.13333333])
 Axes coordinates
After the data coordinate system, axes is probably the second most useful coordinate system. Here the point (0,0) is the bottom left of your axes or subplot, (0.5, 0.5) is the center, and (1.0, 1.0) is the top right. You can also refer to points outside the range, so (-0.1, 1.1) is to the left and above your axes. This coordinate system is extremely useful when placing text in your axes, because you often want a text bubble in a fixed, location, e.g., the upper left of the axes pane, and have that location remain fixed when you pan or zoom. Here is a simple example that creates four panels and labels them ‘A’, ‘B’, ‘C’, ‘D’ as you often see in journals.
    import numpy as np
import matplotlib.pyplot as plt
fig = plt.figure()
for i, label in enumerate(('A', 'B', 'C', 'D')):
    ax = fig.add_subplot(2,2,i+1)
    ax.text(0.05, 0.95, label, transform=ax.transAxes,
fontsize=16, fontweight='bold', va='top') plt.show()
  80 Chapter3. Tutorials

"
58,2.0,matplotlib_1-21_pdf.pdf ~ 2,"CONTENTS
I User’s Guide 1
1 Introduction 3
2 Installing 5
3 Tutorials 11
4 Working with text 97
5 Colors 145
6 Customizing matplotlib 173
7 Interactive plots 189
8 Selected Examples 205
9 What’s new in matplotlib 239
10 GitHub Stats 339
11 License 417
12 Credits 421
II The Matplotlib API 423
13 Plotting commands summary 425
14 API Changes 433
15 The top level matplotlib module 483
16 afm (Adobe Font Metrics interface) 487
17 animation module 491
i",0.0027892589569091,"CONTENTS
I
User’s Guide
1
1
Introduction
3
2
Installing
5
3
Tutorials
11
4
Working with text
97
5
Colors
145
6
Customizing matplotlib
173
7
Interactive plots
189
8
Selected Examples
205
9
What’s new in matplotlib
239
10 GitHub Stats
339
11 License
417
12 Credits
421
II
The Matplotlib API
423
13 Plotting commands summary
425
14 API Changes
433
15 The top level matplotlib module
483
16 afm (Adobe Font Metrics interface)
487
17 animation module
491
i
",0.0011961460113525,"CONTENTS
I User’s Guide 1
1 Introduction 3
2 Installing 5
3 Tutorials 11
4 Working with text 97
5 Colors 145
6 Customizing matplotlib 173
7 Interactive plots 189
8 Selected Examples 205
9 What’s new in matplotlib 239
10 GitHub Stats 339
11 License 417
12 Credits 421
II The Matplotlib API 423
13 Plotting commands summary 425
14 API Changes 433
15 The top level matplotlib module 483
16 afm (Adobe Font Metrics interface) 487
17 animation module 491
i",0.0027999877929687,"9>
You can also make lines or patches in the axes coordinate system, but this is less useful in my experience than using ax.transAxes for placing text. Nonetheless, here is a silly example which plots some random dots in data space, and overlays a semi-transparent Circle centered in the middle of the axes with a radius one quarter of the axes – if your axes does not preserve aspect ratio (see set_aspect()), this will look like an ellipse. Use the pan/zoom tool to move around, or manually change the data xlim and ylim, and you will see the data move, but the circle will remain fixed because it is not in data coordinates and will always remain at the center of the axes.
Matplotlib, Release 2.0.2
  1.0 1.0 0.8 0.8 0.6 0.6 0.4 0.4 0.2 0.2
0.0 0.0
0.00 0.25 0.50 0.75 1.00 0.00 0.25 0.50 0.75 1.00
1.0 1.0 0.8 0.8 0.6 0.6 0.4 0.4 0.2 0.2
0.0 0.0
0.00 0.25 0.50 0.75 1.00 0.00 0.25 0.50 0.75 1.00
  A
B
  C
D
    import numpy as np
import matplotlib.pyplot as plt
import matplotlib.patches as patches
fig = plt.figure()
ax = fig.add_subplot(111)
x, y = 10*np.random.rand(2, 1000)
ax.plot(x, y, 'go') # plot some data in data coordinates
circ = patches.Circle((0.5, 0.5), 0.25, transform=ax.transAxes, facecolor='yellow', alpha=0.5)
ax.add_patch(circ)
plt.show()
  3.3. Advanced 81

"
59,3.0,matplotlib_1-21_pdf.pdf ~ 3,"18 artist Module 535
19 Axes class 555
20 axis and tick API 793
21 backends 913
22 cbook 953
23 cm (colormap) 971
24 collections 975
25 colorbar 1145
26 colors 1151
27 container 1165
28 dates 1167
29 dviread 1181
30 ﬁgure 1185
31 ﬁnance 1207
32 font_manager 1219
33 gridspec 1227
34 image 1231
35 legend and legend_handler 1237
36 lines 1245
37 markers 1255
38 mathtext 1259
39 mlab 1279
40 o ﬀsetbox 1313
41 patches 1325
42 path 1367
43 pathe ﬀects 1375
44 projections 1379
ii",0.003274917602539,"18 artist Module
535
19 Axes class
555
20 axis and tick API
793
21 backends
913
22 cbook
953
23 cm (colormap)
971
24 collections
975
25 colorbar
1145
26 colors
1151
27 container
1165
28 dates
1167
29 dviread
1181
30 ﬁgure
1185
31 ﬁnance
1207
32 font_manager
1219
33 gridspec
1227
34 image
1231
35 legend and legend_handler
1237
36 lines
1245
37 markers
1255
38 mathtext
1259
39 mlab
1279
40 oﬀsetbox
1313
41 patches
1325
42 path
1367
43 patheﬀects
1375
44 projections
1379
ii
",0.0005779266357421,"18 artist Module 535
19 Axes class 555
20 axis and tick API 793
21 backends 913
22 cbook 953
23 cm (colormap) 971
24 collections 975
25 colorbar 1145
26 colors 1151
27 container 1165
28 dates 1167
29 dviread 1181
30 ﬁgure 1185
31 ﬁnance 1207
32 font_manager 1219
33 gridspec 1227
34 image 1231
35 legend and legend_handler 1237
36 lines 1245
37 markers 1255
38 mathtext 1259
39 mlab 1279
40 o ﬀsetbox 1313
41 patches 1325
42 path 1367
43 pathe ﬀects 1375
44 projections 1379
ii",0.0026099681854248,"10>
Matplotlib, Release 2.0.2
     10 8 6 4 2 0
  0 2 4 6 8 10
Blended transformations
Drawing in blended coordinate spaces which mix axes with data coordinates is extremely useful, for example to create a horizontal span which highlights some region of the y-data but spans across the x-axis regardless of the data limits, pan or zoom level, etc. In fact these blended lines and spans are so useful, we have built in functions to make them easy to plot (see axhline(), axvline(), axhspan(), axvspan()) but for didactic purposes we will implement the horizontal span here using a blended transformation. This trick only works for separable transformations, like you see in normal Cartesian coordinate systems, but not on inseparable transformations like the PolarTransform.
    import numpy as np
import matplotlib.pyplot as plt
import matplotlib.patches as patches
import matplotlib.transforms as transforms
fig = plt.figure()
ax = fig.add_subplot(111)
x = np.random.randn(1000)
ax.hist(x, 30)
ax.set_title(r'$\sigma=1 \/ \dots \/ \sigma=2$', fontsize=16) # the x coords of this transformation are data, and the
  82 Chapter3. Tutorials

"
60,4.0,matplotlib_1-21_pdf.pdf ~ 4,"45 pyplot 1387
46 rcsetup 1593
47 sankey 1597
48 scale 1605
49 spines 1615
50 style 1619
51 text 1621
52 ticker 1635
53 tight_layout 1647
54 Working with transformations 1649
55 triangular grids 1671
56 type1font 1683
57 units 1685
58 widgets 1687
III The Matplotlib FAQ 1703
59 Installation 1705
60 Usage 1713
61 How-To 1725
62 Troubleshooting 1741
63 Environment Variables 1745
64 Working with Matplotlib in Virtual environments 1747
65 Working with Matplotlib on OSX 1749
IV Matplotlib AxesGrid Toolkit 1753
66 Overview of AxesGrid toolkit 1757
67 The Matplotlib AxesGrid Toolkit User’s Guide 1779
iii",0.0020399093627929,"45 pyplot
1387
46 rcsetup
1593
47 sankey
1597
48 scale
1605
49 spines
1615
50 style
1619
51 text
1621
52 ticker
1635
53 tight_layout
1647
54 Working with transformations
1649
55 triangular grids
1671
56 type1font
1683
57 units
1685
58 widgets
1687
III
The Matplotlib FAQ
1703
59 Installation
1705
60 Usage
1713
61 How-To
1725
62 Troubleshooting
1741
63 Environment Variables
1745
64 Working with Matplotlib in Virtual environments
1747
65 Working with Matplotlib on OSX
1749
IV
Matplotlib AxesGrid Toolkit
1753
66 Overview of AxesGrid toolkit
1757
67 The Matplotlib AxesGrid Toolkit User’s Guide
1779
iii
",0.0005710124969482,"45 pyplot 1387
46 rcsetup 1593
47 sankey 1597
48 scale 1605
49 spines 1615
50 style 1619
51 text 1621
52 ticker 1635
53 tight_layout 1647
54 Working with transformations 1649
55 triangular grids 1671
56 type1font 1683
57 units 1685
58 widgets 1687
III The Matplotlib FAQ 1703
59 Installation 1705
60 Usage 1713
61 How-To 1725
62 Troubleshooting 1741
63 Environment Variables 1745
64 Working with Matplotlib in Virtual environments 1747
65 Working with Matplotlib on OSX 1749
IV Matplotlib AxesGrid Toolkit 1753
66 Overview of AxesGrid toolkit 1757
67 The Matplotlib AxesGrid Toolkit User’s Guide 1779
iii",0.0019490718841552,"11>
Matplotlib, Release 2.0.2
     # y coord are axes
trans = transforms.blended_transform_factory(
    ax.transData, ax.transAxes)
# highlight the 1..2 stddev region with a span.
# We want x to be in data coordinates and y to
# span from 0..1 in axes coords
rect = patches.Rectangle((1,0), width=1, height=1,
ax.add_patch(rect)
plt.show()
transform=trans, color='yellow', alpha=0.5)
  =1 =2
     100
 80
 60
 40
 20
  0
32101234
                 Note: The blended transformations where x is in data coords and y in axes coordinates is so useful that we have helper methods to return the versions mpl uses internally for drawing ticks, ticklabels, etc. The methods are matplotlib.axes.Axes.get_xaxis_transform() and matplotlib.axes.Axes. get_yaxis_transform(). So in the example above, the call to blended_transform_factory() can be replaced by get_xaxis_transform:
trans = ax.get_xaxis_transform()
     3.3. Advanced 83

"
61,5.0,matplotlib_1-21_pdf.pdf ~ 5,"68 The Matplotlib AxesGrid Toolkit API 1795
69 The Matplotlib axes_grid1 Toolkit API 1805
V mplot3d 1823
70 Matplotlib mplot3d toolkit 1825
VI Toolkits 1879
71 Mapping Toolkits 1883
72 General Toolkits 1885
73 High-Level Plotting 1889
VII External Resources 1893
74 Books, Chapters and Articles 1895
75 Videos 1897
76 Tutorials 1899
VIII The Matplotlib Developers’ Guide 1901
77 Contributing 1903
78 Developer’s tips for testing 1911
79 Developer’s tips for documenting matplotlib 1917
80 Developer’s guide for creating scales and transformations 1929
81 Developer’s tips for writing code for Python 2 and 3 1933
82 Working with Matplotlib source code 1937
83 Reviewers guideline 1957
84 Release Guide 1959
85 Matplotlib Enhancement Proposals 1965
86 Licenses 2017
87 Default Color changes 2019
iv",0.0026760101318359,"68 The Matplotlib AxesGrid Toolkit API
1795
69 The Matplotlib axes_grid1 Toolkit API
1805
V
mplot3d
1823
70 Matplotlib mplot3d toolkit
1825
VI
Toolkits
1879
71 Mapping Toolkits
1883
72 General Toolkits
1885
73 High-Level Plotting
1889
VII
External Resources
1893
74 Books, Chapters and Articles
1895
75 Videos
1897
76 Tutorials
1899
VIII
The Matplotlib Developers’ Guide
1901
77 Contributing
1903
78 Developer’s tips for testing
1911
79 Developer’s tips for documenting matplotlib
1917
80 Developer’s guide for creating scales and transformations
1929
81 Developer’s tips for writing code for Python 2 and 3
1933
82 Working with Matplotlib source code
1937
83 Reviewers guideline
1957
84 Release Guide
1959
85 Matplotlib Enhancement Proposals
1965
86 Licenses
2017
87 Default Color changes
2019
iv
",0.0009877681732177,"68 The Matplotlib AxesGrid Toolkit API 1795
69 The Matplotlib axes_grid1 Toolkit API 1805
V mplot3d 1823
70 Matplotlib mplot3d toolkit 1825
VI Toolkits 1879
71 Mapping Toolkits 1883
72 General Toolkits 1885
73 High-Level Plotting 1889
VII External Resources 1893
74 Books, Chapters and Articles 1895
75 Videos 1897
76 Tutorials 1899
VIII The Matplotlib Developers’ Guide 1901
77 Contributing 1903
78 Developer’s tips for testing 1911
79 Developer’s tips for documenting matplotlib 1917
80 Developer’s guide for creating scales and transformations 1929
81 Developer’s tips for writing code for Python 2 and 3 1933
82 Working with Matplotlib source code 1937
83 Reviewers guideline 1957
84 Release Guide 1959
85 Matplotlib Enhancement Proposals 1965
86 Licenses 2017
87 Default Color changes 2019
iv",0.0029680728912353,"12>
Matplotlib, Release 2.0.2
 Using offset transforms to create a shadow effect
One use of transformations is to create a new transformation that is offset from another transformation, e.g., to place one object shifted a bit relative to another object. Typically you want the shift to be in some physical dimension, like points or inches rather than in data coordinates, so that the shift effect is constant at different zoom levels and dpi settings.
One use for an offset is to create a shadow effect, where you draw one object identical to the first just to the right of it, and just below it, adjusting the zorder to make sure the shadow is drawn first and then the object it is shadowing above it. The transforms module has a helper transformation ScaledTranslation. It is instantiated with:
trans = ScaledTranslation(xt, yt, scale_trans)
where xt and yt are the translation offsets, and scale_trans is a transformation which scales xt and yt at transformation time before applying the offsets. A typical use case is to use the figure fig. dpi_scale_trans transformation for the scale_trans argument, to first scale xt and yt specified in points to display space before doing the final offset. The dpi and inches offset is a common-enough use case that we have a special helper function to create it in matplotlib.transforms.offset_copy(), which returns a new transform with an added offset. But in the example below, we’ll create the offset transform ourselves. Note the use of the plus operator in:
showing that can chain transformations using the addition operator. This code says: first apply the data transformation ax.transData and then translate the data by dx and dy points. In typography, a‘point <https://en.wikipedia.org/wiki/Point_%28typography%29>‘_ is 1/72 inches, and by specifying your offsets in points, your figure will look the same regardless of the dpi resolution it is saved in.
       offset = transforms.ScaledTranslation(dx, dy,
  fig.dpi_scale_trans)
shadow_transform = ax.transData + offset
     import numpy as np
import matplotlib.pyplot as plt
import matplotlib.patches as patches
import matplotlib.transforms as transforms
fig = plt.figure()
ax = fig.add_subplot(111)
# make a simple sine wave
x = np.arange(0., 2., 0.01)
y = np.sin(2*np.pi*x)
line, = ax.plot(x, y, lw=3, color='blue')
# shift the object over 2 points, and down 2 points
dx, dy = 2/72., -2/72.
offset = transforms.ScaledTranslation(dx, dy,
  fig.dpi_scale_trans)
shadow_transform = ax.transData + offset
# now plot the same data with our offset transform;
# use the zorder to make sure we are below the line
  84 Chapter3. Tutorials

"
62,6.0,matplotlib_1-21_pdf.pdf ~ 6,"IX Matplotlib Examples 2023
88 animation Examples 2025
89 api Examples 2029
90 axes_grid Examples 2123
91 color Examples 2175
92 event_handling Examples 2187
93 frontpage Examples 2221
94 images_contours_and_ﬁelds Examples 2225
95 lines_bars_and_markers Examples 2237
96 misc Examples 2251
97 mplot3d Examples 2275
98 pie_and_polar_charts Examples 2323
99 pylab_examples Examples 2329
100pyplots Examples 2769
101scales Examples 2791
102shapes_and_collections Examples 2793
103showcase Examples 2799
104specialty_plots Examples 2817
105statistics Examples 2825
106style_sheets Examples 2857
107subplots_axes_and_ﬁgures Examples 2873
108tests Examples 2877
109text_labels_and_annotations Examples 2889
110ticks_and_spines Examples 2895
111units Examples 2909
112user_interfaces Examples 2935
113widgets Examples 3001
v",0.0018959045410156,"IX
Matplotlib Examples
2023
88 animation Examples
2025
89 api Examples
2029
90 axes_grid Examples
2123
91 color Examples
2175
92 event_handling Examples
2187
93 frontpage Examples
2221
94 images_contours_and_ﬁelds Examples
2225
95 lines_bars_and_markers Examples
2237
96 misc Examples
2251
97 mplot3d Examples
2275
98 pie_and_polar_charts Examples
2323
99 pylab_examples Examples
2329
100pyplots Examples
2769
101scales Examples
2791
102shapes_and_collections Examples
2793
103showcase Examples
2799
104specialty_plots Examples
2817
105statistics Examples
2825
106style_sheets Examples
2857
107subplots_axes_and_ﬁgures Examples
2873
108tests Examples
2877
109text_labels_and_annotations Examples
2889
110ticks_and_spines Examples
2895
111units Examples
2909
112user_interfaces Examples
2935
113widgets Examples
3001
v
",0.0007832050323486,"IX Matplotlib Examples 2023
88 animation Examples 2025
89 api Examples 2029
90 axes_grid Examples 2123
91 color Examples 2175
92 event_handling Examples 2187
93 frontpage Examples 2221
94 images_contours_and_ﬁelds Examples 2225
95 lines_bars_and_markers Examples 2237
96 misc Examples 2251
97 mplot3d Examples 2275
98 pie_and_polar_charts Examples 2323
99 pylab_examples Examples 2329
100pyplots Examples 2769
101scales Examples 2791
102shapes_and_collections Examples 2793
103showcase Examples 2799
104specialty_plots Examples 2817
105statistics Examples 2825
106style_sheets Examples 2857
107subplots_axes_and_ﬁgures Examples 2873
108tests Examples 2877
109text_labels_and_annotations Examples 2889
110ticks_and_spines Examples 2895
111units Examples 2909
112user_interfaces Examples 2935
113widgets Examples 3001
v",0.001889944076538,"13>
Matplotlib, Release 2.0.2
     ax.plot(x, y, lw=3, color='gray', transform=shadow_transform, zorder=0.5*line.get_zorder())
ax.set_title('creating a shadow effect with an offset transform') plt.show()
  creating a shadow effect with an offset transform 1.00
0.75 0.50 0.25 0.00 0.25 0.50 0.75 1.00
     0.00 0.25 0.50 0.75 1.00 1.25 1.50 1.75 2.00
The transformation pipeline
The ax.transData transform we have been working with in this tutorial is a composite of three different transformations that comprise the transformation pipeline from data -> display coordinates. Michael Droettboom implemented the transformations framework, taking care to provide a clean API that segre- gated the nonlinear projections and scales that happen in polar and logarithmic plots, from the linear affine transformations that happen when you pan and zoom. There is an efficiency here, because you can pan and zoom in your axes which affects the affine transformation, but you may not need to compute the potentially expensive nonlinear scales or projections on simple navigation events. It is also possible to multiply affine transformation matrices together, and then apply them to coordinates in one step. This is not true of all possible transformations.
Here is how the ax.transData instance is defined in the basic separable axis Axes class: self.transData = self.transScale + (self.transLimits + self.transAxes)
    3.3. Advanced 85

"
63,7.0,matplotlib_1-21_pdf.pdf ~ 7,"X Glossary 3015
Bibliography 3019
Python Module Index 3021
Index 3023
vi",0.0005390644073486,"X
Glossary
3015
Bibliography
3019
Python Module Index
3021
Index
3023
vi
",0.0001580715179443,"X Glossary 3015
Bibliography 3019
Python Module Index 3021
Index 3023
vi",0.0005109310150146,"14>
Matplotlib, Release 2.0.2
 We’ve been introduced to the transAxes instance above in Axes coordinates, which maps the (0,0), (1,1) corners of the axes or subplot bounding box to display space, so let’s look at these other two pieces.
self.transLimits is the transformation that takes you from data to axes coordinates; i.e., it maps your view xlim and ylim to the unit space of the axes (and transAxes then takes that unit space to display space). We can see this in action here
    In [80]: ax = subplot(111) In [81]: ax.set_xlim(0, 10)
Out[81]: (0, 10)
In [82]: ax.set_ylim(-1,1)
Out[82]: (-1, 1)
In [84]: ax.transLimits.transform((0,-1))
Out[84]: array([ 0., 0.])
In [85]: ax.transLimits.transform((10,-1))
Out[85]: array([ 1., 0.])
In [86]: ax.transLimits.transform((10,1))
Out[86]: array([ 1., 1.])
In [87]: ax.transLimits.transform((5,0)) Out[87]: array([ 0.5, 0.5])
 and we can use this same inverted transformation to go from the unit axes coordinates back to data coor- dinates.
The final piece is the self.transScale attribute, which is responsible for the optional non-linear scaling of the data, e.g., for logarithmic axes. When an Axes is initially setup, this is just set to the identity trans- form, since the basic matplotlib axes has linear scale, but when you call a logarithmic scaling function like semilogx() or explicitly set the scale to logarithmic with set_xscale(), then the ax.transScale at- tribute is set to handle the nonlinear projection. The scales transforms are properties of the respective xaxis and yaxis Axis instances. For example, when you call ax.set_xscale('log'), the xaxis updates its scale to a matplotlib.scale.LogScale instance.
For non-separable axes the PolarAxes, there is one more piece to consider, the projection transformation. The transData matplotlib.projections.polar.PolarAxes is similar to that for the typical separable matplotlib Axes, with one additional piece transProjection:
transProjection handles the projection from the space, e.g., latitude and longitude for map data, or radius and theta for polar data, to a separable Cartesian coordinate system. There are several projection examples in the matplotlib.projections package, and the best way to learn more is to open the source for those packages and see how to make your own, since matplotlib supports extensible axes and projections. Michael
    In [90]: inv.transform((0.25, 0.25)) Out[90]: array([ 2.5, -0.5])
     self.transData = self.transScale + self.transProjection + \
    (self.transProjectionAffine + self.transAxes)
  86 Chapter3. Tutorials

"
64,8.0,matplotlib_1-21_pdf.pdf ~ 8,"Part I
User’s Guide
1",0.000392198562622,"Part I
User’s Guide
1
",0.0001122951507568,"Part I
User’s Guide
1",0.0003728866577148,"15>
Matplotlib, Release 2.0.2
 Droettboom has provided a nice tutorial example of creating a hammer projection axes; see api example code: custom_projection_example.py.
3.3.2 Path Tutorial
The object underlying all of the matplotlib.patch objects is the Path , which supports the standard set of moveto, lineto, curveto commands to draw simple and compound outlines consisting of line segments and splines. The Path is instantiated with a (N,2) array of (x,y) vertices, and a N-length array of path codes. For example to draw the unit rectangle from (0,0) to (1,1), we could use this code
    import matplotlib.pyplot as plt
from matplotlib.path import Path import matplotlib.patches as patches
verts = [
(0., 0.), # left, bottom (0., 1.), # left, top (1., 1.), # right, top (1., 0.), # right, bottom (0., 0.), # ignored
]
codes = [Path.MOVETO,
         Path.LINETO,
         Path.LINETO,
         Path.LINETO,
         Path.CLOSEPOLY,
         ]
path = Path(verts, codes)
fig = plt.figure()
ax = fig.add_subplot(111)
patch = patches.PathPatch(path, facecolor='orange', lw=2) ax.add_patch(patch)
ax.set_xlim(-2,2)
ax.set_ylim(-2,2)
plt.show()
  3.3. Advanced 87

"
65,9.0,matplotlib_1-21_pdf.pdf ~ 9,,5.1021575927734375e-05,,5.507469177246094e-05,,4.792213439941406e-05,"16>
Matplotlib, Release 2.0.2
  2.0 1.5 1.0 0.5 0.0 0.5 1.0 1.5 2.0
2.0 1.5 1.0
0.5 0.0
0.5 1.0
1.5 2.0
     The following path codes are recognized
 Code Vertices
MOVETO 1 LINETO 1
Bézier example
Description
Pick up the pen and move to the given vertex.
Draw a line from the current position to the given vertex.
   STOP
1 (ignored)
 A marker for the end of the entire path (currently not required and ignored)
      CURVE3
2 (1 control point, 1 endpoint)
 Draw a quadratic Bézier curve from the current position, with the given control point, to the given end point.
   CURVE4
3 (2 control points, 1 endpoint)
 Draw a cubic Bézier curve from the current position, with the given control points, to the given end point.
   CLOSEPO
LY1 (point itself is ignored)
 Draw a line segment to the start point of the current polyline.
    Some of the path components require multiple vertices to specify them: for example CURVE 3 is a bézier curve with one control point and one end point, and CURVE4 has three vertices for the two control points and the end point. The example below shows a CURVE4 Bézier spline – the bézier curve will be contained in the convex hull of the start point, the two control points, and the end point
    import matplotlib.pyplot as plt from matplotlib.path import Path
  88 Chapter3. Tutorials

"
66,10.0,matplotlib_1-21_pdf.pdf ~ 10,"CHAPTER
ONE
INTRODUCTION
Matplotlib is a library for making 2D plots of arrays in Python. Although it has its origins in emulating
the MATLAB®1 graphics commands, it is independent of MATLAB, and can be used in a Pythonic, object
oriented way. Although Matplotlib is written primarily in pure Python, it makes heavy use of NumPy and
other extension code to provide good performance even for large arrays.
Matplotlib is designed with the philosophy that you should be able to create simple plots with just a few
commands, or just one! If you want to see a histogram of your data, you shouldn’t need to instantiate objects,
call methods, set properties, and so on; it should just work.
For years, I used to use MATLAB exclusively for data analysis and visualization. MATLAB excels at mak-
ing nice looking plots easy. When I began working with EEG data, I found that I needed to write applications
to interact with my data, and developed an EEG analysis application in MATLAB. As the application grew
in complexity, interacting with databases, http servers, manipulating complex data structures, I began to
strain against the limitations of MATLAB as a programming language, and decided to start over in Python.
Python more than makes up for all of MATLAB’s deﬁciencies as a programming language, but I was having
diﬃculty ﬁnding a 2D plotting package (for 3D VTK more than exceeds all of my needs).
When I went searching for a Python plotting package, I had several requirements:
• Plots should look great - publication quality. One important requirement for me is that the text looks
good (antialiased, etc.)
• Postscript output for inclusion with TeX documents
• Embeddable in a graphical user interface for application development
• Code should be easy enough that I can understand it and extend it
• Making plots should be easy
Finding no package that suited me just right, I did what any self-respecting Python programmer would do:
rolled up my sleeves and dived in. Not having any real experience with computer graphics, I decided to
emulate MATLAB’s plotting capabilities because that is something MATLAB does very well. This had the
added advantage that many people have a lot of MATLAB experience, and thus they can quickly get up to
steam plotting in python. From a developer’s perspective, having a ﬁxed user interface (the pylab interface)
has been very useful, because the guts of the code base can be redesigned without aﬀecting user code.
The Matplotlib code is conceptually divided into three parts: the pylab interface is the set of functions
provided by matplotlib.pylab which allow the user to create plots with code quite similar to MATLAB
1 MATLAB is a registered trademark of The MathWorks, Inc.
3",0.008462905883789,"CHAPTER
ONE
INTRODUCTION
Matplotlib is a library for making 2D plots of arrays in Python. Although it has its origins in emulating
the MATLAB®1 graphics commands, it is independent of MATLAB, and can be used in a Pythonic, object
oriented way. Although Matplotlib is written primarily in pure Python, it makes heavy use of NumPy and
other extension code to provide good performance even for large arrays.
Matplotlib is designed with the philosophy that you should be able to create simple plots with just a few
commands, or just one! If you want to see a histogram of your data, you shouldn’t need to instantiate objects,
call methods, set properties, and so on; it should just work.
For years, I used to use MATLAB exclusively for data analysis and visualization. MATLAB excels at mak-
ing nice looking plots easy. When I began working with EEG data, I found that I needed to write applications
to interact with my data, and developed an EEG analysis application in MATLAB. As the application grew
in complexity, interacting with databases, http servers, manipulating complex data structures, I began to
strain against the limitations of MATLAB as a programming language, and decided to start over in Python.
Python more than makes up for all of MATLAB’s deﬁciencies as a programming language, but I was having
diﬃculty ﬁnding a 2D plotting package (for 3D VTK more than exceeds all of my needs).
When I went searching for a Python plotting package, I had several requirements:
• Plots should look great - publication quality. One important requirement for me is that the text looks
good (antialiased, etc.)
• Postscript output for inclusion with TeX documents
• Embeddable in a graphical user interface for application development
• Code should be easy enough that I can understand it and extend it
• Making plots should be easy
Finding no package that suited me just right, I did what any self-respecting Python programmer would do:
rolled up my sleeves and dived in. Not having any real experience with computer graphics, I decided to
emulate MATLAB’s plotting capabilities because that is something MATLAB does very well. This had the
added advantage that many people have a lot of MATLAB experience, and thus they can quickly get up to
steam plotting in python. From a developer’s perspective, having a ﬁxed user interface (the pylab interface)
has been very useful, because the guts of the code base can be redesigned without aﬀecting user code.
The Matplotlib code is conceptually divided into three parts: the pylab interface is the set of functions
provided by matplotlib.pylab which allow the user to create plots with code quite similar to MATLAB
1 MATLAB is a registered trademark of The MathWorks, Inc.
3
",0.0044281482696533,"CHAPTER
ONE
INTRODUCTION
Matplotlib is a library for making 2D plots of arrays in Python. Although it has its origins in emulating
the MATLAB®1 graphics commands, it is independent of MATLAB, and can be used in a Pythonic, object
oriented way. Although Matplotlib is written primarily in pure Python, it makes heavy use of NumPy and
other extension code to provide good performance even for large arrays.
Matplotlib is designed with the philosophy that you should be able to create simple plots with just a few
commands, or just one! If you want to see a histogram of your data, you shouldn’t need to instantiate objects,
call methods, set properties, and so on; it should just work.
For years, I used to use MATLAB exclusively for data analysis and visualization. MATLAB excels at mak-
ing nice looking plots easy. When I began working with EEG data, I found that I needed to write applications
to interact with my data, and developed an EEG analysis application in MATLAB. As the application grew
in complexity, interacting with databases, http servers, manipulating complex data structures, I began to
strain against the limitations of MATLAB as a programming language, and decided to start over in Python.
Python more than makes up for all of MATLAB’s deﬁciencies as a programming language, but I was having
diﬃculty ﬁnding a 2D plotting package (for 3D VTK more than exceeds all of my needs).
When I went searching for a Python plotting package, I had several requirements:
• Plots should look great - publication quality. One important requirement for me is that the text looks
good (antialiased, etc.)
• Postscript output for inclusion with TeX documents
• Embeddable in a graphical user interface for application development
• Code should be easy enough that I can understand it and extend it
• Making plots should be easy
Finding no package that suited me just right, I did what any self-respecting Python programmer would do:
rolled up my sleeves and dived in. Not having any real experience with computer graphics, I decided to
emulate MATLAB’s plotting capabilities because that is something MATLAB does very well. This had the
added advantage that many people have a lot of MATLAB experience, and thus they can quickly get up to
steam plotting in python. From a developer’s perspective, having a ﬁxed user interface (the pylab interface)
has been very useful, because the guts of the code base can be redesigned without aﬀecting user code.
The Matplotlib code is conceptually divided into three parts: the pylab interface is the set of functions
provided by matplotlib.pylab which allow the user to create plots with code quite similar to MATLAB
1 MATLAB is a registered trademark of The MathWorks, Inc.
3",0.0091259479522705,"17>
Matplotlib, Release 2.0.2
     import matplotlib.patches as patches
verts = [
(0., 0.), # P0
(0.2, 1.), # P1 (1., 0.8), # P2 (0.8, 0.), # P3 ]
codes = [Path.MOVETO,
         Path.CURVE4,
         Path.CURVE4,
         Path.CURVE4,
         ]
path = Path(verts, codes)
fig = plt.figure()
ax = fig.add_subplot(111)
patch = patches.PathPatch(path, facecolor='none', lw=2) ax.add_patch(patch)
xs, ys = zip(*verts)
ax.plot(xs, ys, 'x--', lw=2, color='black', ms=10)
ax.text(-0.05, -0.05, 'P0') ax.text(0.15, 1.05, 'P1') ax.text(1.05, 0.85, 'P2') ax.text(0.85, -0.05, 'P3')
ax.set_xlim(-0.1, 1.1)
ax.set_ylim(-0.1, 1.1)
plt.show()
  3.3. Advanced 89

"
67,11.0,matplotlib_1-21_pdf.pdf ~ 11,"Matplotlib, Release 2.0.2
ﬁgure generating code (Pyplot tutorial). The Matplotlib frontend or Matplotlib API is the set of classes that
do the heavy lifting, creating and managing ﬁgures, text, lines, plots and so on ( Artist tutorial). This is an
abstract interface that knows nothing about output. Thebackends are device-dependent drawing devices, aka
renderers, that transform the frontend representation to hardcopy or a display device ( What is a backend?).
Example backends: PS creates PostScript ® hardcopy, SVG creates Scalable Vector Graphics hardcopy,
Agg creates PNG output using the high quality Anti-Grain Geometry library that ships with Matplotlib,
GTK embeds Matplotlib in a Gtk+ application, GTKAgg uses the Anti-Grain renderer to create a ﬁgure and
embed it in a Gtk+ application, and so on for PDF, WxWidgets, Tkinter, etc.
Matplotlib is used by many people in many diﬀerent contexts. Some people want to automatically generate
PostScript ﬁles to send to a printer or publishers. Others deploy Matplotlib on a web application server to
generate PNG output for inclusion in dynamically-generated web pages. Some use Matplotlib interactively
from the Python shell in Tkinter on Windows ™. My primary use is to embed Matplotlib in a Gtk + EEG
application that runs on Windows, Linux and Macintosh OS X.
4 Chapter 1. Introduction",0.0033447742462158,"Matplotlib, Release 2.0.2
ﬁgure generating code (Pyplot tutorial). The Matplotlib frontend or Matplotlib API is the set of classes that
do the heavy lifting, creating and managing ﬁgures, text, lines, plots and so on (Artist tutorial). This is an
abstract interface that knows nothing about output. The backends are device-dependent drawing devices, aka
renderers, that transform the frontend representation to hardcopy or a display device (What is a backend?).
Example backends: PS creates PostScript® hardcopy, SVG creates Scalable Vector Graphics hardcopy,
Agg creates PNG output using the high quality Anti-Grain Geometry library that ships with Matplotlib,
GTK embeds Matplotlib in a Gtk+ application, GTKAgg uses the Anti-Grain renderer to create a ﬁgure and
embed it in a Gtk+ application, and so on for PDF, WxWidgets, Tkinter, etc.
Matplotlib is used by many people in many diﬀerent contexts. Some people want to automatically generate
PostScript ﬁles to send to a printer or publishers. Others deploy Matplotlib on a web application server to
generate PNG output for inclusion in dynamically-generated web pages. Some use Matplotlib interactively
from the Python shell in Tkinter on Windows™. My primary use is to embed Matplotlib in a Gtk+ EEG
application that runs on Windows, Linux and Macintosh OS X.
4
Chapter 1. Introduction
",0.0011630058288574,"Matplotlib, Release 2.0.2
ﬁgure generating code (Pyplot tutorial). The Matplotlib frontend or Matplotlib API is the set of classes that
do the heavy lifting, creating and managing ﬁgures, text, lines, plots and so on ( Artist tutorial). This is an
abstract interface that knows nothing about output. Thebackends are device-dependent drawing devices, aka
renderers, that transform the frontend representation to hardcopy or a display device ( What is a backend?).
Example backends: PS creates PostScript ® hardcopy, SVG creates Scalable Vector Graphics hardcopy,
Agg creates PNG output using the high quality Anti-Grain Geometry library that ships with Matplotlib,
GTK embeds Matplotlib in a Gtk+ application, GTKAgg uses the Anti-Grain renderer to create a ﬁgure and
embed it in a Gtk+ application, and so on for PDF, WxWidgets, Tkinter, etc.
Matplotlib is used by many people in many diﬀerent contexts. Some people want to automatically generate
PostScript ﬁles to send to a printer or publishers. Others deploy Matplotlib on a web application server to
generate PNG output for inclusion in dynamically-generated web pages. Some use Matplotlib interactively
from the Python shell in Tkinter on Windows ™. My primary use is to embed Matplotlib in a Gtk + EEG
application that runs on Windows, Linux and Macintosh OS X.
4 Chapter 1. Introduction",0.0034928321838378,"18>
Matplotlib, Release 2.0.2
     P1
 P0
P3
P2
 1.0 0.8 0.6 0.4 0.2 0.0
0.0 0.2
0.4 0.6
0.8 1.0
Compound paths
All of the simple patch primitives in matplotlib, Rectangle, Circle, Polygon, etc, are implemented with simple path. Plotting functions like hist() and bar(), which create a number of primitives, e.g., a bunch of Rectangles, can usually be implemented more efficiently using a compound path. The reason bar creates a list of rectangles and not a compound path is largely historical: the Path code is comparatively new and bar predates it. While we could change it now, it would break old code, so here we will cover how to create compound paths, replacing the functionality in bar, in case you need to do so in your own code for efficiency reasons, e.g., you are creating an animated bar plot.
We will make the histogram chart by creating a series of rectangles for each histogram bar: the rectangle width is the bin width and the rectangle height is the number of datapoints in that bin. First we’ll create some random normally distributed data and compute the histogram. Because numpy returns the bin edges and not centers, the length of bins is 1 greater than the length of n in the example below:
We’ll now extract the corners of the rectangles. Each of the left, bottom, etc, arrays below is len(n), where n is the array of counts for each histogram bar:
    # histogram our data with numpy
data = np.random.randn(1000)
n, bins = np.histogram(data, 100)
  90 Chapter3. Tutorials

"
68,12.0,matplotlib_1-21_pdf.pdf ~ 12,"CHAPTER
TWO
INSTALLING
There are many diﬀerent ways to install matplotlib, and the best way depends on what operating system you
are using, what you already have installed, and how you want to use it. To avoid wading through all the
details (and potential complications) on this page, there are several convenient options.
2.1 Installing pre-built packages
2.1.1 Most platforms : scientiﬁc Python distributions
The ﬁrst option is to use one of the pre-packaged python distributions that already provide matplotlib built-in.
The Continuum.io Python distribution (Anaconda or miniconda) and the Enthought distribution (Canopy)
are both excellent choices that “just work” out of the box for Windows, OSX and common Linux platforms.
Both of these distributions include matplotlib and lots of other useful tools.
2.1.2 Linux : using your package manager
If you are on Linux, you might prefer to use your package manager. matplotlib is packaged for almost every
major Linux distribution.
• Debian / Ubuntu : sudo apt-get install python-matplotlib
• Fedora / Redhat : sudo yum install python-matplotlib
2.1.3 Mac OSX : using pip
If you are on Mac OSX you can probably install matplotlib binaries using the standard Python installation
program pip. See Installing OSX binary wheels.
2.1.4 Windows
If you don’t already have Python installed, we recommend using one of the scipy-stack compatible Python
distributions such as WinPython, Python(x,y), Enthought Canopy, or Continuum Anaconda, which have
matplotlib and many of its dependencies, plus other useful packages, preinstalled.
For standard Python installations, install matplotlib using pip:
5",0.0045580863952636,"CHAPTER
TWO
INSTALLING
There are many diﬀerent ways to install matplotlib, and the best way depends on what operating system you
are using, what you already have installed, and how you want to use it. To avoid wading through all the
details (and potential complications) on this page, there are several convenient options.
2.1 Installing pre-built packages
2.1.1 Most platforms : scientiﬁc Python distributions
The ﬁrst option is to use one of the pre-packaged python distributions that already provide matplotlib built-in.
The Continuum.io Python distribution (Anaconda or miniconda) and the Enthought distribution (Canopy)
are both excellent choices that “just work” out of the box for Windows, OSX and common Linux platforms.
Both of these distributions include matplotlib and lots of other useful tools.
2.1.2 Linux : using your package manager
If you are on Linux, you might prefer to use your package manager. matplotlib is packaged for almost every
major Linux distribution.
• Debian / Ubuntu : sudo apt-get install python-matplotlib
• Fedora / Redhat : sudo yum install python-matplotlib
2.1.3 Mac OSX : using pip
If you are on Mac OSX you can probably install matplotlib binaries using the standard Python installation
program pip. See Installing OSX binary wheels.
2.1.4 Windows
If you don’t already have Python installed, we recommend using one of the scipy-stack compatible Python
distributions such as WinPython, Python(x,y), Enthought Canopy, or Continuum Anaconda, which have
matplotlib and many of its dependencies, plus other useful packages, preinstalled.
For standard Python installations, install matplotlib using pip:
5
",0.0014500617980957,"CHAPTER
TWO
INSTALLING
There are many diﬀerent ways to install matplotlib, and the best way depends on what operating system you
are using, what you already have installed, and how you want to use it. To avoid wading through all the
details (and potential complications) on this page, there are several convenient options.
2.1 Installing pre-built packages
2.1.1 Most platforms : scientiﬁc Python distributions
The ﬁrst option is to use one of the pre-packaged python distributions that already provide matplotlib built-in.
The Continuum.io Python distribution (Anaconda or miniconda) and the Enthought distribution (Canopy)
are both excellent choices that “just work” out of the box for Windows, OSX and common Linux platforms.
Both of these distributions include matplotlib and lots of other useful tools.
2.1.2 Linux : using your package manager
If you are on Linux, you might prefer to use your package manager. matplotlib is packaged for almost every
major Linux distribution.
• Debian / Ubuntu : sudo apt-get install python-matplotlib
• Fedora / Redhat : sudo yum install python-matplotlib
2.1.3 Mac OSX : using pip
If you are on Mac OSX you can probably install matplotlib binaries using the standard Python installation
program pip. See Installing OSX binary wheels.
2.1.4 Windows
If you don’t already have Python installed, we recommend using one of the scipy-stack compatible Python
distributions such as WinPython, Python(x,y), Enthought Canopy, or Continuum Anaconda, which have
matplotlib and many of its dependencies, plus other useful packages, preinstalled.
For standard Python installations, install matplotlib using pip:
5",0.0046150684356689,"19>
Matplotlib, Release 2.0.2
     # get the corners of the rectangles for the histogram
left = np.array(bins[:-1])
right = np.array(bins[1:])
bottom = np.zeros(len(left))
top = bottom + n
 Now we have to construct our compound path, which will consist of a series of MOVETO, LINETO and CLOSEPOLY for each rectangle. For each rectangle, we need 5 vertices: 1 for the MOVETO, 3 for the LINETO, and 1 for the CLOSEPOLY. As indicated in the table above, the vertex for the closepoly is ignored but we still need it to keep the codes aligned with the vertices:
    nverts = nrects*(1+3+1)
verts = np.zeros((nverts, 2))
codes = np.ones(nverts, int) * path.Path.LINETO
codes[0::5] = path.Path.MOVETO
codes[4::5] = path.Path.CLOSEPOLY
verts[0::5,0] = left
verts[0::5,1] = bottom
verts[1::5,0] = left
verts[1::5,1] = top
verts[2::5,0] = right
verts[2::5,1] = top
verts[3::5,0] = right
verts[3::5,1] = bottom
 All that remains is to create the path, attach it to a PathPatch, and add it to our axes:
Here is the result
    barpath = path.Path(verts, codes)
patch = patches.PathPatch(barpath, facecolor='green',
edgecolor='yellow', alpha=0.5) ax.add_patch(patch)
  3.3. Advanced 91

"
69,13.0,matplotlib_1-21_pdf.pdf ~ 13,"Matplotlib, Release 2.0.2
python -m pip install -U pip setuptools
python -m pip install matplotlib
In case Python 2.7 or 3.4 are not installed for all users, the Microsoft Visual C++ 2008 (64 bit or 32 bit for
Python 2.7) or Microsoft Visual C++ 2010 (64 bit or 32 bit for Python 3.4) redistributable packages need to
be installed.
Matplotlib depends on Pillow for reading and saving JPEG, BMP, and TIFF image ﬁles. Matplotlib requires
MiKTeX and GhostScript for rendering text with LaTeX. FFmpeg, avconv, mencoder, or ImageMagick are
required for the animation module.
The following backends should work out of the box: agg, tkagg, ps, pdf and svg. For other backends you
may need to install pycairo, PyQt4, PyQt5, PySide, wxPython, PyGTK, Tornado, or GhostScript.
TkAgg is probably the best backend for interactive use from the standard Python shell or IPython. It is
enabled as the default backend for the oﬃcial binaries. GTK3 is not supported on Windows.
The Windows wheels ( *.whl) on the PyPI download page do not contain test data or example
code. If you want to try the many demos that come in the matplotlib source distribution, down-
load the *.tar.gz ﬁle and look in the examples subdirectory. To run the test suite, copy the
lib\matplotlib\testsand lib\mpl_toolkits\testsdirectories from the source distribution tosys.
prefix\Lib\site-packages\matplotlib and sys.prefix\Lib\site-packages\mpl_toolkits
respectively, and install nose, mock, Pillow, MiKTeX, GhostScript,ﬀmpeg, avconv, mencoder, ImageMag-
ick, and Inkscape.
2.2 Installing from source
If you are interested in contributing to matplotlib development, running the latest source code, or just like to
build everything yourself, it is not diﬃcult to build matplotlib from source. Grab the latest tar.gz release ﬁle
from the PyPI ﬁles page, or if you want to develop matplotlib or just need the latest bugﬁxed version, grab
the latest git version Source install from git.
The standard environment variables CC, CXX, PKG_CONFIG are respected. This means you can set them if
your toolchain is preﬁxed. This may be used for cross compiling.
export CC=x86_64-pc-linux-gnu-gcc
export CXX=x86_64-pc-linux-gnu-g++
export PKG_CONFIG=x86_64-pc-linux-gnu-pkg-config
Once you have satisﬁed the requirements detailed below (mainly python, numpy, libpng and freetype), you
can build matplotlib.
cd matplotlib
python setup.py build
python setup.py install
We provide a setup.cfg ﬁle that goes with setup.pywhich you can use to customize the build process. For
example, which default backend to use, whether some of the optional libraries that matplotlib ships with are
installed, and so on. This ﬁle will be particularly useful to those packaging matplotlib.
6 Chapter 2. Installing",0.0089108943939208,"Matplotlib, Release 2.0.2
python -m pip install -U pip setuptools
python -m pip install matplotlib
In case Python 2.7 or 3.4 are not installed for all users, the Microsoft Visual C++ 2008 (64 bit or 32 bit for
Python 2.7) or Microsoft Visual C++ 2010 (64 bit or 32 bit for Python 3.4) redistributable packages need to
be installed.
Matplotlib depends on Pillow for reading and saving JPEG, BMP, and TIFF image ﬁles. Matplotlib requires
MiKTeX and GhostScript for rendering text with LaTeX. FFmpeg, avconv, mencoder, or ImageMagick are
required for the animation module.
The following backends should work out of the box: agg, tkagg, ps, pdf and svg. For other backends you
may need to install pycairo, PyQt4, PyQt5, PySide, wxPython, PyGTK, Tornado, or GhostScript.
TkAgg is probably the best backend for interactive use from the standard Python shell or IPython. It is
enabled as the default backend for the oﬃcial binaries. GTK3 is not supported on Windows.
The Windows wheels (*.whl) on the PyPI download page do not contain test data or example
code.
If you want to try the many demos that come in the matplotlib source distribution, down-
load the *.tar.gz ﬁle and look in the examples subdirectory.
To run the test suite, copy the
lib\matplotlib\tests and lib\mpl_toolkits\tests directories from the source distribution to sys.
prefix\Lib\site-packages\matplotlib and sys.prefix\Lib\site-packages\mpl_toolkits
respectively, and install nose, mock, Pillow, MiKTeX, GhostScript, ﬀmpeg, avconv, mencoder, ImageMag-
ick, and Inkscape.
2.2 Installing from source
If you are interested in contributing to matplotlib development, running the latest source code, or just like to
build everything yourself, it is not diﬃcult to build matplotlib from source. Grab the latest tar.gz release ﬁle
from the PyPI ﬁles page, or if you want to develop matplotlib or just need the latest bugﬁxed version, grab
the latest git version Source install from git.
The standard environment variables CC, CXX, PKG_CONFIG are respected. This means you can set them if
your toolchain is preﬁxed. This may be used for cross compiling.
export CC=x86_64-pc-linux-gnu-gcc
export CXX=x86_64-pc-linux-gnu-g++
export PKG_CONFIG=x86_64-pc-linux-gnu-pkg-config
Once you have satisﬁed the requirements detailed below (mainly python, numpy, libpng and freetype), you
can build matplotlib.
cd matplotlib
python setup.py build
python setup.py install
We provide a setup.cfg ﬁle that goes with setup.py which you can use to customize the build process. For
example, which default backend to use, whether some of the optional libraries that matplotlib ships with are
installed, and so on. This ﬁle will be particularly useful to those packaging matplotlib.
6
Chapter 2. Installing
",0.0026390552520751,"Matplotlib, Release 2.0.2
python -m pip install -U pip setuptools
python -m pip install matplotlib
In case Python 2.7 or 3.4 are not installed for all users, the Microsoft Visual C++ 2008 (64 bit or 32 bit for
Python 2.7) or Microsoft Visual C++ 2010 (64 bit or 32 bit for Python 3.4) redistributable packages need to
be installed.
Matplotlib depends on Pillow for reading and saving JPEG, BMP, and TIFF image ﬁles. Matplotlib requires
MiKTeX and GhostScript for rendering text with LaTeX. FFmpeg, avconv, mencoder, or ImageMagick are
required for the animation module.
The following backends should work out of the box: agg, tkagg, ps, pdf and svg. For other backends you
may need to install pycairo, PyQt4, PyQt5, PySide, wxPython, PyGTK, Tornado, or GhostScript.
TkAgg is probably the best backend for interactive use from the standard Python shell or IPython. It is
enabled as the default backend for the oﬃcial binaries. GTK3 is not supported on Windows.
The Windows wheels ( *.whl) on the PyPI download page do not contain test data or example
code. If you want to try the many demos that come in the matplotlib source distribution, down-
load the *.tar.gz ﬁle and look in the examples subdirectory. To run the test suite, copy the
lib\matplotlib\testsand lib\mpl_toolkits\testsdirectories from the source distribution tosys.
prefix\Lib\site-packages\matplotlib and sys.prefix\Lib\site-packages\mpl_toolkits
respectively, and install nose, mock, Pillow, MiKTeX, GhostScript,ﬀmpeg, avconv, mencoder, ImageMag-
ick, and Inkscape.
2.2 Installing from source
If you are interested in contributing to matplotlib development, running the latest source code, or just like to
build everything yourself, it is not diﬃcult to build matplotlib from source. Grab the latest tar.gz release ﬁle
from the PyPI ﬁles page, or if you want to develop matplotlib or just need the latest bugﬁxed version, grab
the latest git version Source install from git.
The standard environment variables CC, CXX, PKG_CONFIG are respected. This means you can set them if
your toolchain is preﬁxed. This may be used for cross compiling.
export CC=x86_64-pc-linux-gnu-gcc
export CXX=x86_64-pc-linux-gnu-g++
export PKG_CONFIG=x86_64-pc-linux-gnu-pkg-config
Once you have satisﬁed the requirements detailed below (mainly python, numpy, libpng and freetype), you
can build matplotlib.
cd matplotlib
python setup.py build
python setup.py install
We provide a setup.cfg ﬁle that goes with setup.pywhich you can use to customize the build process. For
example, which default backend to use, whether some of the optional libraries that matplotlib ships with are
installed, and so on. This ﬁle will be particularly useful to those packaging matplotlib.
6 Chapter 2. Installing",0.0081081390380859,"20>
Matplotlib, Release 2.0.2
      35
30
25
20
15
10
5 0
32101234
 3.3.3 Path effects guide
Matplotlib’s patheffects module provides functionality to apply a multiple draw stage to any Artist which can be rendered via a Path.
Artists which can have a path effect applied to them include Patch, Line2D, Collection and even Text. Each artist’s path effects can be controlled via the set_path_effects method (set_path_effects), which takes an iterable of AbstractPathEffect instances.
The simplest path effect is the Normal effect, which simply draws the artist without any effect:
    import matplotlib.pyplot as plt
import matplotlib.patheffects as path_effects
fig = plt.figure(figsize=(5, 1.5))
text = fig.text(0.5, 0.5, 'Hello path effects world!\nThis is the normal '
'path effect.\nPretty dull, huh?', ha='center', va='center', size=20)
text.set_path_effects([path_effects.Normal()])
plt.show()
  92 Chapter3. Tutorials
"
70,14.0,matplotlib_1-21_pdf.pdf ~ 14,"Matplotlib, Release 2.0.2
If you have installed prerequisites to nonstandard places and need to inform matplotlib where they are,
edit setupext.py and add the base dirs to the basedir dictionary entry for your sys.platform. e.g., if
the header to some required library is in /some/path/include/someheader.h, put /some/path in the
basedirlist for your platform.
2.2.1 Build requirements
These are external packages which you will need to install before installing matplotlib. If you are building on
OSX, see Building on OSX. If you are building on Windows, seeBuilding on Windows. If you are installing
dependencies with a package manager on Linux, you may need to install the development packages (look
for a “-dev” postﬁx) in addition to the libraries themselves.
Required Dependencies
python 2.7, 3.4, 3.5 or 3.6 Download python.
numpy 1.7.1 (or later) array support for python (download numpy)
setuptools Setuptools provides extensions for python package installation.
dateutil 1.1 or later Provides extensions to python datetime handling. If using pip, easy_install or in-
stalling from source, the installer will attempt to download and installpython_dateutilfrom PyPI.
pyparsing Required for matplotlib’s mathtext math rendering support. If using pip, easy_install or in-
stalling from source, the installer will attempt to download and install pyparsingfrom PyPI.
libpng 1.2 (or later) library for loading and saving PNG ﬁles (download). libpng requires zlib.
pytz Used to manipulate time-zone aware datetimes. https://pypi.python.org/pypi/pytz
FreeType 2.3 or later Library for reading true type font ﬁles. If using pip, easy_install or installing from
source, the installer will attempt to locate FreeType in expected locations. If it cannot, try installing
pkg-conﬁg, a tool used to ﬁnd required non-python libraries.
cycler 0.10.0 or later Composable cycle class used for constructing style-cycles
six Required for compatibility between python 2 and python 3
Dependencies for python 2
functools32 Required for compatibility if running on Python 2.7.
subprocess32 Optional, unix only. Backport of the subprocess standard library from 3.2 + for Python 2.7.
It provides better error messages and timeout support.
Optional GUI framework
These are optional packages which you may want to install to use matplotlib with a user interface toolkit.
See What is a backend? for more details on the optional matplotlib backends and the capabilities they
provide.
2.2. Installing from source 7",0.0066900253295898,"Matplotlib, Release 2.0.2
If you have installed prerequisites to nonstandard places and need to inform matplotlib where they are,
edit setupext.py and add the base dirs to the basedir dictionary entry for your sys.platform. e.g., if
the header to some required library is in /some/path/include/someheader.h, put /some/path in the
basedir list for your platform.
2.2.1 Build requirements
These are external packages which you will need to install before installing matplotlib. If you are building on
OSX, see Building on OSX. If you are building on Windows, see Building on Windows. If you are installing
dependencies with a package manager on Linux, you may need to install the development packages (look
for a “-dev” postﬁx) in addition to the libraries themselves.
Required Dependencies
python 2.7, 3.4, 3.5 or 3.6 Download python.
numpy 1.7.1 (or later) array support for python (download numpy)
setuptools Setuptools provides extensions for python package installation.
dateutil 1.1 or later Provides extensions to python datetime handling. If using pip, easy_install or in-
stalling from source, the installer will attempt to download and install python_dateutil from PyPI.
pyparsing Required for matplotlib’s mathtext math rendering support. If using pip, easy_install or in-
stalling from source, the installer will attempt to download and install pyparsing from PyPI.
libpng 1.2 (or later) library for loading and saving PNG ﬁles (download). libpng requires zlib.
pytz Used to manipulate time-zone aware datetimes. https://pypi.python.org/pypi/pytz
FreeType 2.3 or later Library for reading true type font ﬁles. If using pip, easy_install or installing from
source, the installer will attempt to locate FreeType in expected locations. If it cannot, try installing
pkg-conﬁg, a tool used to ﬁnd required non-python libraries.
cycler 0.10.0 or later Composable cycle class used for constructing style-cycles
six Required for compatibility between python 2 and python 3
Dependencies for python 2
functools32 Required for compatibility if running on Python 2.7.
subprocess32 Optional, unix only. Backport of the subprocess standard library from 3.2+ for Python 2.7.
It provides better error messages and timeout support.
Optional GUI framework
These are optional packages which you may want to install to use matplotlib with a user interface toolkit.
See What is a backend? for more details on the optional matplotlib backends and the capabilities they
provide.
2.2. Installing from source
7
",0.0020391941070556,"Matplotlib, Release 2.0.2
If you have installed prerequisites to nonstandard places and need to inform matplotlib where they are,
edit setupext.py and add the base dirs to the basedir dictionary entry for your sys.platform. e.g., if
the header to some required library is in /some/path/include/someheader.h, put /some/path in the
basedirlist for your platform.
2.2.1 Build requirements
These are external packages which you will need to install before installing matplotlib. If you are building on
OSX, see Building on OSX. If you are building on Windows, seeBuilding on Windows. If you are installing
dependencies with a package manager on Linux, you may need to install the development packages (look
for a “-dev” postﬁx) in addition to the libraries themselves.
Required Dependencies
python 2.7, 3.4, 3.5 or 3.6 Download python.
numpy 1.7.1 (or later) array support for python (download numpy)
setuptools Setuptools provides extensions for python package installation.
dateutil 1.1 or later Provides extensions to python datetime handling. If using pip, easy_install or in-
stalling from source, the installer will attempt to download and installpython_dateutilfrom PyPI.
pyparsing Required for matplotlib’s mathtext math rendering support. If using pip, easy_install or in-
stalling from source, the installer will attempt to download and install pyparsingfrom PyPI.
libpng 1.2 (or later) library for loading and saving PNG ﬁles (download). libpng requires zlib.
pytz Used to manipulate time-zone aware datetimes. https://pypi.python.org/pypi/pytz
FreeType 2.3 or later Library for reading true type font ﬁles. If using pip, easy_install or installing from
source, the installer will attempt to locate FreeType in expected locations. If it cannot, try installing
pkg-conﬁg, a tool used to ﬁnd required non-python libraries.
cycler 0.10.0 or later Composable cycle class used for constructing style-cycles
six Required for compatibility between python 2 and python 3
Dependencies for python 2
functools32 Required for compatibility if running on Python 2.7.
subprocess32 Optional, unix only. Backport of the subprocess standard library from 3.2 + for Python 2.7.
It provides better error messages and timeout support.
Optional GUI framework
These are optional packages which you may want to install to use matplotlib with a user interface toolkit.
See What is a backend? for more details on the optional matplotlib backends and the capabilities they
provide.
2.2. Installing from source 7",0.0070500373840332,
71,15.0,matplotlib_1-21_pdf.pdf ~ 15,"Matplotlib, Release 2.0.2
tk 8.3 or later, not 8.6.0 or 8.6.1 The TCL/Tk widgets library used by the TkAgg backend.
Versions 8.6.0 and 8.6.1 are known to have issues that may result in segfaults when closing multiple
windows in the wrong order.
pyqt 4.4 or later The Qt4 widgets library python wrappers for the Qt4Agg backend
pygtk 2.4 or later The python wrappers for the GTK widgets library for use with the GTK or GTKAgg
backend
wxpython 2.8 or later The python wrappers for the wx widgets library for use with the WX or WXAgg
backend
Optional external programs
ﬀmpeg/avconv or mencoder Required for the animation module to be save out put to movie formats.
ImageMagick Required for the animation module to be able to save to animated gif.
Optional dependencies
Pillow If Pillow is installed, matplotlib can read and write a larger selection of image ﬁle formats.
pkg-conﬁg A tool used to ﬁnd required non-python libraries. This is not strictly required, but can make
installation go more smoothly if the libraries and headers are not in the expected locations.
Required libraries that ship with matplotlib
agg 2.4 The antigrain C++ rendering engine. matplotlib links against the agg template source statically, so
it will not aﬀect anything on your system outside of matplotlib.
qhull 2012.1 A library for computing Delaunay triangulations.
ttconv truetype font utility
2.2.2 Building on Linux
It is easiest to use your system package manager to install the dependencies.
If you are on Debian/Ubuntu, you can get all the dependencies required to build matplotlib with:
sudo apt-get build-dep python-matplotlib
If you are on Fedora/RedHat, you can get all the dependencies required to build matplotlib by ﬁrst installing
yum-builddepand then running:
su -c ""yum-builddep python-matplotlib""
This does not build matplotlib, but it does get the install the build dependencies, which will make building
from source easier.
8 Chapter 2. Installing",0.0066568851470947,"Matplotlib, Release 2.0.2
tk 8.3 or later, not 8.6.0 or 8.6.1 The TCL/Tk widgets library used by the TkAgg backend.
Versions 8.6.0 and 8.6.1 are known to have issues that may result in segfaults when closing multiple
windows in the wrong order.
pyqt 4.4 or later The Qt4 widgets library python wrappers for the Qt4Agg backend
pygtk 2.4 or later The python wrappers for the GTK widgets library for use with the GTK or GTKAgg
backend
wxpython 2.8 or later The python wrappers for the wx widgets library for use with the WX or WXAgg
backend
Optional external programs
ﬀmpeg/avconv or mencoder Required for the animation module to be save out put to movie formats.
ImageMagick Required for the animation module to be able to save to animated gif.
Optional dependencies
Pillow If Pillow is installed, matplotlib can read and write a larger selection of image ﬁle formats.
pkg-conﬁg A tool used to ﬁnd required non-python libraries. This is not strictly required, but can make
installation go more smoothly if the libraries and headers are not in the expected locations.
Required libraries that ship with matplotlib
agg 2.4 The antigrain C++ rendering engine. matplotlib links against the agg template source statically, so
it will not aﬀect anything on your system outside of matplotlib.
qhull 2012.1 A library for computing Delaunay triangulations.
ttconv truetype font utility
2.2.2 Building on Linux
It is easiest to use your system package manager to install the dependencies.
If you are on Debian/Ubuntu, you can get all the dependencies required to build matplotlib with:
sudo apt-get build-dep python-matplotlib
If you are on Fedora/RedHat, you can get all the dependencies required to build matplotlib by ﬁrst installing
yum-builddep and then running:
su -c ""yum-builddep python-matplotlib""
This does not build matplotlib, but it does get the install the build dependencies, which will make building
from source easier.
8
Chapter 2. Installing
",0.0018203258514404,"Matplotlib, Release 2.0.2
tk 8.3 or later, not 8.6.0 or 8.6.1 The TCL/Tk widgets library used by the TkAgg backend.
Versions 8.6.0 and 8.6.1 are known to have issues that may result in segfaults when closing multiple
windows in the wrong order.
pyqt 4.4 or later The Qt4 widgets library python wrappers for the Qt4Agg backend
pygtk 2.4 or later The python wrappers for the GTK widgets library for use with the GTK or GTKAgg
backend
wxpython 2.8 or later The python wrappers for the wx widgets library for use with the WX or WXAgg
backend
Optional external programs
ﬀmpeg/avconv or mencoder Required for the animation module to be save out put to movie formats.
ImageMagick Required for the animation module to be able to save to animated gif.
Optional dependencies
Pillow If Pillow is installed, matplotlib can read and write a larger selection of image ﬁle formats.
pkg-conﬁg A tool used to ﬁnd required non-python libraries. This is not strictly required, but can make
installation go more smoothly if the libraries and headers are not in the expected locations.
Required libraries that ship with matplotlib
agg 2.4 The antigrain C++ rendering engine. matplotlib links against the agg template source statically, so
it will not aﬀect anything on your system outside of matplotlib.
qhull 2012.1 A library for computing Delaunay triangulations.
ttconv truetype font utility
2.2.2 Building on Linux
It is easiest to use your system package manager to install the dependencies.
If you are on Debian/Ubuntu, you can get all the dependencies required to build matplotlib with:
sudo apt-get build-dep python-matplotlib
If you are on Fedora/RedHat, you can get all the dependencies required to build matplotlib by ﬁrst installing
yum-builddepand then running:
su -c ""yum-builddep python-matplotlib""
This does not build matplotlib, but it does get the install the build dependencies, which will make building
from source easier.
8 Chapter 2. Installing",0.0081129074096679,"1>
6
Sample PDF Document
Robert Maron
Grzegorz Grudzi  ́nski
February 20, 1999
"
72,16.0,matplotlib_1-21_pdf.pdf ~ 16,"Matplotlib, Release 2.0.2
2.2.3 Building on OSX
The build situation on OSX is complicated by the various places one can get the libpng and freetype re-
quirements (darwinports, ﬁnk, /usr/X11R6) and the di ﬀerent architectures (e.g., x86, ppc, universal) and
the diﬀerent OSX version (e.g., 10.4 and 10.5). We recommend that you build the way we do for the OSX
release: get the source from the tarball or the git repository and follow the instruction in README.osx.
2.2.4 Building on Windows
The Python shipped from https://www.python.org is compiled with Visual Studio 2008 for versions before
3.3, Visual Studio 2010 for 3.3 and 3.4, and Visual Studio 2015 for 3.5 and 3.6. Python extensions are
recommended to be compiled with the same compiler.
Since there is no canonical Windows package manager, the methods for building freetype, zlib, and libpng
from source code are documented as a build script at matplotlib-winbuild.
2.2. Installing from source 9",0.0035691261291503,"Matplotlib, Release 2.0.2
2.2.3 Building on OSX
The build situation on OSX is complicated by the various places one can get the libpng and freetype re-
quirements (darwinports, ﬁnk, /usr/X11R6) and the diﬀerent architectures (e.g., x86, ppc, universal) and
the diﬀerent OSX version (e.g., 10.4 and 10.5). We recommend that you build the way we do for the OSX
release: get the source from the tarball or the git repository and follow the instruction in README.osx.
2.2.4 Building on Windows
The Python shipped from https://www.python.org is compiled with Visual Studio 2008 for versions before
3.3, Visual Studio 2010 for 3.3 and 3.4, and Visual Studio 2015 for 3.5 and 3.6. Python extensions are
recommended to be compiled with the same compiler.
Since there is no canonical Windows package manager, the methods for building freetype, zlib, and libpng
from source code are documented as a build script at matplotlib-winbuild.
2.2. Installing from source
9
",0.0009820461273193,"Matplotlib, Release 2.0.2
2.2.3 Building on OSX
The build situation on OSX is complicated by the various places one can get the libpng and freetype re-
quirements (darwinports, ﬁnk, /usr/X11R6) and the di ﬀerent architectures (e.g., x86, ppc, universal) and
the diﬀerent OSX version (e.g., 10.4 and 10.5). We recommend that you build the way we do for the OSX
release: get the source from the tarball or the git repository and follow the instruction in README.osx.
2.2.4 Building on Windows
The Python shipped from https://www.python.org is compiled with Visual Studio 2008 for versions before
3.3, Visual Studio 2010 for 3.3 and 3.4, and Visual Studio 2015 for 3.5 and 3.6. Python extensions are
recommended to be compiled with the same compiler.
Since there is no canonical Windows package manager, the methods for building freetype, zlib, and libpng
from source code are documented as a build script at matplotlib-winbuild.
2.2. Installing from source 9",0.0030610561370849,"2>
2
"
73,17.0,matplotlib_1-21_pdf.pdf ~ 17,"Matplotlib, Release 2.0.2
10 Chapter 2. Installing",0.0004060268402099,"Matplotlib, Release 2.0.2
10
Chapter 2. Installing
",0.0001180171966552,"Matplotlib, Release 2.0.2
10 Chapter 2. Installing",0.0003426074981689,"3>
Contents
1 Template 5
1.1 How to compile a .tex file to a .pdf file . . . . . . . . . . . . . 5
1.1.1 Tools . . . . . . . . . . . . . . . . . . . . . . . . . . . . 5
1.1.2 How to use the tools . . . . . . . . . . . . . . . . . . . . 5
1.2 How to write a document . . . . . . . . . . . . . . . . . . . . . . 6
1.2.1 The main document . . . . . . . . . . . . . . . . . . . . . 6
1.2.2 Chapters . . . . . . . . . . . . . . . . . . . . . . . . . . 6
1.2.3 Spell-checking . . . . . . . . . . . . . . . . . . . . . . . 6
1.3 LATEX and pdfLATEX capabilities . . . . . . . . . . . . . . . . . . . 7
1.3.1 Overview . . . . . . . . . . . . . . . . . . . . . . . . . . 7
1.3.2 LATEX . . . . . . . . . . . . . . . . . . . . . . . . . . . . 7
1.3.3 pdfLATEX . . . . . . . . . . . . . . . . . . . . . . . . . . 7
1.3.4 Examples . . . . . . . . . . . . . . . . . . . . . . . . . . 7
3
"
74,18.0,matplotlib_1-21_pdf.pdf ~ 18,"CHAPTER
THREE
TUTORIALS
3.1 Introductory
3.1.1 Pyplot tutorial
matplotlib.pyplot is a collection of command style functions that make matplotlib work like MATLAB.
Each pyplotfunction makes some change to a ﬁgure: e.g., creates a ﬁgure, creates a plotting area in a ﬁgure,
plots some lines in a plotting area, decorates the plot with labels, etc. Inmatplotlib.pyplot various states
are preserved across function calls, so that it keeps track of things like the current ﬁgure and plotting area,
and the plotting functions are directed to the current axes (please note that “axes” here and in most places in
the documentation refers to the axes part of a ﬁgure and not the strict mathematical term for more than one
axis).
import matplotlib.pyplot as plt
plt.plot([1,2,3,4])
plt.ylabel('some numbers')
plt.show()
11",0.0050811767578125,"CHAPTER
THREE
TUTORIALS
3.1 Introductory
3.1.1 Pyplot tutorial
matplotlib.pyplot is a collection of command style functions that make matplotlib work like MATLAB.
Each pyplot function makes some change to a ﬁgure: e.g., creates a ﬁgure, creates a plotting area in a ﬁgure,
plots some lines in a plotting area, decorates the plot with labels, etc. In matplotlib.pyplot various states
are preserved across function calls, so that it keeps track of things like the current ﬁgure and plotting area,
and the plotting functions are directed to the current axes (please note that “axes” here and in most places in
the documentation refers to the axes part of a ﬁgure and not the strict mathematical term for more than one
axis).
import matplotlib.pyplot as plt
plt.plot([1,2,3,4])
plt.ylabel('some numbers')
plt.show()
11
",0.0011200904846191,"CHAPTER
THREE
TUTORIALS
3.1 Introductory
3.1.1 Pyplot tutorial
matplotlib.pyplot is a collection of command style functions that make matplotlib work like MATLAB.
Each pyplotfunction makes some change to a ﬁgure: e.g., creates a ﬁgure, creates a plotting area in a ﬁgure,
plots some lines in a plotting area, decorates the plot with labels, etc. Inmatplotlib.pyplot various states
are preserved across function calls, so that it keeps track of things like the current ﬁgure and plotting area,
and the plotting functions are directed to the current axes (please note that “axes” here and in most places in
the documentation refers to the axes part of a ﬁgure and not the strict mathematical term for more than one
axis).
import matplotlib.pyplot as plt
plt.plot([1,2,3,4])
plt.ylabel('some numbers')
plt.show()
11",0.0049121379852294,"4>
4 CONTENTS
"
75,19.0,matplotlib_1-21_pdf.pdf ~ 19,"Matplotlib, Release 2.0.2
0.0 0.5 1.0 1.5 2.0 2.5 3.0
1.0
1.5
2.0
2.5
3.0
3.5
4.0some numbers
You may be wondering why the x-axis ranges from 0-3 and the y-axis from 1-4. If you provide a single
list or array to the plot() command, matplotlib assumes it is a sequence of y values, and automatically
generates the x values for you. Since python ranges start with 0, the default x vector has the same length as
y but starts with 0. Hence the x data are [0,1,2,3].
plot() is a versatile command, and will take an arbitrary number of arguments. For example, to plot x
versus y, you can issue the command:
plt.plot([1, 2, 3, 4], [1, 4, 9, 16])
For every x, y pair of arguments, there is an optional third argument which is the format string that indicates
the color and line type of the plot. The letters and symbols of the format string are from MATLAB, and you
concatenate a color string with a line style string. The default format string is ‘b-‘, which is a solid blue line.
For example, to plot the above with red circles, you would issue
import matplotlib.pyplot as plt
plt.plot([1,2,3,4], [1,4,9,16], 'ro')
plt.axis([0, 6, 0, 20])
plt.show()
12 Chapter 3. Tutorials",0.0073280334472656,"Matplotlib, Release 2.0.2
0.0
0.5
1.0
1.5
2.0
2.5
3.0
1.0
1.5
2.0
2.5
3.0
3.5
4.0
some numbers
You may be wondering why the x-axis ranges from 0-3 and the y-axis from 1-4. If you provide a single
list or array to the plot() command, matplotlib assumes it is a sequence of y values, and automatically
generates the x values for you. Since python ranges start with 0, the default x vector has the same length as
y but starts with 0. Hence the x data are [0,1,2,3].
plot() is a versatile command, and will take an arbitrary number of arguments. For example, to plot x
versus y, you can issue the command:
plt.plot([1, 2, 3, 4], [1, 4, 9, 16])
For every x, y pair of arguments, there is an optional third argument which is the format string that indicates
the color and line type of the plot. The letters and symbols of the format string are from MATLAB, and you
concatenate a color string with a line style string. The default format string is ‘b-‘, which is a solid blue line.
For example, to plot the above with red circles, you would issue
import matplotlib.pyplot as plt
plt.plot([1,2,3,4], [1,4,9,16], 'ro')
plt.axis([0, 6, 0, 20])
plt.show()
12
Chapter 3. Tutorials
",0.0014421939849853,"Matplotlib, Release 2.0.2
0.0 0.5 1.0 1.5 2.0 2.5 3.0
1.0
1.5
2.0
2.5
3.0
3.5
4.0some numbers
You may be wondering why the x-axis ranges from 0-3 and the y-axis from 1-4. If you provide a single
list or array to the plot() command, matplotlib assumes it is a sequence of y values, and automatically
generates the x values for you. Since python ranges start with 0, the default x vector has the same length as
y but starts with 0. Hence the x data are [0,1,2,3].
plot() is a versatile command, and will take an arbitrary number of arguments. For example, to plot x
versus y, you can issue the command:
plt.plot([1, 2, 3, 4], [1, 4, 9, 16])
For every x, y pair of arguments, there is an optional third argument which is the format string that indicates
the color and line type of the plot. The letters and symbols of the format string are from MATLAB, and you
concatenate a color string with a line style string. The default format string is ‘b-‘, which is a solid blue line.
For example, to plot the above with red circles, you would issue
import matplotlib.pyplot as plt
plt.plot([1,2,3,4], [1,4,9,16], 'ro')
plt.axis([0, 6, 0, 20])
plt.show()
12 Chapter 3. Tutorials",0.0066769123077392,"5>
Chapter 1
Template
1.1 How to compile a .tex file to a .pdf file
1.1.1 Tools
To process the files you (may) need:
• pdflatex (for example from tetex package ≥0.9-6, which you can
get from Red Hat 5.2);
• acroread (a PDF viewer, available from http://www.adobe.com/);
• ghostscript ≥5.10 (for example from Red Hat Contrib) and ghostview
or gv (from RedHat Linux);
• efax package could be useful, if you plan to fax documents.
1.1.2 How to use the tools
Follow these steps:
1. put all source .tex files in one directory, then chdir to the directory (or put
some of them in the LATEXsearch path — if you know how to do this);
2. run “pdflatex file.tex” on the main file of the document three times
(three — to prepare valid table of contents);
3. to see or print the result use acroread (unfortunately some versions of
acroread may produce PostScript which is too complex), or
5
"
76,0.0,chess_pdf.pdf ~ 0,"Author: Prateek   
 
  1 
 
 
       Checkmate Through Time: The Global 
Conquest of Chess 
From Chaturanga to Chess: The Birth of a Legend ................................ ...........................  2 
The European Evolution: Pawns Get a Boost ................................ ................................ ... 2 
Coffee House Chess: The Game Goes Public ................................ ..............................  2 
The Birth of Competitive Chess ................................ ................................ .....................  3 
Chess in the Modern Era: From Grandmasters to Computers ................................ .......... 3 
 
  
",0.0056958198547363,"Author: Prateek 
 
 
 
1
 
 
  Checkmate Through Time: The Global 
Conquest of Chess 
From Chaturanga to Chess: The Birth of a Legend ........................................................... 2 
The European Evolution: Pawns Get a Boost ................................................................... 2 
Coffee House Chess: The Game Goes Public .............................................................. 2 
The Birth of Competitive Chess ..................................................................................... 3 
Chess in the Modern Era: From Grandmasters to Computers .......................................... 3 
 
 
 
",0.0396201610565185,"Author: Prateek   
 
  1 
 
 
       Checkmate Through Time: The Global 
Conquest of Chess 
From Chaturanga to Chess: The Birth of a Legend ................................ ...........................  2 
The European Evolution: Pawns Get a Boost ................................ ................................ ... 2 
Coffee House Chess: The Game Goes Public ................................ ..............................  2 
The Birth of Competitive Chess ................................ ................................ .....................  3 
Chess in the Modern Era: From Grandmasters to Computers ................................ .......... 3 
 
  
",0.0062630176544189,"6>
6 CHAPTER 1. TEMPLATE
4. run ghostscript: “gv file.pdf” to display or:
“gs -dNOPAUSE -sDEVICE=pswrite -q -dBATCH -sOutputFile=file.ps file.pdf”
to produce a PostScript file;
5. run “fax send phone-number file.ps” as root to send a fax, or — if you
know how to do this — modify the fax script to be able to fax .pdf files directly
(you have to insert “|%PDF*” somewhere. . . ).
1.2 How to write a document
1.2.1 The main document
Choose the name of the document, say document. Copy template.tex to
document.tex, then edit it, change the title, the authors and set proper in-
clude(s) for all the chapters.
1.2.2 Chapters
Each chapter should be included in the main document as a separate file. You can
choose any name for the file, but we suggest adding a suffix to the name of the
main file. For our example we use the file name document_chapter1.tex.
First, copy template_chapter.tex to document_chapter1.tex
and add the line
\include{document_chapter1}
in the document.tex, then edit document_chapter1.tex, change the
chapter title and edit the body of the chapter appropriately.
1.2.3 Spell-checking
Do use a spell-checker, please!
You may also want to check grammar, style and so on. Actually you should
do it (if you have enough spare time). But you must check spelling!
You can use the ispell package for this, from within emacs, or from the
command line:
ispell -t document_chapter1.tex
"
77,1.0,chess_pdf.pdf ~ 1,"Author: Prateek   
 
  2 
 
Chess, the game of kings and queens, has captivated minds for centuries. From its 
humble beginnings in ancient India to its current status as a global phenomenon, 
chess has evolved into a complex and fascinating pursuit. Let's embark on a journey 
through time to explore the development of this royal game. 
From Chaturanga to Chess: The Birth of a Legend 
Our story begins in India, around 600 CE, with a game called chaturanga. This early ancestor of 
chess represented the four divisions of the Indian military: infantry, cavalry, elephants, and 
chariots. As trade routes expanded, so did the reach of this intriguing game. Chaturanga spread 
to Persia, where it underwent its first transformation. The Persians modified the pieces and 
rules, developing it into a game called Shatranj. From Persia, the game continued its journey, 
carried by traders and conquerors alike. 
The European Evolution: Pawns Get a Boost 
By the 10th century, chess had made its way to Europe through North Africa and the expanding 
Arabian empire. However, it wasn't until around 1200 CE that the game underwent dramatic 
changes, shaping it into the chess we know today. In Italy and Spain, innovative players 
introduced exciting new rules: 
• Pawns gained the ability to move two squares on their first move 
• Bishops became long-range pieces, dominating diagonals 
• Queens transformed into the most powerful piece on the board 
These changes injected new life into the game, setting the stage for centuries of strategic 
exploration. 
Coffee House Chess: The Game Goes Public 
During the 18th century, the chess world shifted its focus to Western Europe. Cities like London 
and Paris became hubs of chess activity, with matches played in bustling coffee houses. This 
period saw chess transition from a pastime of the nobility to a game enjoyed by a broader 
audience. ",0.0111701488494873,"Author: Prateek 
 
 
 
2
 
Chess, the game of kings and queens, has captivated minds for centuries. From its 
humble beginnings in ancient India to its current status as a global phenomenon, 
chess has evolved into a complex and fascinating pursuit. Let's embark on a journey 
through time to explore the development of this royal game. 
From Chaturanga to Chess: The Birth of a Legend 
Our story begins in India, around 600 CE, with a game called chaturanga. This early ancestor of 
chess represented the four divisions of the Indian military: infantry, cavalry, elephants, and 
chariots. As trade routes expanded, so did the reach of this intriguing game. Chaturanga spread 
to Persia, where it underwent its first transformation. The Persians modified the pieces and 
rules, developing it into a game called Shatranj. From Persia, the game continued its journey, 
carried by traders and conquerors alike. 
The European Evolution: Pawns Get a Boost 
By the 10th century, chess had made its way to Europe through North Africa and the expanding 
Arabian empire. However, it wasn't until around 1200 CE that the game underwent dramatic 
changes, shaping it into the chess we know today. In Italy and Spain, innovative players 
introduced exciting new rules: 
• Pawns gained the ability to move two squares on their first move 
• Bishops became long-range pieces, dominating diagonals 
• Queens transformed into the most powerful piece on the board 
These changes injected new life into the game, setting the stage for centuries of strategic 
exploration. 
Coffee House Chess: The Game Goes Public 
During the 18th century, the chess world shifted its focus to Western Europe. Cities like London 
and Paris became hubs of chess activity, with matches played in bustling coffee houses. This 
period saw chess transition from a pastime of the nobility to a game enjoyed by a broader 
audience. 
",0.00462007522583,"Author: Prateek   
 
  2 
 
Chess, the game of kings and queens, has captivated minds for centuries. From its 
humble beginnings in ancient India to its current status as a global phenomenon, 
chess has evolved into a complex and fascinating pursuit. Let's embark on a journey 
through time to explore the development of this royal game. 
From Chaturanga to Chess: The Birth of a Legend 
Our story begins in India, around 600 CE, with a game called chaturanga. This early ancestor of 
chess represented the four divisions of the Indian military: infantry, cavalry, elephants, and 
chariots. As trade routes expanded, so did the reach of this intriguing game. Chaturanga spread 
to Persia, where it underwent its first transformation. The Persians modified the pieces and 
rules, developing it into a game called Shatranj. From Persia, the game continued its journey, 
carried by traders and conquerors alike. 
The European Evolution: Pawns Get a Boost 
By the 10th century, chess had made its way to Europe through North Africa and the expanding 
Arabian empire. However, it wasn't until around 1200 CE that the game underwent dramatic 
changes, shaping it into the chess we know today. In Italy and Spain, innovative players 
introduced exciting new rules: 
• Pawns gained the ability to move two squares on their first move 
• Bishops became long-range pieces, dominating diagonals 
• Queens transformed into the most powerful piece on the board 
These changes injected new life into the game, setting the stage for centuries of strategic 
exploration. 
Coffee House Chess: The Game Goes Public 
During the 18th century, the chess world shifted its focus to Western Europe. Cities like London 
and Paris became hubs of chess activity, with matches played in bustling coffee houses. This 
period saw chess transition from a pastime of the nobility to a game enjoyed by a broader 
audience. ",0.0109038352966308,"7>
1.3. LATEX AND PDFLATEX CAPABILITIES 7
1.3 LATEX and pdfLATEX capabilities
1.3.1 Overview
First you edit your source .tex file. In LATEX you compile it using the latex
command to a .dvi file (which stands for device-independent). The .dvi file
can be converted to any device-dependent format you like using an appropriate
driver, for example dvips.
When producing .pdf files you should use pdflatex, which produces di-
rectly .pdf files out of .tex sources. Note that in the .tex file you may need
to use some PDF specific packages.
For viewing .tex files use your favourite text editor, for viewing .dvi files
under X Window System use xdvi command, .ps files can be viewed with gv
(or ghostview) and .pdf files with acroread, gv or xpdf.
1.3.2 LATEX
A lot of examples can be found in this document.
You should also print
• doc/latex/general/latex2e.dvi and
• doc/latex/general/lshort2e.dvi
from your tetex distribution (usually in
• /usr/share/texmf or
• /usr/lib/texmf/texmf).
1.3.3 pdfLATEX
Consult doc/pdftex/manual.pdf from your tetex distribution for more
details. Very useful informations can be found in the hyperref and graphics
package manuals:
• doc/latex/hyperref/manual.pdf and
• doc/latex/graphics/grfguide.dvi.
1.3.4 Examples
References
MIMUW
"
78,2.0,chess_pdf.pdf ~ 2,"Author: Prateek   
 
  3 
 
The Birth of Competitive Chess 
The 19th century marked a turning point for chess as it evolved into a competitive sport: 
• 1851: The first chess tournament was held in London, won by German player Adolf 
Anderssen 
• 1886: The first official World Chess Championship took place 
As chess gained popularity, the need for standardization grew. In 1924, the World Chess 
Federation (FIDE) was founded in Paris, taking responsibility for organizing international 
competitions and awarding titles. 
Chess in the Modern Era: From Grandmasters to 
Computers 
The 20th century saw chess reach new heights of complexity and popularity: 
• 1914: Czar Nicholas II of Russia immortalized the term ""Grandmaster"" 
• 1950s-1980s: Soviet players dominated the chess world 
• 1997: IBM's Deep Blue defeated world champion Garry Kasparov, marking a milestone 
in computer chess 
Today, chess continues to evolve. Online platforms have made the game more accessible than 
ever, allowing players from around the world to compete and learn together. The royal game 
that began in India 1,500 years ago has truly conquered the world, with FIDE reporting 172 
member countries. Whether you're a beginner or a seasoned player, the rich history of chess 
adds depth to every move you make on the board. So next time you sit down for a game, 
remember you're not just playing chess – you're participating in a centuries-old tradition of 
strategy, skill, and intellectual combat. 
 ",0.009916067123413,"Author: Prateek 
 
 
 
3
 
The Birth of Competitive Chess 
The 19th century marked a turning point for chess as it evolved into a competitive sport: 
• 1851: The first chess tournament was held in London, won by German player Adolf 
Anderssen 
• 1886: The first official World Chess Championship took place 
As chess gained popularity, the need for standardization grew. In 1924, the World Chess 
Federation (FIDE) was founded in Paris, taking responsibility for organizing international 
competitions and awarding titles. 
Chess in the Modern Era: From Grandmasters to 
Computers 
The 20th century saw chess reach new heights of complexity and popularity: 
• 1914: Czar Nicholas II of Russia immortalized the term ""Grandmaster"" 
• 1950s-1980s: Soviet players dominated the chess world 
• 1997: IBM's Deep Blue defeated world champion Garry Kasparov, marking a milestone 
in computer chess 
Today, chess continues to evolve. Online platforms have made the game more accessible than 
ever, allowing players from around the world to compete and learn together. The royal game 
that began in India 1,500 years ago has truly conquered the world, with FIDE reporting 172 
member countries. Whether you're a beginner or a seasoned player, the rich history of chess 
adds depth to every move you make on the board. So next time you sit down for a game, 
remember you're not just playing chess – you're participating in a centuries-old tradition of 
strategy, skill, and intellectual combat. 
 
",0.002810001373291,"Author: Prateek   
 
  3 
 
The Birth of Competitive Chess 
The 19th century marked a turning point for chess as it evolved into a competitive sport: 
• 1851: The first chess tournament was held in London, won by German player Adolf 
Anderssen 
• 1886: The first official World Chess Championship took place 
As chess gained popularity, the need for standardization grew. In 1924, the World Chess 
Federation (FIDE) was founded in Paris, taking responsibility for organizing international 
competitions and awarding titles. 
Chess in the Modern Era: From Grandmasters to 
Computers 
The 20th century saw chess reach new heights of complexity and popularity: 
• 1914: Czar Nicholas II of Russia immortalized the term ""Grandmaster"" 
• 1950s-1980s: Soviet players dominated the chess world 
• 1997: IBM's Deep Blue defeated world champion Garry Kasparov, marking a milestone 
in computer chess 
Today, chess continues to evolve. Online platforms have made the game more accessible than 
ever, allowing players from around the world to compete and learn together. The royal game 
that began in India 1,500 years ago has truly conquered the world, with FIDE reporting 172 
member countries. Whether you're a beginner or a seasoned player, the rich history of chess 
adds depth to every move you make on the board. So next time you sit down for a game, 
remember you're not just playing chess – you're participating in a centuries-old tradition of 
strategy, skill, and intellectual combat. 
 ",0.0096468925476074,"8>
8 CHAPTER 1. TEMPLATE
Hyperlinks
This is a target.
And this is a link.
Dashes, etc.
There are three kinds of horizontal dash:
• - (use inside words; for example “home-page”, “X-rated”)
• – (use this one between numbers; for example “pages 2–22”)
• — (use this one as a sentence separator — like here)
National characters
• ó, é, í, . . .
• è, à, ì, . . .
• ô, ê, . . .
• õ, ñ, . . .
• ö, ë, . . .
•  ̇z
•  ̨a,  ̨e
• ł, ø, ß
There are other ways to do this, see the documentation for inputenc pack-
age.
Reserved characters
Some characters have some special meaning, thus cannot be entered in the usual
way.
• $ & % # _ { }
• \
•  ̃ ˆ
"
79,0.0,sleep_pdf.pdf ~ 0," 
Sleep Deprivation: Your Body's Silent 
Alarm
 
What Happens When You Don't Sleep Enough? ................................ .........................  2 
Your Brain Goes Fuzzy ................................ ................................ ..........................  2 
Your Emotions Go Crazy ................................ ................................ .......................  2 
Your Body Starts Complaining ................................ ................................ ............... 3 
Real-World Impact of Sleep Deprivation ................................ ................................ .... 3 
At Work or School ................................ ................................ ................................  3 
In Your Personal Life ................................ ................................ .............................  3 
On the Road................................ ................................ ................................ ......... 4 
Your Appearance ................................ ................................ ................................ . 4 
Quick Sleep Rescue Tips ................................ ................................ ..........................  4 
Bottom Line: Sleep is Not a Luxury ................................ ................................ ............ 5 
 
 
 
 
 
 
 
 
 
 
 
",0.0091352462768554," 
Sleep Deprivation: Your Body's Silent 
Alarm
 
What Happens When You Don't Sleep Enough? ......................................................... 2 
Your Brain Goes Fuzzy .......................................................................................... 2 
Your Emotions Go Crazy ....................................................................................... 2 
Your Body Starts Complaining ............................................................................... 3 
Real-World Impact of Sleep Deprivation .................................................................... 3 
At Work or School ................................................................................................ 3 
In Your Personal Life ............................................................................................. 3 
On the Road......................................................................................................... 4 
Your Appearance ................................................................................................. 4 
Quick Sleep Rescue Tips .......................................................................................... 4 
Bottom Line: Sleep is Not a Luxury ............................................................................ 5 
 
 
 
 
 
 
 
 
 
 
 
",0.0030109882354736," 
Sleep Deprivation: Your Body's Silent 
Alarm
 
What Happens When You Don't Sleep Enough? ................................ .........................  2 
Your Brain Goes Fuzzy ................................ ................................ ..........................  2 
Your Emotions Go Crazy ................................ ................................ .......................  2 
Your Body Starts Complaining ................................ ................................ ............... 3 
Real-World Impact of Sleep Deprivation ................................ ................................ .... 3 
At Work or School ................................ ................................ ................................  3 
In Your Personal Life ................................ ................................ .............................  3 
On the Road................................ ................................ ................................ ......... 4 
Your Appearance ................................ ................................ ................................ . 4 
Quick Sleep Rescue Tips ................................ ................................ ..........................  4 
Bottom Line: Sleep is Not a Luxury ................................ ................................ ............ 5 
 
 
 
 
 
 
 
 
 
 
 
",0.0074141025543212,"9>
1.3. LATEX AND PDFLATEX CAPABILITIES 9
Math
• 12, 12n, . . .
• i1, i2n, . . .
• 1
2 , 2n
2−3 , . . .
• α, β, γ, Ω, . . .
• →, ⇒, ≥, 6=, ∈, ?, . . .
• √2, . . .
• 2 + 2, . . .
For more examples and symbols see chapter 3 of lshort2e.dvi.
Fonts
• Roman
• Emphasis
• Medium weight — the default
• Boldface
• Upright
• Slanted
• Sans serif
• SMALL CAPS
• Typewriter
• and sizes:
– tiny
– scriptsize
– footnotesize
– small
– normalsize
"
80,1.0,sleep_pdf.pdf ~ 1," 
 
 
 
Imagine your body as a smartphone. Just like a phone needs charging, your body needs sleep 
to recharge and function properly. When you don't get enough sleep, everything starts to 
malfunction. Let's explore what happens when we don't get enough sleep and how it affects 
our daily lives. 
What Happens When You Don't Sleep Enough? 
Your Brain Goes Fuzzy 
When you don't get enough sleep, your brain doesn't work as well as it should. It's like 
trying to use a computer with a dying battery. Here's what happens: 
• Thinking becomes difficult: Simple tasks feel much harder. 
• Memory gets weak: You might forget important things. 
• Concentration drops dramatically: Focusing on anything becomes a challenge. 
• You feel like you're walking through fog: Everything seems unclear and confusing. 
For example, if you're a student trying to study after a sleepless night, you might read the 
same paragraph over and over without understanding it. Or if you're at work, you might 
make silly mistakes that you normally wouldn’t. 
Your Emotions Go Crazy 
Lack of sleep doesn't just affect your thinking - it also messes with your feelings. Your 
emotions can become like a roller coaster: 
• You become super irritable: Little things that normally wouldn't bother you suddenly 
feel very annoying. 
• Small problems feel like huge mountains: A minor setback might feel like the end of 
the world. 
• Stress feels overwhelming: Your ability to handle pressure decreases. 
• You might feel sad or anxious more often: Sleep deprivation can worsen mood 
disorders. ",0.010059118270874," 
 
 
 
Imagine your body as a smartphone. Just like a phone needs charging, your body needs sleep 
to recharge and function properly. When you don't get enough sleep, everything starts to 
malfunction. Let's explore what happens when we don't get enough sleep and how it affects 
our daily lives. 
What Happens When You Don't Sleep Enough? 
Your Brain Goes Fuzzy 
When you don't get enough sleep, your brain doesn't work as well as it should. It's like 
trying to use a computer with a dying battery. Here's what happens: 
• Thinking becomes difficult: Simple tasks feel much harder. 
• Memory gets weak: You might forget important things. 
• Concentration drops dramatically: Focusing on anything becomes a challenge. 
• You feel like you're walking through fog: Everything seems unclear and confusing. 
For example, if you're a student trying to study after a sleepless night, you might read the 
same paragraph over and over without understanding it. Or if you're at work, you might 
make silly mistakes that you normally wouldn’t. 
Your Emotions Go Crazy 
Lack of sleep doesn't just affect your thinking - it also messes with your feelings. Your 
emotions can become like a roller coaster: 
• You become super irritable: Little things that normally wouldn't bother you suddenly 
feel very annoying. 
• Small problems feel like huge mountains: A minor setback might feel like the end of 
the world. 
• Stress feels overwhelming: Your ability to handle pressure decreases. 
• You might feel sad or anxious more often: Sleep deprivation can worsen mood 
disorders. 
",0.0048158168792724," 
 
 
 
Imagine your body as a smartphone. Just like a phone needs charging, your body needs sleep 
to recharge and function properly. When you don't get enough sleep, everything starts to 
malfunction. Let's explore what happens when we don't get enough sleep and how it affects 
our daily lives. 
What Happens When You Don't Sleep Enough? 
Your Brain Goes Fuzzy 
When you don't get enough sleep, your brain doesn't work as well as it should. It's like 
trying to use a computer with a dying battery. Here's what happens: 
• Thinking becomes difficult: Simple tasks feel much harder. 
• Memory gets weak: You might forget important things. 
• Concentration drops dramatically: Focusing on anything becomes a challenge. 
• You feel like you're walking through fog: Everything seems unclear and confusing. 
For example, if you're a student trying to study after a sleepless night, you might read the 
same paragraph over and over without understanding it. Or if you're at work, you might 
make silly mistakes that you normally wouldn’t. 
Your Emotions Go Crazy 
Lack of sleep doesn't just affect your thinking - it also messes with your feelings. Your 
emotions can become like a roller coaster: 
• You become super irritable: Little things that normally wouldn't bother you suddenly 
feel very annoying. 
• Small problems feel like huge mountains: A minor setback might feel like the end of 
the world. 
• Stress feels overwhelming: Your ability to handle pressure decreases. 
• You might feel sad or anxious more often: Sleep deprivation can worsen mood 
disorders. ",0.0103349685668945,"10>
10 CHAPTER 1. TEMPLATE
– large
– Large
– LARGE
– huge
– Huge"
81,2.0,sleep_pdf.pdf ~ 2,"Imagine snapping at your friend because they're chewing too loudly, or bursting into tears 
because you can't find your keys. These are examples of how lack of sleep can affect your 
emotions. 
Your Body Starts Complaining 
Your body needs sleep to repair and maintain itself. When you don't get enough, your body 
starts to show signs of wear and tear: 
• You feel tired all the time: Even after resting, you still feel exhausted. 
• Your immune system weakens: You might catch colds more easily. 
• Weight gain becomes easier: Lack of sleep messes with hormones that control 
hunger. 
• Risk of getting sick increases: Over time, sleep deprivation can lead to serious health 
problems. 
It's like trying to drive a car that hasn't had an oil change in years - eventually, things start to 
break down. 
Real-World Impact of Sleep Deprivation 
Sleep deprivation is like a sneaky thief that steals your health, happiness, and productivity. 
Here's how it can affect your daily life: 
At Work or School 
• Reduced productivity: You might take longer to finish tasks or make more mistakes. 
• Difficulty learning: New information doesn't stick as well when you're tired. 
• Poor decision-making: Lack of sleep can lead to risky or unwise choices. 
For instance, you might miss an important deadline at work because you couldn't focus, or 
fail a test at school because you couldn't remember what you studied. 
In Your Personal Life 
• Relationship problems: Being cranky all the time can strain your friendships and 
family ties. 
• Less enjoyment of activities: Your favorite hobbies might not seem as fun when 
you're exhausted. 
• Social withdrawal: You might skip social events because you're too tired. ",0.0095078945159912,"Imagine snapping at your friend because they're chewing too loudly, or bursting into tears 
because you can't find your keys. These are examples of how lack of sleep can affect your 
emotions. 
Your Body Starts Complaining 
Your body needs sleep to repair and maintain itself. When you don't get enough, your body 
starts to show signs of wear and tear: 
• You feel tired all the time: Even after resting, you still feel exhausted. 
• Your immune system weakens: You might catch colds more easily. 
• Weight gain becomes easier: Lack of sleep messes with hormones that control 
hunger. 
• Risk of getting sick increases: Over time, sleep deprivation can lead to serious health 
problems. 
It's like trying to drive a car that hasn't had an oil change in years - eventually, things start to 
break down. 
Real-World Impact of Sleep Deprivation 
Sleep deprivation is like a sneaky thief that steals your health, happiness, and productivity. 
Here's how it can affect your daily life: 
At Work or School 
• Reduced productivity: You might take longer to finish tasks or make more mistakes. 
• Difficulty learning: New information doesn't stick as well when you're tired. 
• Poor decision-making: Lack of sleep can lead to risky or unwise choices. 
For instance, you might miss an important deadline at work because you couldn't focus, or 
fail a test at school because you couldn't remember what you studied. 
In Your Personal Life 
• Relationship problems: Being cranky all the time can strain your friendships and 
family ties. 
• Less enjoyment of activities: Your favorite hobbies might not seem as fun when 
you're exhausted. 
• Social withdrawal: You might skip social events because you're too tired. 
",0.0016520023345947,"Imagine snapping at your friend because they're chewing too loudly, or bursting into tears 
because you can't find your keys. These are examples of how lack of sleep can affect your 
emotions. 
Your Body Starts Complaining 
Your body needs sleep to repair and maintain itself. When you don't get enough, your body 
starts to show signs of wear and tear: 
• You feel tired all the time: Even after resting, you still feel exhausted. 
• Your immune system weakens: You might catch colds more easily. 
• Weight gain becomes easier: Lack of sleep messes with hormones that control 
hunger. 
• Risk of getting sick increases: Over time, sleep deprivation can lead to serious health 
problems. 
It's like trying to drive a car that hasn't had an oil change in years - eventually, things start to 
break down. 
Real-World Impact of Sleep Deprivation 
Sleep deprivation is like a sneaky thief that steals your health, happiness, and productivity. 
Here's how it can affect your daily life: 
At Work or School 
• Reduced productivity: You might take longer to finish tasks or make more mistakes. 
• Difficulty learning: New information doesn't stick as well when you're tired. 
• Poor decision-making: Lack of sleep can lead to risky or unwise choices. 
For instance, you might miss an important deadline at work because you couldn't focus, or 
fail a test at school because you couldn't remember what you studied. 
In Your Personal Life 
• Relationship problems: Being cranky all the time can strain your friendships and 
family ties. 
• Less enjoyment of activities: Your favorite hobbies might not seem as fun when 
you're exhausted. 
• Social withdrawal: You might skip social events because you're too tired. ",0.0094640254974365,"<Page1> 
Generative AI: Your New Digital Creative CompanionConnected wire-frame lines and dots 
​​ 

​ 

​ 

What Exactly is Generative AI?____________________________________1
How Does It Actually Work?________________________________________2
Real-World Examples That'll Blow Your Mind________________________________________2
    Art Creation________________________________________2
    Writing Help________________________________________2
    Problem Solving________________________________________2
Cool Things to Know
Potential Concerns (Because Nothing's Perfect)________________________________________3
    The Good________________________________________3
    he Challenging________________________________________3
Who's Using This Magic?________________________________________3
The Future Looks Bright! 🌈________________________________________3
Quick Pro Tips________________________________________3
Want to Get Started?________________________________________3

"
82,3.0,sleep_pdf.pdf ~ 3,"Imagine missing your best friend's birthday party because you're too exhausted, or getting 
into an argument with your partner over something trivial because you're irritable from lack 
of sleep. 
On the Road 
• Increased chance of accidents: Drowsy driving can be as dangerous as drunk driving. 
• Slower reaction times: You might not be able to brake quickly enough to avoid a 
collision. 
It's scary to think about, but many car accidents happen because drivers are too tired to 
focus on the road. 
Your Appearance 
• Premature aging: Lack of sleep can make you look older than you are. 
• Dark circles under eyes: These are a telltale sign of sleep deprivation. 
• Dull skin: Your skin needs sleep to repair itself and look healthy. 
You might notice that after a few nights of poor sleep, you look in the mirror and see a tired, 
older version of yourself staring back. 
Quick Sleep Rescue Tips 
The good news is that you can improve your sleep with some simple changes. Here are 
some easy tips to help you get better rest: 
1. Stick to a sleep schedule: Go to bed and wake up at the same time every day, even 
on weekends. 
2. Create a calm bedroom environment: Keep your room dark, quiet, and cool. 
3. Avoid screens before bedtime: The blue light from phones and computers can 
disrupt your sleep. 
4. Say no to caffeine in the evening: Coffee, tea, and soda can keep you awake if 
consumed too late. 
5. Exercise regularly: Physical activity can help you sleep better, but not too close to 
bedtime. 
6. Relax before bed: Try reading a book, listening to soft music, or doing some gentle 
stretches. 
7. Don't lie in bed awake: If you can't sleep after 20 minutes, get up and do something 
calming until you feel sleepy. 
Remember, these changes might take some time to show effect. Be patient and consistent, 
and you should start seeing improvements in your sleep quality. ",0.011110782623291,"Imagine missing your best friend's birthday party because you're too exhausted, or getting 
into an argument with your partner over something trivial because you're irritable from lack 
of sleep. 
On the Road 
• Increased chance of accidents: Drowsy driving can be as dangerous as drunk driving. 
• Slower reaction times: You might not be able to brake quickly enough to avoid a 
collision. 
It's scary to think about, but many car accidents happen because drivers are too tired to 
focus on the road. 
Your Appearance 
• Premature aging: Lack of sleep can make you look older than you are. 
• Dark circles under eyes: These are a telltale sign of sleep deprivation. 
• Dull skin: Your skin needs sleep to repair itself and look healthy. 
You might notice that after a few nights of poor sleep, you look in the mirror and see a tired, 
older version of yourself staring back. 
Quick Sleep Rescue Tips 
The good news is that you can improve your sleep with some simple changes. Here are 
some easy tips to help you get better rest: 
1. Stick to a sleep schedule: Go to bed and wake up at the same time every day, even 
on weekends. 
2. Create a calm bedroom environment: Keep your room dark, quiet, and cool. 
3. Avoid screens before bedtime: The blue light from phones and computers can 
disrupt your sleep. 
4. Say no to caffeine in the evening: Coffee, tea, and soda can keep you awake if 
consumed too late. 
5. Exercise regularly: Physical activity can help you sleep better, but not too close to 
bedtime. 
6. Relax before bed: Try reading a book, listening to soft music, or doing some gentle 
stretches. 
7. Don't lie in bed awake: If you can't sleep after 20 minutes, get up and do something 
calming until you feel sleepy. 
Remember, these changes might take some time to show effect. Be patient and consistent, 
and you should start seeing improvements in your sleep quality. 
",0.0022761821746826,"Imagine missing your best friend's birthday party because you're too exhausted, or getting 
into an argument with your partner over something trivial because you're irritable from lack 
of sleep. 
On the Road 
• Increased chance of accidents: Drowsy driving can be as dangerous as drunk driving. 
• Slower reaction times: You might not be able to brake quickly enough to avoid a 
collision. 
It's scary to think about, but many car accidents happen because drivers are too tired to 
focus on the road. 
Your Appearance 
• Premature aging: Lack of sleep can make you look older than you are. 
• Dark circles under eyes: These are a telltale sign of sleep deprivation. 
• Dull skin: Your skin needs sleep to repair itself and look healthy. 
You might notice that after a few nights of poor sleep, you look in the mirror and see a tired, 
older version of yourself staring back. 
Quick Sleep Rescue Tips 
The good news is that you can improve your sleep with some simple changes. Here are 
some easy tips to help you get better rest: 
1. Stick to a sleep schedule: Go to bed and wake up at the same time every day, even 
on weekends. 
2. Create a calm bedroom environment: Keep your room dark, quiet, and cool. 
3. Avoid screens before bedtime: The blue light from phones and computers can 
disrupt your sleep. 
4. Say no to caffeine in the evening: Coffee, tea, and soda can keep you awake if 
consumed too late. 
5. Exercise regularly: Physical activity can help you sleep better, but not too close to 
bedtime. 
6. Relax before bed: Try reading a book, listening to soft music, or doing some gentle 
stretches. 
7. Don't lie in bed awake: If you can't sleep after 20 minutes, get up and do something 
calming until you feel sleepy. 
Remember, these changes might take some time to show effect. Be patient and consistent, 
and you should start seeing improvements in your sleep quality. ",0.0102748870849609,"2>
What Exactly is Generative AI? 🤖✨ 

Think of Generative AI like a super-smart digital assistant that can create things from scratch. 
Imagine having a friend who can: 

    Write stories 
    Draw pictures 
    Compose music 
    Write computer code 
    Solve complex problems 
All by just understanding what you want! 

How Does It Actually Work? 
Picture a massive library where an AI has read EVERYTHING. When you ask it to do 
something, it: 

    Understands your request 
    Pulls from its enormous ""knowledge bank"" 
    Creates something totally new 
    It's like having a genius friend who can instantly combine information in unique ways. 

Real-World Examples That'll Blow Your Mind 
Art Creation 
    For example, you can type ""robot playing guitar in a space cafe"" as a prompt 
    AI instantly generates a unique image matching your description 
Writing Help 
    Need a blog post about climate change? 
    AI can draft a complete, coherent article in minutes 
Problem Solving 
    Stuck on a math problem? 
    AI can break it down, explain steps, and show solutions

Cool Things to Know 
🌟 Generative AI learns by: 

    Studying massive amounts of data 
"
83,4.0,sleep_pdf.pdf ~ 4,"Bottom Line: Sleep is Not a Luxury 
In our busy world, it's easy to think of sleep as something we can cut back on to make more 
time for work, socializing, or entertainment. But the truth is, sleep is not a luxury - it's a 
necessity for our health and well-being. Think of sleep as an investment in yourself. When 
you get enough good quality sleep: 
• Your brain works better 
• Your emotions are more stable 
• Your body stays healthier 
• You look and feel younger 
• You're more productive and creative 
• You enjoy life more 
So, the next time you're tempted to stay up late binge-watching your favorite show or 
scrolling through social media, remember: your body needs that sleep. Treat it right, and it 
will thank you with better health, clearer thinking, and a happier mood. Sweet dreams! 
 ",0.0050959587097167,"Bottom Line: Sleep is Not a Luxury 
In our busy world, it's easy to think of sleep as something we can cut back on to make more 
time for work, socializing, or entertainment. But the truth is, sleep is not a luxury - it's a 
necessity for our health and well-being. Think of sleep as an investment in yourself. When 
you get enough good quality sleep: 
• Your brain works better 
• Your emotions are more stable 
• Your body stays healthier 
• You look and feel younger 
• You're more productive and creative 
• You enjoy life more 
So, the next time you're tempted to stay up late binge-watching your favorite show or 
scrolling through social media, remember: your body needs that sleep. Treat it right, and it 
will thank you with better health, clearer thinking, and a happier mood. Sweet dreams! 
 
",0.0010061264038085,"Bottom Line: Sleep is Not a Luxury 
In our busy world, it's easy to think of sleep as something we can cut back on to make more 
time for work, socializing, or entertainment. But the truth is, sleep is not a luxury - it's a 
necessity for our health and well-being. Think of sleep as an investment in yourself. When 
you get enough good quality sleep: 
• Your brain works better 
• Your emotions are more stable 
• Your body stays healthier 
• You look and feel younger 
• You're more productive and creative 
• You enjoy life more 
So, the next time you're tempted to stay up late binge-watching your favorite show or 
scrolling through social media, remember: your body needs that sleep. Treat it right, and it 
will thank you with better health, clearer thinking, and a happier mood. Sweet dreams! 
 ",0.0054268836975097,"3>    
    Recognizing patterns 
    Creating new content based on what it's learned 
🚀 It's NOT just copying - it's CREATING something original! 

Potential Concerns (Because Nothing's Perfect) 
The Good 
    Incredible productivity 
    Endless creativity 
    Solving complex problems quickly 
The Challenging 
    Potential misinformation 
    Copyright questions 
    Ethical use of technology 
Who's Using This Magic? 
    Doctors (diagnosing diseases) 
    Artists (creating new designs)  
    Programmers (writing code) 
    Businesses (solving complex problems) 
    Researchers (exploring new ideas) 

The Future Looks Bright! 🌈 
Generative AI isn't about replacing humans - it's about HELPING humans do amazing things 
faster and more creatively. Think of it like a supercharged creativity and problem-solving 
partner. 

Quick Pro Tips 
Be specific in your requests 
Understand it's a tool, not a replacement for human creativity 
Experiment and have fun! 
Want to Get Started? 
Try free tools like: 
"
84,0.0,matplotlib_81-101_pdf.pdf ~ 0,"Matplotlib, Release 2.0.2
All of this ﬂexibility means that we have the necessary hooks to implement custom handlers for our own
type of legend key.
The simplest example of using custom handlers is to instantiate one of the existingHandlerBase subclasses.
For the sake of simplicity, let’s choosematplotlib.legend_handler.HandlerLine2D which accepts a
numpoints argument (note numpoints is a keyword on the legend() function for convenience). We can
then pass the mapping of instance to Handler as a keyword to legend.
import matplotlib.pyplot as plt
from matplotlib.legend_handler import HandlerLine2D
line1, = plt.plot([3,2,1], marker='o', label='Line 1')
line2, = plt.plot([1,2,3], marker='o', label='Line 2')
plt.legend(handler_map={line1: HandlerLine2D(numpoints=4)})
0.00 0.25 0.50 0.75 1.00 1.25 1.50 1.75 2.00
1.00
1.25
1.50
1.75
2.00
2.25
2.50
2.75
3.00
Line 1
Line 2
As you can see, “Line 1” now has 4 marker points, where “Line 2” has 2 (the default). Try the above code,
only change the map’s key from line1 to type(line1). Notice how now both Line2D instances get 4
markers.
Along with handlers for complex plot types such as errorbars, stem plots and histograms, the default
handler_map has a special tuple handler ( HandlerTuple) which simply plots the handles on top of
one another for each item in the given tuple. The following example demonstrates combining two legend
keys on top of one another:
3.2. Intermediate 73",0.0118410587310791,"Matplotlib, Release 2.0.2
All of this ﬂexibility means that we have the necessary hooks to implement custom handlers for our own
type of legend key.
The simplest example of using custom handlers is to instantiate one of the existing HandlerBase subclasses.
For the sake of simplicity, let’s choose matplotlib.legend_handler.HandlerLine2D which accepts a
numpoints argument (note numpoints is a keyword on the legend() function for convenience). We can
then pass the mapping of instance to Handler as a keyword to legend.
import matplotlib.pyplot as plt
from matplotlib.legend_handler import HandlerLine2D
line1, = plt.plot([3,2,1], marker='o', label='Line 1')
line2, = plt.plot([1,2,3], marker='o', label='Line 2')
plt.legend(handler_map={line1: HandlerLine2D(numpoints=4)})
0.00
0.25
0.50
0.75
1.00
1.25
1.50
1.75
2.00
1.00
1.25
1.50
1.75
2.00
2.25
2.50
2.75
3.00
Line 1
Line 2
As you can see, “Line 1” now has 4 marker points, where “Line 2” has 2 (the default). Try the above code,
only change the map’s key from line1 to type(line1). Notice how now both Line2D instances get 4
markers.
Along with handlers for complex plot types such as errorbars, stem plots and histograms, the default
handler_map has a special tuple handler (HandlerTuple) which simply plots the handles on top of
one another for each item in the given tuple. The following example demonstrates combining two legend
keys on top of one another:
3.2. Intermediate
73
",0.004105806350708,"Matplotlib, Release 2.0.2
All of this ﬂexibility means that we have the necessary hooks to implement custom handlers for our own
type of legend key.
The simplest example of using custom handlers is to instantiate one of the existingHandlerBase subclasses.
For the sake of simplicity, let’s choosematplotlib.legend_handler.HandlerLine2D which accepts a
numpoints argument (note numpoints is a keyword on the legend() function for convenience). We can
then pass the mapping of instance to Handler as a keyword to legend.
import matplotlib.pyplot as plt
from matplotlib.legend_handler import HandlerLine2D
line1, = plt.plot([3,2,1], marker='o', label='Line 1')
line2, = plt.plot([1,2,3], marker='o', label='Line 2')
plt.legend(handler_map={line1: HandlerLine2D(numpoints=4)})
0.00 0.25 0.50 0.75 1.00 1.25 1.50 1.75 2.00
1.00
1.25
1.50
1.75
2.00
2.25
2.50
2.75
3.00
Line 1
Line 2
As you can see, “Line 1” now has 4 marker points, where “Line 2” has 2 (the default). Try the above code,
only change the map’s key from line1 to type(line1). Notice how now both Line2D instances get 4
markers.
Along with handlers for complex plot types such as errorbars, stem plots and histograms, the default
handler_map has a special tuple handler ( HandlerTuple) which simply plots the handles on top of
one another for each item in the given tuple. The following example demonstrates combining two legend
keys on top of one another:
3.2. Intermediate 73",0.0107829570770263,"4>
ChatGPT 
DALL-E 
Midjourney 
Canva AI tools 
 

Remember: The more you play and experiment, the more you'll understand how incredible 
this technology can be! 🤖 Welcome to the Future of Creativity! 🚀 "
85,1.0,matplotlib_81-101_pdf.pdf ~ 1,"Matplotlib, Release 2.0.2
import matplotlib.pyplot as plt
from numpy.random import randn
z = randn(10)
red_dot, = plt.plot(z, ""ro"", markersize=15)
# Put a white cross over some of the data.
white_cross, = plt.plot(z[:5], ""w+"", markeredgewidth=3, markersize=15)
plt.legend([red_dot, (red_dot, white_cross)], [""Attr A"", ""Attr A+B""])
0 2 4 6 8
1.5
1.0
0.5
0.0
0.5
1.0
1.5
2.0
Attr A
Attr A+B
Implementing a custom legend handler
A custom handler can be implemented to turn any handle into a legend key (handles don’t necessarily need
to be matplotlib artists). The handler must implement a “legend_artist” method which returns a single artist
for the legend to use. Signature details about the “legend_artist” are documented at legend_artist().
import matplotlib.pyplot as plt
import matplotlib.patches as mpatches
class AnyObject(object):
pass
74 Chapter 3. Tutorials",0.0067877769470214,"Matplotlib, Release 2.0.2
import matplotlib.pyplot as plt
from numpy.random import randn
z = randn(10)
red_dot, = plt.plot(z, ""ro"", markersize=15)
# Put a white cross over some of the data.
white_cross, = plt.plot(z[:5], ""w+"", markeredgewidth=3, markersize=15)
plt.legend([red_dot, (red_dot, white_cross)], [""Attr A"", ""Attr A+B""])
0
2
4
6
8
1.5
1.0
0.5
0.0
0.5
1.0
1.5
2.0
Attr A
Attr A+B
Implementing a custom legend handler
A custom handler can be implemented to turn any handle into a legend key (handles don’t necessarily need
to be matplotlib artists). The handler must implement a “legend_artist” method which returns a single artist
for the legend to use. Signature details about the “legend_artist” are documented at legend_artist().
import matplotlib.pyplot as plt
import matplotlib.patches as mpatches
class AnyObject(object):
pass
74
Chapter 3. Tutorials
",0.0015151500701904,"Matplotlib, Release 2.0.2
import matplotlib.pyplot as plt
from numpy.random import randn
z = randn(10)
red_dot, = plt.plot(z, ""ro"", markersize=15)
# Put a white cross over some of the data.
white_cross, = plt.plot(z[:5], ""w+"", markeredgewidth=3, markersize=15)
plt.legend([red_dot, (red_dot, white_cross)], [""Attr A"", ""Attr A+B""])
0 2 4 6 8
1.5
1.0
0.5
0.0
0.5
1.0
1.5
2.0
Attr A
Attr A+B
Implementing a custom legend handler
A custom handler can be implemented to turn any handle into a legend key (handles don’t necessarily need
to be matplotlib artists). The handler must implement a “legend_artist” method which returns a single artist
for the legend to use. Signature details about the “legend_artist” are documented at legend_artist().
import matplotlib.pyplot as plt
import matplotlib.patches as mpatches
class AnyObject(object):
pass
74 Chapter 3. Tutorials",0.0084600448608398,
86,2.0,matplotlib_81-101_pdf.pdf ~ 2,"Matplotlib, Release 2.0.2
class AnyObjectHandler(object):
def legend_artist(self, legend, orig_handle, fontsize, handlebox):
x0, y0 = handlebox.xdescent, handlebox.ydescent
width, height = handlebox.width, handlebox.height
patch = mpatches.Rectangle([x0, y0], width, height, facecolor='red',
edgecolor='black', hatch='xx', lw=3,
transform=handlebox.get_transform())
handlebox.add_artist(patch)
return patch
plt.legend([AnyObject()], ['My first handler'],
handler_map={AnyObject: AnyObjectHandler()})
0.0 0.2 0.4 0.6 0.8 1.0
0.0
0.2
0.4
0.6
0.8
1.0
My first handler
Alternatively, had we wanted to globally accept AnyObject instances without needing to manually set the
handler_mapkeyword all the time, we could have registered the new handler with:
from matplotlib.legend import Legend
Legend.update_default_handler_map({AnyObject: AnyObjectHandler()})
Whilst the power here is clear, remember that there are already many handlers implemented and what you
want to achieve may already be easily possible with existing classes. For example, to produce elliptical
legend keys, rather than rectangular ones:
from matplotlib.legend_handler import HandlerPatch
import matplotlib.pyplot as plt
3.2. Intermediate 75",0.0063700675964355,"Matplotlib, Release 2.0.2
class AnyObjectHandler(object):
def legend_artist(self, legend, orig_handle, fontsize, handlebox):
x0, y0 = handlebox.xdescent, handlebox.ydescent
width, height = handlebox.width, handlebox.height
patch = mpatches.Rectangle([x0, y0], width, height, facecolor='red',
edgecolor='black', hatch='xx', lw=3,
transform=handlebox.get_transform())
handlebox.add_artist(patch)
return patch
plt.legend([AnyObject()], ['My first handler'],
handler_map={AnyObject: AnyObjectHandler()})
0.0
0.2
0.4
0.6
0.8
1.0
0.0
0.2
0.4
0.6
0.8
1.0
My first handler
Alternatively, had we wanted to globally accept AnyObject instances without needing to manually set the
handler_map keyword all the time, we could have registered the new handler with:
from matplotlib.legend import Legend
Legend.update_default_handler_map({AnyObject: AnyObjectHandler()})
Whilst the power here is clear, remember that there are already many handlers implemented and what you
want to achieve may already be easily possible with existing classes. For example, to produce elliptical
legend keys, rather than rectangular ones:
from matplotlib.legend_handler import HandlerPatch
import matplotlib.pyplot as plt
3.2. Intermediate
75
",0.0018019676208496,"Matplotlib, Release 2.0.2
class AnyObjectHandler(object):
def legend_artist(self, legend, orig_handle, fontsize, handlebox):
x0, y0 = handlebox.xdescent, handlebox.ydescent
width, height = handlebox.width, handlebox.height
patch = mpatches.Rectangle([x0, y0], width, height, facecolor='red',
edgecolor='black', hatch='xx', lw=3,
transform=handlebox.get_transform())
handlebox.add_artist(patch)
return patch
plt.legend([AnyObject()], ['My first handler'],
handler_map={AnyObject: AnyObjectHandler()})
0.0 0.2 0.4 0.6 0.8 1.0
0.0
0.2
0.4
0.6
0.8
1.0
My first handler
Alternatively, had we wanted to globally accept AnyObject instances without needing to manually set the
handler_mapkeyword all the time, we could have registered the new handler with:
from matplotlib.legend import Legend
Legend.update_default_handler_map({AnyObject: AnyObjectHandler()})
Whilst the power here is clear, remember that there are already many handlers implemented and what you
want to achieve may already be easily possible with existing classes. For example, to produce elliptical
legend keys, rather than rectangular ones:
from matplotlib.legend_handler import HandlerPatch
import matplotlib.pyplot as plt
3.2. Intermediate 75",0.0064930915832519,"1>
Colorbar
If you create a colorbar with the colorbar() command, the created colorbar is an instance of Axes, not Subplot, so tight_layout does not work. With Matplotlib v1.1, you may create a colorbar as a subplot using the gridspec.
Matplotlib, Release 2.0.2
            2.0
1.5
1.0 2.0
1.5
1.0
0.0 0.5 x-label
1.0
0.0
0.5 1.0 x-label
          y-label y-label
    plt.close('all')
arr = np.arange(100).reshape((10,10))
fig = plt.figure(figsize=(4, 4))
im = plt.imshow(arr, interpolation=""none"")
plt.colorbar(im, use_gridspec=True)
plt.tight_layout()
  3.1. Introductory 53

"
87,3.0,matplotlib_81-101_pdf.pdf ~ 3,"Matplotlib, Release 2.0.2
import matplotlib.patches as mpatches
class HandlerEllipse(HandlerPatch):
def create_artists(self, legend, orig_handle,
xdescent, ydescent, width, height, fontsize, trans):
center = 0.5 * width - 0.5 * xdescent, 0.5 * height - 0.5 * ydescent
p = mpatches.Ellipse(xy=center, width=width + xdescent,
height=height + ydescent)
self.update_prop(p, orig_handle, legend)
p.set_transform(trans)
return [p]
c = mpatches.Circle((0.5, 0.5), 0.25, facecolor=""green"",
edgecolor=""red"", linewidth=3)
plt.gca().add_patch(c)
plt.legend([c], [""An ellipse, not a rectangle""],
handler_map={mpatches.Circle: HandlerEllipse()})
0.0 0.2 0.4 0.6 0.8 1.0
0.0
0.2
0.4
0.6
0.8
1.0
An ellipse, not a rectangle
Known examples of using legend
Here is a non-exhaustive list of the examples available involving legend being used in various ways:
76 Chapter 3. Tutorials",0.0064468383789062,"Matplotlib, Release 2.0.2
import matplotlib.patches as mpatches
class HandlerEllipse(HandlerPatch):
def create_artists(self, legend, orig_handle,
xdescent, ydescent, width, height, fontsize, trans):
center = 0.5 * width - 0.5 * xdescent, 0.5 * height - 0.5 * ydescent
p = mpatches.Ellipse(xy=center, width=width + xdescent,
height=height + ydescent)
self.update_prop(p, orig_handle, legend)
p.set_transform(trans)
return [p]
c = mpatches.Circle((0.5, 0.5), 0.25, facecolor=""green"",
edgecolor=""red"", linewidth=3)
plt.gca().add_patch(c)
plt.legend([c], [""An ellipse, not a rectangle""],
handler_map={mpatches.Circle: HandlerEllipse()})
0.0
0.2
0.4
0.6
0.8
1.0
0.0
0.2
0.4
0.6
0.8
1.0
An ellipse, not a rectangle
Known examples of using legend
Here is a non-exhaustive list of the examples available involving legend being used in various ways:
76
Chapter 3. Tutorials
",0.0014350414276123,"Matplotlib, Release 2.0.2
import matplotlib.patches as mpatches
class HandlerEllipse(HandlerPatch):
def create_artists(self, legend, orig_handle,
xdescent, ydescent, width, height, fontsize, trans):
center = 0.5 * width - 0.5 * xdescent, 0.5 * height - 0.5 * ydescent
p = mpatches.Ellipse(xy=center, width=width + xdescent,
height=height + ydescent)
self.update_prop(p, orig_handle, legend)
p.set_transform(trans)
return [p]
c = mpatches.Circle((0.5, 0.5), 0.25, facecolor=""green"",
edgecolor=""red"", linewidth=3)
plt.gca().add_patch(c)
plt.legend([c], [""An ellipse, not a rectangle""],
handler_map={mpatches.Circle: HandlerEllipse()})
0.0 0.2 0.4 0.6 0.8 1.0
0.0
0.2
0.4
0.6
0.8
1.0
An ellipse, not a rectangle
Known examples of using legend
Here is a non-exhaustive list of the examples available involving legend being used in various ways:
76 Chapter 3. Tutorials",0.0061581134796142,"2>
Matplotlib, Release 2.0.2
       0 2 4 6 8
80
60
40
20
0
 02468
Another option is to use AxesGrid1 toolkit to explicitly create an axes for colorbar.
    plt.close('all')
arr = np.arange(100).reshape((10,10))
fig = plt.figure(figsize=(4, 4))
im = plt.imshow(arr, interpolation=""none"")
from mpl_toolkits.axes_grid1 import make_axes_locatable divider = make_axes_locatable(plt.gca())
cax = divider.append_axes(""right"", ""5%"", pad=""3%"") plt.colorbar(im, cax=cax)
plt.tight_layout()
  54 Chapter3. Tutorials

"
88,4.0,matplotlib_81-101_pdf.pdf ~ 4,"Matplotlib, Release 2.0.2
• lines_bars_and_markers example code: scatter_with_legend.py
• api example code: legend_demo.py
• pylab_examples example code: contourf_hatching.py
• pylab_examples example code: ﬁglegend_demo.py
• pylab_examples example code: scatter_symbol.py
3.3 Advanced
3.3.1 Transformations Tutorial
Like any graphics packages, matplotlib is built on top of a transformation framework to easily move be-
tween coordinate systems, the userland data coordinate system, the axes coordinate system, the figure
coordinate system, and the display coordinate system. In 95% of your plotting, you won’t need to think
about this, as it happens under the hood, but as you push the limits of custom ﬁgure generation, it helps
to have an understanding of these objects so you can reuse the existing transformations matplotlib makes
available to you, or create your own (see matplotlib.transforms). The table below summarizes the ex-
isting coordinate systems, the transformation object you should use to work in that coordinate system, and
the description of that system. In the Transformation Objectcolumn, axis a Axes instance, and figis
a Figure instance.
Co-
ordi-
nate
Transfor-
mation
Object
Description
data ax.
transData
The userland data coordinate system, controlled by the xlim and ylim
axes ax.
transAxes
The coordinate system of the Axes; (0,0) is bottom left of the axes, and (1,1) is
top right of the axes.
figure fig.
transFigure
The coordinate system of the Figure; (0,0) is bottom left of the ﬁgure, and (1,1)
is top right of the ﬁgure.
displayNone This is the pixel coordinate system of the display; (0,0) is the bottom left of the
display, and (width, height) is the top right of the display in pixels. Alternatively,
the identity transform (matplotlib.transforms.IdentityTransform())
may be used instead of None.
All of the transformation objects in the table above take inputs in their coordinate system, and transform
the input to the display coordinate system. That is why the display coordinate system has None for the
Transformation Object column – it already is in display coordinates. The transformations also know
how to invert themselves, to go from display back to the native coordinate system. This is particularly
useful when processing events from the user interface, which typically occur in display space, and you want
to know where the mouse click or key-press occurred in your data coordinate system.
3.3. Advanced 77",0.0095579624176025,"Matplotlib, Release 2.0.2
• lines_bars_and_markers example code: scatter_with_legend.py
• api example code: legend_demo.py
• pylab_examples example code: contourf_hatching.py
• pylab_examples example code: ﬁglegend_demo.py
• pylab_examples example code: scatter_symbol.py
3.3 Advanced
3.3.1 Transformations Tutorial
Like any graphics packages, matplotlib is built on top of a transformation framework to easily move be-
tween coordinate systems, the userland data coordinate system, the axes coordinate system, the figure
coordinate system, and the display coordinate system. In 95% of your plotting, you won’t need to think
about this, as it happens under the hood, but as you push the limits of custom ﬁgure generation, it helps
to have an understanding of these objects so you can reuse the existing transformations matplotlib makes
available to you, or create your own (see matplotlib.transforms). The table below summarizes the ex-
isting coordinate systems, the transformation object you should use to work in that coordinate system, and
the description of that system. In the Transformation Object column, ax is a Axes instance, and fig is
a Figure instance.
Co-
ordi-
nate
Transfor-
mation
Object
Description
data
ax.
transData
The userland data coordinate system, controlled by the xlim and ylim
axes
ax.
transAxes
The coordinate system of the Axes; (0,0) is bottom left of the axes, and (1,1) is
top right of the axes.
figure fig.
transFigure
The coordinate system of the Figure; (0,0) is bottom left of the ﬁgure, and (1,1)
is top right of the ﬁgure.
displayNone
This is the pixel coordinate system of the display; (0,0) is the bottom left of the
display, and (width, height) is the top right of the display in pixels. Alternatively,
the identity transform (matplotlib.transforms.IdentityTransform())
may be used instead of None.
All of the transformation objects in the table above take inputs in their coordinate system, and transform
the input to the display coordinate system. That is why the display coordinate system has None for the
Transformation Object column – it already is in display coordinates. The transformations also know
how to invert themselves, to go from display back to the native coordinate system. This is particularly
useful when processing events from the user interface, which typically occur in display space, and you want
to know where the mouse click or key-press occurred in your data coordinate system.
3.3. Advanced
77
",0.003504991531372,"Matplotlib, Release 2.0.2
• lines_bars_and_markers example code: scatter_with_legend.py
• api example code: legend_demo.py
• pylab_examples example code: contourf_hatching.py
• pylab_examples example code: ﬁglegend_demo.py
• pylab_examples example code: scatter_symbol.py
3.3 Advanced
3.3.1 Transformations Tutorial
Like any graphics packages, matplotlib is built on top of a transformation framework to easily move be-
tween coordinate systems, the userland data coordinate system, the axes coordinate system, the figure
coordinate system, and the display coordinate system. In 95% of your plotting, you won’t need to think
about this, as it happens under the hood, but as you push the limits of custom ﬁgure generation, it helps
to have an understanding of these objects so you can reuse the existing transformations matplotlib makes
available to you, or create your own (see matplotlib.transforms). The table below summarizes the ex-
isting coordinate systems, the transformation object you should use to work in that coordinate system, and
the description of that system. In the Transformation Objectcolumn, axis a Axes instance, and figis
a Figure instance.
Co-
ordi-
nate
Transfor-
mation
Object
Description
data ax.
transData
The userland data coordinate system, controlled by the xlim and ylim
axes ax.
transAxes
The coordinate system of the Axes; (0,0) is bottom left of the axes, and (1,1) is
top right of the axes.
figure fig.
transFigure
The coordinate system of the Figure; (0,0) is bottom left of the ﬁgure, and (1,1)
is top right of the ﬁgure.
displayNone This is the pixel coordinate system of the display; (0,0) is the bottom left of the
display, and (width, height) is the top right of the display in pixels. Alternatively,
the identity transform (matplotlib.transforms.IdentityTransform())
may be used instead of None.
All of the transformation objects in the table above take inputs in their coordinate system, and transform
the input to the display coordinate system. That is why the display coordinate system has None for the
Transformation Object column – it already is in display coordinates. The transformations also know
how to invert themselves, to go from display back to the native coordinate system. This is particularly
useful when processing events from the user interface, which typically occur in display space, and you want
to know where the mouse click or key-press occurred in your data coordinate system.
3.3. Advanced 77",0.009739875793457,"3>
3.2 Intermediate 3.2.1 Artist tutorial
There are three layers to the matplotlib API. The matplotlib.backend_bases.FigureCanvas is the area onto which the figure is drawn, the matplotlib.backend_bases.Renderer is the object which knows how to draw on the FigureCanvas, and the matplotlib.artist.Artist is the object that knows how to use a renderer to paint onto the canvas. The FigureCanvas and Renderer handle all the details of talking to user interface toolkits like wxPython or drawing languages like PostScript®, and the Artist handles all the high level constructs like representing and laying out the figure, text, and lines. The typical user will spend 95% of their time working with the Artists.
There are two types of Artists: primitives and containers. The primitives represent the standard graphical objects we want to paint onto our canvas: Line2D, Rectangle, Text, AxesImage, etc., and the containers are places to put them (Axis, Axes and Figure). The standard use is to create a Figure instance, use the Figure to create one or more Axes or Subplot instances, and use the Axes instance helper methods to create the primitives. In the example below, we create a Figure instance using matplotlib.pyplot. figure(), which is a convenience method for instantiating Figure instances and connecting them with your user interface or drawing toolkit FigureCanvas. As we will discuss below, this is not necessary – you can work directly with PostScript, PDF Gtk+, or wxPython FigureCanvas instances, instantiate your Figures directly and connect them yourselves – but since we are focusing here on the Artist API we’ll let pyplot handle some of those details for us:
Matplotlib, Release 2.0.2
       0 2 4 6 8
80 60 40 20 0
 02468
 3.2. Intermediate 55

"
89,5.0,matplotlib_81-101_pdf.pdf ~ 5,"Matplotlib, Release 2.0.2
Data coordinates
Let’s start with the most commonly used coordinate, thedatacoordinate system. Whenever you add data to
the axes, matplotlib updates the datalimits, most commonly updated with theset_xlim() and set_ylim()
methods. For example, in the ﬁgure below, the data limits stretch from 0 to 10 on the x-axis, and -1 to 1 on
the y-axis.
import numpy as np
import matplotlib.pyplot as plt
x = np.arange(0, 10, 0.005)
y = np.exp(-x/2.) * np.sin(2*np.pi*x)
fig = plt.figure()
ax = fig.add_subplot(111)
ax.plot(x, y)
ax.set_xlim(0, 10)
ax.set_ylim(-1, 1)
plt.show()
0 2 4 6 8 10
1.00
0.75
0.50
0.25
0.00
0.25
0.50
0.75
1.00
You can use theax.transDatainstance to transform from your datato your displaycoordinate system,
either a single point or a sequence of points as shown below:
78 Chapter 3. Tutorials",0.0070328712463378,"Matplotlib, Release 2.0.2
Data coordinates
Let’s start with the most commonly used coordinate, the data coordinate system. Whenever you add data to
the axes, matplotlib updates the datalimits, most commonly updated with the set_xlim() and set_ylim()
methods. For example, in the ﬁgure below, the data limits stretch from 0 to 10 on the x-axis, and -1 to 1 on
the y-axis.
import numpy as np
import matplotlib.pyplot as plt
x = np.arange(0, 10, 0.005)
y = np.exp(-x/2.) * np.sin(2*np.pi*x)
fig = plt.figure()
ax = fig.add_subplot(111)
ax.plot(x, y)
ax.set_xlim(0, 10)
ax.set_ylim(-1, 1)
plt.show()
0
2
4
6
8
10
1.00
0.75
0.50
0.25
0.00
0.25
0.50
0.75
1.00
You can use the ax.transData instance to transform from your data to your display coordinate system,
either a single point or a sequence of points as shown below:
78
Chapter 3. Tutorials
",0.0013723373413085,"Matplotlib, Release 2.0.2
Data coordinates
Let’s start with the most commonly used coordinate, thedatacoordinate system. Whenever you add data to
the axes, matplotlib updates the datalimits, most commonly updated with theset_xlim() and set_ylim()
methods. For example, in the ﬁgure below, the data limits stretch from 0 to 10 on the x-axis, and -1 to 1 on
the y-axis.
import numpy as np
import matplotlib.pyplot as plt
x = np.arange(0, 10, 0.005)
y = np.exp(-x/2.) * np.sin(2*np.pi*x)
fig = plt.figure()
ax = fig.add_subplot(111)
ax.plot(x, y)
ax.set_xlim(0, 10)
ax.set_ylim(-1, 1)
plt.show()
0 2 4 6 8 10
1.00
0.75
0.50
0.25
0.00
0.25
0.50
0.75
1.00
You can use theax.transDatainstance to transform from your datato your displaycoordinate system,
either a single point or a sequence of points as shown below:
78 Chapter 3. Tutorials",0.0070550441741943,"4>
Matplotlib, Release 2.0.2
     import matplotlib.pyplot as plt
fig = plt.figure()
ax = fig.add_subplot(2,1,1) # two rows, one column, first plot
 The Axes is probably the most important class in the matplotlib API, and the one you will be working with most of the time. This is because the Axes is the plotting area into which most of the objects go, and the Axes has many special helper methods (plot(), text(), hist(), imshow()) to create the most common graphics primitives (Line2D, Text, Rectangle, Image, respectively). These helper methods will take your data (e.g., numpy arrays and strings) and create primitive Artist instances as needed (e.g., Line2D), add them to the relevant containers, and draw them when requested. Most of you are probably familiar with the Subplot, which is just a special case of an Axes that lives on a regular rows by columns grid of Subplot instances. If you want to create an Axes at an arbitrary location, simply use the add_axes() method which takes a list of [left, bottom, width, height] values in 0-1 relative figure coordinates:
Continuing with our example:
In this example, ax is the Axes instance created by the fig.add_subplot call above (remember Subplot is just a subclass of Axes) and when you call ax.plot, it creates a Line2D instance and adds it to the Axes.lines list. In the interactive ipython session below, you can see that the Axes.lines list is length one and contains the same line that was returned by the line, = ax.plot... call:
If you make subsequent calls to ax.plot (and the hold state is “on” which is the default) then additional lines will be added to the list. You can remove lines later simply by calling the list methods; either of these will work:
The Axes also has helper methods to configure and decorate the x-axis and y-axis tick, tick labels and axis labels:
When you call ax.set_xlabel, it passes the information on the Text instance of the XAxis. Each Axes instance contains an XAxis and a YAxis instance, which handle the layout and drawing of the ticks, tick labels and axis labels.
    fig2 = plt.figure()
ax2 = fig2.add_axes([0.15, 0.1, 0.7, 0.3])
     import numpy as np
t = np.arange(0.0, 1.0, 0.01)
s = np.sin(2*np.pi*t)
line, = ax.plot(t, s, color='blue', lw=2)
     In [101]: ax.lines[0]
Out[101]: <matplotlib.lines.Line2D instance at 0x19a95710>
In [102]: line
Out[102]: <matplotlib.lines.Line2D instance at 0x19a95710>
     del ax.lines[0]
ax.lines.remove(line) # one or the other, not both!
     xtext = ax.set_xlabel('my xdata') # returns a Text instance ytext = ax.set_ylabel('my ydata')
  56 Chapter3. Tutorials

"
90,6.0,matplotlib_81-101_pdf.pdf ~ 6,"Matplotlib, Release 2.0.2
In [14]: type(ax.transData)
Out[14]: <class 'matplotlib.transforms.CompositeGenericTransform'>
In [15]: ax.transData.transform((5, 0))
Out[15]: array([ 335.175, 247. ])
In [16]: ax.transData.transform([(5, 0), (1,2)])
Out[16]:
array([[ 335.175, 247. ],
[ 132.435, 642.2 ]])
You can use theinverted() method to create a transform which will take you from display to data coordi-
nates:
In [41]: inv = ax.transData.inverted()
In [42]: type(inv)
Out[42]: <class 'matplotlib.transforms.CompositeGenericTransform'>
In [43]: inv.transform((335.175, 247.))
Out[43]: array([ 5., 0.])
If your are typing along with this tutorial, the exact values of the display coordinates may diﬀer if you have
a diﬀerent window size or dpi setting. Likewise, in the ﬁgure below, the display labeled points are probably
not the same as in the ipython session because the documentation ﬁgure size defaults are diﬀerent.
0 2 4 6 8 10
1.00
0.75
0.50
0.25
0.00
0.25
0.50
0.75
1.00
data = (5.0, 0.0)
display = (281.9, 222.8)
3.3. Advanced 79",0.0084841251373291,"Matplotlib, Release 2.0.2
In [14]: type(ax.transData)
Out[14]: <class 'matplotlib.transforms.CompositeGenericTransform'>
In [15]: ax.transData.transform((5, 0))
Out[15]: array([ 335.175,
247.
])
In [16]: ax.transData.transform([(5, 0), (1,2)])
Out[16]:
array([[ 335.175,
247.
],
[ 132.435,
642.2
]])
You can use the inverted() method to create a transform which will take you from display to data coordi-
nates:
In [41]: inv = ax.transData.inverted()
In [42]: type(inv)
Out[42]: <class 'matplotlib.transforms.CompositeGenericTransform'>
In [43]: inv.transform((335.175,
247.))
Out[43]: array([ 5.,
0.])
If your are typing along with this tutorial, the exact values of the display coordinates may diﬀer if you have
a diﬀerent window size or dpi setting. Likewise, in the ﬁgure below, the display labeled points are probably
not the same as in the ipython session because the documentation ﬁgure size defaults are diﬀerent.
0
2
4
6
8
10
1.00
0.75
0.50
0.25
0.00
0.25
0.50
0.75
1.00
data = (5.0, 0.0)
display = (281.9  
3.3. Advanced
79
",0.0019881725311279,"Matplotlib, Release 2.0.2
In [14]: type(ax.transData)
Out[14]: <class 'matplotlib.transforms.CompositeGenericTransform'>
In [15]: ax.transData.transform((5, 0))
Out[15]: array([ 335.175, 247. ])
In [16]: ax.transData.transform([(5, 0), (1,2)])
Out[16]:
array([[ 335.175, 247. ],
[ 132.435, 642.2 ]])
You can use theinverted() method to create a transform which will take you from display to data coordi-
nates:
In [41]: inv = ax.transData.inverted()
In [42]: type(inv)
Out[42]: <class 'matplotlib.transforms.CompositeGenericTransform'>
In [43]: inv.transform((335.175, 247.))
Out[43]: array([ 5., 0.])
If your are typing along with this tutorial, the exact values of the display coordinates may diﬀer if you have
a diﬀerent window size or dpi setting. Likewise, in the ﬁgure below, the display labeled points are probably
not the same as in the ipython session because the documentation ﬁgure size defaults are diﬀerent.
0 2 4 6 8 10
1.00
0.75
0.50
0.25
0.00
0.25
0.50
0.75
1.00
data = (5.0, 0.0)
display = (281.9, 222.8)
3.3. Advanced 79",0.0079710483551025,"5>
Matplotlib, Release 2.0.2
 Try creating the figure below.
 1.0 0.5 0.0 0.5 1.0
60 40 20
0.0 0.2
a sine wave
0.4 0.6
0.8 1.0
0
432101234
time (s)
     volts
                    Customizing your objects
Every element in the figure is represented by a matplotlib Artist, and each has an extensive list of proper- ties to configure its appearance. The figure itself contains a Rectangle exactly the size of the figure, which you can use to set the background color and transparency of the figures. Likewise, each Axes bounding box (the standard white box with black edges in the typical matplotlib plot, has a Rectangle instance that determines the color, transparency, and other properties of the Axes. These instances are stored as mem- ber variables Figure.patch and Axes.patch (“Patch” is a name inherited from MATLAB, and is a 2D “patch” of color on the figure, e.g., rectangles, circles and polygons). Every matplotlib Artist has the following properties
 3.2. Intermediate 57

"
91,7.0,matplotlib_81-101_pdf.pdf ~ 7,"Matplotlib, Release 2.0.2
Note: If you run the source code in the example above in a GUI backend, you may also ﬁnd that the two
arrows for the data and display annotations do not point to exactly the same point. This is because the
display point was computed before the ﬁgure was displayed, and the GUI backend may slightly resize the
ﬁgure when it is created. The e ﬀect is more pronounced if you resize the ﬁgure yourself. This is one good
reason why you rarely want to work in display space, but you can connect to the 'on_draw' Event to
update ﬁgure coordinates on ﬁgure draws; see Event handling and picking.
When you change the x or y limits of your axes, the data limits are updated so the transformation yields a
new display point. Note that when we just change the ylim, only the y-display coordinate is altered, and
when we change the xlim too, both are altered. More on this later when we talk about the Bbox.
In [54]: ax.transData.transform((5, 0))
Out[54]: array([ 335.175, 247. ])
In [55]: ax.set_ylim(-1,2)
Out[55]: (-1, 2)
In [56]: ax.transData.transform((5, 0))
Out[56]: array([ 335.175 , 181.13333333])
In [57]: ax.set_xlim(10,20)
Out[57]: (10, 20)
In [58]: ax.transData.transform((5, 0))
Out[58]: array([-171.675 , 181.13333333])
Axes coordinates
After the data coordinate system, axes is probably the second most useful coordinate system. Here the
point (0,0) is the bottom left of your axes or subplot, (0.5, 0.5) is the center, and (1.0, 1.0) is the top right.
You can also refer to points outside the range, so (-0.1, 1.1) is to the left and above your axes. This coordinate
system is extremely useful when placing text in your axes, because you often want a text bubble in a ﬁxed,
location, e.g., the upper left of the axes pane, and have that location remain ﬁxed when you pan or zoom.
Here is a simple example that creates four panels and labels them ‘A’, ‘B’, ‘C’, ‘D’ as you often see in
journals.
import numpy as np
import matplotlib.pyplot as plt
fig = plt.figure()
for i, label in enumerate(('A', 'B', 'C', 'D')):
ax = fig.add_subplot(2,2,i+1)
ax.text(0.05, 0.95, label, transform=ax.transAxes,
fontsize=16, fontweight='bold', va='top')
plt.show()
80 Chapter 3. Tutorials",0.0095758438110351,"Matplotlib, Release 2.0.2
Note: If you run the source code in the example above in a GUI backend, you may also ﬁnd that the two
arrows for the data and display annotations do not point to exactly the same point. This is because the
display point was computed before the ﬁgure was displayed, and the GUI backend may slightly resize the
ﬁgure when it is created. The eﬀect is more pronounced if you resize the ﬁgure yourself. This is one good
reason why you rarely want to work in display space, but you can connect to the 'on_draw' Event to
update ﬁgure coordinates on ﬁgure draws; see Event handling and picking.
When you change the x or y limits of your axes, the data limits are updated so the transformation yields a
new display point. Note that when we just change the ylim, only the y-display coordinate is altered, and
when we change the xlim too, both are altered. More on this later when we talk about the Bbox.
In [54]: ax.transData.transform((5, 0))
Out[54]: array([ 335.175,
247.
])
In [55]: ax.set_ylim(-1,2)
Out[55]: (-1, 2)
In [56]: ax.transData.transform((5, 0))
Out[56]: array([ 335.175
,
181.13333333])
In [57]: ax.set_xlim(10,20)
Out[57]: (10, 20)
In [58]: ax.transData.transform((5, 0))
Out[58]: array([-171.675
,
181.13333333])
Axes coordinates
After the data coordinate system, axes is probably the second most useful coordinate system. Here the
point (0,0) is the bottom left of your axes or subplot, (0.5, 0.5) is the center, and (1.0, 1.0) is the top right.
You can also refer to points outside the range, so (-0.1, 1.1) is to the left and above your axes. This coordinate
system is extremely useful when placing text in your axes, because you often want a text bubble in a ﬁxed,
location, e.g., the upper left of the axes pane, and have that location remain ﬁxed when you pan or zoom.
Here is a simple example that creates four panels and labels them ‘A’, ‘B’, ‘C’, ‘D’ as you often see in
journals.
import numpy as np
import matplotlib.pyplot as plt
fig = plt.figure()
for i, label in enumerate(('A', 'B', 'C', 'D')):
ax = fig.add_subplot(2,2,i+1)
ax.text(0.05, 0.95, label, transform=ax.transAxes,
fontsize=16, fontweight='bold', va='top')
plt.show()
80
Chapter 3. Tutorials
",0.0024111270904541,"Matplotlib, Release 2.0.2
Note: If you run the source code in the example above in a GUI backend, you may also ﬁnd that the two
arrows for the data and display annotations do not point to exactly the same point. This is because the
display point was computed before the ﬁgure was displayed, and the GUI backend may slightly resize the
ﬁgure when it is created. The e ﬀect is more pronounced if you resize the ﬁgure yourself. This is one good
reason why you rarely want to work in display space, but you can connect to the 'on_draw' Event to
update ﬁgure coordinates on ﬁgure draws; see Event handling and picking.
When you change the x or y limits of your axes, the data limits are updated so the transformation yields a
new display point. Note that when we just change the ylim, only the y-display coordinate is altered, and
when we change the xlim too, both are altered. More on this later when we talk about the Bbox.
In [54]: ax.transData.transform((5, 0))
Out[54]: array([ 335.175, 247. ])
In [55]: ax.set_ylim(-1,2)
Out[55]: (-1, 2)
In [56]: ax.transData.transform((5, 0))
Out[56]: array([ 335.175 , 181.13333333])
In [57]: ax.set_xlim(10,20)
Out[57]: (10, 20)
In [58]: ax.transData.transform((5, 0))
Out[58]: array([-171.675 , 181.13333333])
Axes coordinates
After the data coordinate system, axes is probably the second most useful coordinate system. Here the
point (0,0) is the bottom left of your axes or subplot, (0.5, 0.5) is the center, and (1.0, 1.0) is the top right.
You can also refer to points outside the range, so (-0.1, 1.1) is to the left and above your axes. This coordinate
system is extremely useful when placing text in your axes, because you often want a text bubble in a ﬁxed,
location, e.g., the upper left of the axes pane, and have that location remain ﬁxed when you pan or zoom.
Here is a simple example that creates four panels and labels them ‘A’, ‘B’, ‘C’, ‘D’ as you often see in
journals.
import numpy as np
import matplotlib.pyplot as plt
fig = plt.figure()
for i, label in enumerate(('A', 'B', 'C', 'D')):
ax = fig.add_subplot(2,2,i+1)
ax.text(0.05, 0.95, label, transform=ax.transAxes,
fontsize=16, fontweight='bold', va='top')
plt.show()
80 Chapter 3. Tutorials",0.0098559856414794,"6>
Matplotlib, Release 2.0.2
  Property
alpha animated axes clip_box clip_on clip_path contains figure label picker transform visible zorder rasterized
Description
The transparency - a scalar from 0-1
A boolean that is used to facilitate animated drawing
The axes that the Artist lives in, possibly None
The bounding box that clips the Artist
Whether clipping is enabled
The path the artist is clipped to
A picking function to test whether the artist contains the pick point
The figure instance the artist lives in, possibly None
A text label (e.g., for auto-labeling)
A python object that controls object picking
The transformation
A boolean whether the artist should be drawn
A number which determines the drawing order
Boolean; Turns vectors into rastergraphics: (for compression & eps transparency)
               Each of the properties is accessed with an old-fashioned setter or getter (yes we know this irritates Python- istas and we plan to support direct access via properties or traits but it hasn’t been done yet). For example, to multiply the current alpha by a half:
If you want to set a number of properties at once, you can also use the set method with keyword arguments. For example:
o.set(alpha=0.5, zorder=2)
If you are working interactively at the python shell, a handy way to inspect the Artist properties is to use the matplotlib.artist.getp() function (simply getp() in pylab), which lists the properties and their values. This works for classes derived from Artist as well, e.g., Figure and Rectangle. Here are the Figure rectangle properties mentioned above:
    a = o.get_alpha()
o.set_alpha(0.5*a)
        In [149]: matplotlib.artist.getp(fig.patch) alpha = 1.0
    animated = False
    antialiased or aa = True
    axes = None
    clip_box = None
    clip_on = False
    clip_path = None
    contains = None
    edgecolor or ec = w
    facecolor or fc = 0.75
    figure = Figure(8.125x6.125)
    fill = 1
    hatch = None
    height = 1
    label =
    linewidth or lw = 1.0
    picker = None
  58 Chapter3. Tutorials

"
92,8.0,matplotlib_81-101_pdf.pdf ~ 8,"Matplotlib, Release 2.0.2
0.00 0.25 0.50 0.75 1.00
0.0
0.2
0.4
0.6
0.8
1.0
A
0.00 0.25 0.50 0.75 1.00
0.0
0.2
0.4
0.6
0.8
1.0
B
0.00 0.25 0.50 0.75 1.00
0.0
0.2
0.4
0.6
0.8
1.0
C
0.00 0.25 0.50 0.75 1.00
0.0
0.2
0.4
0.6
0.8
1.0
D
You can also make lines or patches in the axes coordinate system, but this is less useful in my experience
than using ax.transAxes for placing text. Nonetheless, here is a silly example which plots some random
dots in dataspace, and overlays a semi-transparent Circle centered in the middle of the axes with a radius
one quarter of the axes – if your axes does not preserve aspect ratio (seeset_aspect()), this will look like
an ellipse. Use the pan /zoom tool to move around, or manually change the data xlim and ylim, and you
will see the data move, but the circle will remain ﬁxed because it is not indatacoordinates and will always
remain at the center of the axes.
import numpy as np
import matplotlib.pyplot as plt
import matplotlib.patches as patches
fig = plt.figure()
ax = fig.add_subplot(111)
x, y = 10*np.random.rand(2, 1000)
ax.plot(x, y, 'go') # plot some data in data coordinates
circ = patches.Circle((0.5, 0.5), 0.25, transform=ax.transAxes,
facecolor='yellow', alpha=0.5)
ax.add_patch(circ)
plt.show()
3.3. Advanced 81",0.0094110965728759,"Matplotlib, Release 2.0.2
0.00
0.25
0.50
0.75
1.00
0.0
0.2
0.4
0.6
0.8
1.0
A
0.00
0.25
0.50
0.75
1.00
0.0
0.2
0.4
0.6
0.8
1.0
B
0.00
0.25
0.50
0.75
1.00
0.0
0.2
0.4
0.6
0.8
1.0
C
0.00
0.25
0.50
0.75
1.00
0.0
0.2
0.4
0.6
0.8
1.0
D
You can also make lines or patches in the axes coordinate system, but this is less useful in my experience
than using ax.transAxes for placing text. Nonetheless, here is a silly example which plots some random
dots in data space, and overlays a semi-transparent Circle centered in the middle of the axes with a radius
one quarter of the axes – if your axes does not preserve aspect ratio (see set_aspect()), this will look like
an ellipse. Use the pan/zoom tool to move around, or manually change the data xlim and ylim, and you
will see the data move, but the circle will remain ﬁxed because it is not in data coordinates and will always
remain at the center of the axes.
import numpy as np
import matplotlib.pyplot as plt
import matplotlib.patches as patches
fig = plt.figure()
ax = fig.add_subplot(111)
x, y = 10*np.random.rand(2, 1000)
ax.plot(x, y, 'go')
# plot some data in data coordinates
circ = patches.Circle((0.5, 0.5), 0.25, transform=ax.transAxes,
facecolor='yellow', alpha=0.5)
ax.add_patch(circ)
plt.show()
3.3. Advanced
81
",0.0016100406646728,"Matplotlib, Release 2.0.2
0.00 0.25 0.50 0.75 1.00
0.0
0.2
0.4
0.6
0.8
1.0
A
0.00 0.25 0.50 0.75 1.00
0.0
0.2
0.4
0.6
0.8
1.0
B
0.00 0.25 0.50 0.75 1.00
0.0
0.2
0.4
0.6
0.8
1.0
C
0.00 0.25 0.50 0.75 1.00
0.0
0.2
0.4
0.6
0.8
1.0
D
You can also make lines or patches in the axes coordinate system, but this is less useful in my experience
than using ax.transAxes for placing text. Nonetheless, here is a silly example which plots some random
dots in dataspace, and overlays a semi-transparent Circle centered in the middle of the axes with a radius
one quarter of the axes – if your axes does not preserve aspect ratio (seeset_aspect()), this will look like
an ellipse. Use the pan /zoom tool to move around, or manually change the data xlim and ylim, and you
will see the data move, but the circle will remain ﬁxed because it is not indatacoordinates and will always
remain at the center of the axes.
import numpy as np
import matplotlib.pyplot as plt
import matplotlib.patches as patches
fig = plt.figure()
ax = fig.add_subplot(111)
x, y = 10*np.random.rand(2, 1000)
ax.plot(x, y, 'go') # plot some data in data coordinates
circ = patches.Circle((0.5, 0.5), 0.25, transform=ax.transAxes,
facecolor='yellow', alpha=0.5)
ax.add_patch(circ)
plt.show()
3.3. Advanced 81",0.0089569091796875,"7>
Matplotlib, Release 2.0.2
     transform = <Affine object at 0x134cca84>
verts = ((0, 0), (0, 1), (1, 1), (1, 0))
visible = True
width = 1
window_extent = <Bbox object at 0x134acbcc> x=0
y=0
zorder = 1
 The docstrings for all of the classes also contain the Artist properties, so you can consult the interactive “help” or the artist Module for a listing of properties for a given object.
Object containers
Now that we know how to inspect and set the properties of a given object we want to configure, we need to know how to get at that object. As mentioned in the introduction, there are two kinds of objects: primitives and containers. The primitives are usually the things you want to configure (the font of a Text instance, the width of a Line2D) although the containers also have some properties as well – for example the Axes Artist is a container that contains many of the primitives in your plot, but it also has properties like the xscale to control whether the xaxis is ‘linear’ or ‘log’. In this section we’ll review where the various container objects store the Artists that you want to get at.
Figure container
The top level container Artist is the matplotlib.figure.Figure, and it contains everything in the figure. The background of the figure is a Rectangle which is stored in Figure.patch. As you add subplots (add_subplot()) and axes (add_axes()) to the figure these will be appended to the Figure. axes. These are also returned by the methods that create them:
    In [156]: fig = plt.figure()
In [157]: ax1 = fig.add_subplot(211)
In [158]: ax2 = fig.add_axes([0.1, 0.1, 0.7, 0.3])
In [159]: ax1
Out[159]: <matplotlib.axes.Subplot instance at 0xd54b26c>
In [160]: print fig.axes
[<matplotlib.axes.Subplot instance at 0xd54b26c>, <matplotlib.axes.Axes instance at␣
,→0xd3f0b2c>]
 Because the figure maintains the concept of the “current axes” (see Figure.gca and Figure.sca) to support the pylab/pyplot state machine, you should not insert or remove axes directly from the axes list, but rather use the add_subplot() and add_axes() methods to insert, and the delaxes() method to delete. You are free however, to iterate over the list of axes or index into it to get access to Axes instances you want to customize. Here is an example which turns all the axes grids on:
 3.2. Intermediate 59

"
93,9.0,matplotlib_81-101_pdf.pdf ~ 9,"Matplotlib, Release 2.0.2
0 2 4 6 8 10
0
2
4
6
8
10
Blended transformations
Drawing in blended coordinate spaces which mix axes with data coordinates is extremely useful, for
example to create a horizontal span which highlights some region of the y-data but spans across the x-axis
regardless of the data limits, pan or zoom level, etc. In fact these blended lines and spans are so useful, we
have built in functions to make them easy to plot (see axhline(), axvline(), axhspan(), axvspan())
but for didactic purposes we will implement the horizontal span here using a blended transformation. This
trick only works for separable transformations, like you see in normal Cartesian coordinate systems, but not
on inseparable transformations like the PolarTransform.
import numpy as np
import matplotlib.pyplot as plt
import matplotlib.patches as patches
import matplotlib.transforms as transforms
fig = plt.figure()
ax = fig.add_subplot(111)
x = np.random.randn(1000)
ax.hist(x, 30)
ax.set_title(r'$\sigma=1 \/ \dots \/ \sigma=2$', fontsize=16)
# the x coords of this transformation are data, and the
82 Chapter 3. Tutorials",0.0214190483093261,"Matplotlib, Release 2.0.2
0
2
4
6
8
10
0
2
4
6
8
10
Blended transformations
Drawing in blended coordinate spaces which mix axes with data coordinates is extremely useful, for
example to create a horizontal span which highlights some region of the y-data but spans across the x-axis
regardless of the data limits, pan or zoom level, etc. In fact these blended lines and spans are so useful, we
have built in functions to make them easy to plot (see axhline(), axvline(), axhspan(), axvspan())
but for didactic purposes we will implement the horizontal span here using a blended transformation. This
trick only works for separable transformations, like you see in normal Cartesian coordinate systems, but not
on inseparable transformations like the PolarTransform.
import numpy as np
import matplotlib.pyplot as plt
import matplotlib.patches as patches
import matplotlib.transforms as transforms
fig = plt.figure()
ax = fig.add_subplot(111)
x = np.random.randn(1000)
ax.hist(x, 30)
ax.set_title(r'$\sigma=1 \/ \dots \/ \sigma=2$', fontsize=16)
# the x coords of this transformation are data, and the
82
Chapter 3. Tutorials
",0.0113661289215087,"Matplotlib, Release 2.0.2
0 2 4 6 8 10
0
2
4
6
8
10
Blended transformations
Drawing in blended coordinate spaces which mix axes with data coordinates is extremely useful, for
example to create a horizontal span which highlights some region of the y-data but spans across the x-axis
regardless of the data limits, pan or zoom level, etc. In fact these blended lines and spans are so useful, we
have built in functions to make them easy to plot (see axhline(), axvline(), axhspan(), axvspan())
but for didactic purposes we will implement the horizontal span here using a blended transformation. This
trick only works for separable transformations, like you see in normal Cartesian coordinate systems, but not
on inseparable transformations like the PolarTransform.
import numpy as np
import matplotlib.pyplot as plt
import matplotlib.patches as patches
import matplotlib.transforms as transforms
fig = plt.figure()
ax = fig.add_subplot(111)
x = np.random.randn(1000)
ax.hist(x, 30)
ax.set_title(r'$\sigma=1 \/ \dots \/ \sigma=2$', fontsize=16)
# the x coords of this transformation are data, and the
82 Chapter 3. Tutorials",0.0204250812530517,"8>
Matplotlib, Release 2.0.2
     for ax in fig.axes: ax.grid(True)
 The figure also has its own text, lines, patches and images, which you can use to add primitives directly. The default coordinate system for the Figure will simply be in pixels (which is not usually what you want) but you can control this by setting the transform property of the Artist you are adding to the figure.
More useful is “figure coordinates” where (0, 0) is the bottom-left of the figure and (1, 1) is the top-right of the figure which you can obtain by setting the Artist transform to fig.transFigure:
    In [191]: fig = plt.figure()
In [192]: l1 = matplotlib.lines.Line2D([0, 1], [0, 1],
           transform=fig.transFigure, figure=fig)
In [193]: l2 = matplotlib.lines.Line2D([0, 1], [1, 0], transform=fig.transFigure, figure=fig)
In [194]: fig.lines.extend([l1, l2]) In [195]: fig.canvas.draw()
  Here is a summary of the Artists the figure contains
 60 Chapter3. Tutorials

"
94,10.0,matplotlib_81-101_pdf.pdf ~ 10,"Matplotlib, Release 2.0.2
# y coord are axes
trans = transforms.blended_transform_factory(
ax.transData, ax.transAxes)
# highlight the 1..2 stddev region with a span.
# We want x to be in data coordinates and y to
# span from 0..1 in axes coords
rect = patches.Rectangle((1,0), width=1, height=1,
transform=trans, color='yellow',
alpha=0.5)
ax.add_patch(rect)
plt.show()
3
 2
 1
 0 1 2 3 4
0
20
40
60
80
100
= 1 = 2
Note: The blended transformations where x is in data coords and y in axes coordinates is so useful
that we have helper methods to return the versions mpl uses internally for drawing ticks, ticklabels, etc.
The methods are matplotlib.axes.Axes.get_xaxis_transform() and matplotlib.axes.Axes.
get_yaxis_transform(). So in the example above, the call to blended_transform_factory() can
be replaced by get_xaxis_transform:
trans = ax.get_xaxis_transform()
3.3. Advanced 83",0.008005142211914,"Matplotlib, Release 2.0.2
# y coord are axes
trans = transforms.blended_transform_factory(
ax.transData, ax.transAxes)
# highlight the 1..2 stddev region with a span.
# We want x to be in data coordinates and y to
# span from 0..1 in axes coords
rect = patches.Rectangle((1,0), width=1, height=1,
transform=trans, color='yellow',
alpha=0.5)
ax.add_patch(rect)
plt.show()
3
2
1
0
1
2
3
4
0
20
40
60
80
100
= 1
= 2
Note:
The blended transformations where x is in data coords and y in axes coordinates is so useful
that we have helper methods to return the versions mpl uses internally for drawing ticks, ticklabels, etc.
The methods are matplotlib.axes.Axes.get_xaxis_transform() and matplotlib.axes.Axes.
get_yaxis_transform(). So in the example above, the call to blended_transform_factory() can
be replaced by get_xaxis_transform:
trans = ax.get_xaxis_transform()
3.3. Advanced
83
",0.0014851093292236,"Matplotlib, Release 2.0.2
# y coord are axes
trans = transforms.blended_transform_factory(
ax.transData, ax.transAxes)
# highlight the 1..2 stddev region with a span.
# We want x to be in data coordinates and y to
# span from 0..1 in axes coords
rect = patches.Rectangle((1,0), width=1, height=1,
transform=trans, color='yellow',
alpha=0.5)
ax.add_patch(rect)
plt.show()
3
 2
 1
 0 1 2 3 4
0
20
40
60
80
100
= 1 = 2
Note: The blended transformations where x is in data coords and y in axes coordinates is so useful
that we have helper methods to return the versions mpl uses internally for drawing ticks, ticklabels, etc.
The methods are matplotlib.axes.Axes.get_xaxis_transform() and matplotlib.axes.Axes.
get_yaxis_transform(). So in the example above, the call to blended_transform_factory() can
be replaced by get_xaxis_transform:
trans = ax.get_xaxis_transform()
3.3. Advanced 83",0.0078561305999755,"9>
Figure attribute
axes patch images legends lines patches texts
Axes container
Description
A list of Axes instances (includes Subplot)
The Rectangle background
A list of FigureImages patches - useful for raw pixel display
A list of Figure Legend instances (different from Axes.legends) A list of Figure Line2D instances (rarely used, see Axes.lines) A list of Figure patches (rarely used, see Axes.patches)
A list Figure Text instances
Matplotlib, Release 2.0.2
          The matplotlib.axes.Axes is the center of the matplotlib universe – it contains the vast majority of all the Artists used in a figure with many helper methods to create and add these Artists to itself, as well as helper methods to access and customize the Artists it contains. Like the Figure, it contains a Patch patch which is a Rectangle for Cartesian coordinates and a Circle for polar coordinates; this patch determines the shape, background and border of the plotting region:
When you call a plotting method, e.g., the canonical plot() and pass in arrays or lists of values, the method will create a matplotlib.lines.Line2D() instance, update the line with all the Line2D properties passed as keyword arguments, add the line to the Axes.lines container, and returns it to you:
plot returns a list of lines because you can pass in multiple x, y pairs to plot, and we are unpacking the first element of the length one list into the line variable. The line has been added to the Axes.lines list:
Similarly, methods that create patches, like bar() creates a list of rectangles, will add the patches to the Axes.patches list:
You should not add objects directly to the Axes.lines or Axes.patches lists unless you know exactly what you are doing, because the Axes needs to do a few things when it creates and adds an object. It sets the figure and axes property of the Artist, as well as the default Axes transformation (unless a transformation is set). It also inspects the data contained in the Artist to update the data structures controlling auto-scaling,
    ax = fig.add_subplot(111)
rect = ax.patch # a Rectangle instance rect.set_facecolor('green')
     In [213]: x, y = np.random.rand(2, 100)
In [214]: line, = ax.plot(x, y, '-', color='blue', linewidth=2)
     In [229]: print ax.lines [<matplotlib.lines.Line2D instance at 0xd378b0c>]
     In [233]: n, bins, rectangles = ax.hist(np.random.randn(1000), 50, facecolor='yellow') In [234]: rectangles
Out[234]: <a list of 50 Patch objects> In [235]: print len(ax.patches)
  3.2. Intermediate 61

"
95,11.0,matplotlib_81-101_pdf.pdf ~ 11,"Matplotlib, Release 2.0.2
Using offset transforms to create a shadow effect
One use of transformations is to create a new transformation that is oﬀset from another transformation, e.g.,
to place one object shifted a bit relative to another object. Typically you want the shift to be in some physical
dimension, like points or inches rather than in data coordinates, so that the shift eﬀect is constant at diﬀerent
zoom levels and dpi settings.
One use for an oﬀset is to create a shadow eﬀect, where you draw one object identical to the ﬁrst just to the
right of it, and just below it, adjusting the zorder to make sure the shadow is drawn ﬁrst and then the object
it is shadowing above it. The transforms module has a helper transformation ScaledTranslation. It is
instantiated with:
trans = ScaledTranslation(xt, yt, scale_trans)
where xt and yt are the translation o ﬀsets, and scale_trans is a transformation which scales xt and
yt at transformation time before applying the o ﬀsets. A typical use case is to use the ﬁgure fig.
dpi_scale_trans transformation for the scale_trans argument, to ﬁrst scale xt and yt speciﬁed in
points to display space before doing the ﬁnal o ﬀset. The dpi and inches o ﬀset is a common-enough use
case that we have a special helper function to create it in matplotlib.transforms.offset_copy(),
which returns a new transform with an added o ﬀset. But in the example below, we’ll create the o ﬀset
transform ourselves. Note the use of the plus operator in:
offset = transforms.ScaledTranslation(dx, dy,
fig.dpi_scale_trans)
shadow_transform = ax.transData + offset
showing that can chain transformations using the addition operator. This code says: ﬁrst apply the data
transformation ax.transData and then translate the data by dx and dy points. In typography, a‘point
<https://en.wikipedia.org/wiki/Point_%28typography%29>‘_ is 1/72 inches, and by specifying your oﬀsets
in points, your ﬁgure will look the same regardless of the dpi resolution it is saved in.
import numpy as np
import matplotlib.pyplot as plt
import matplotlib.patches as patches
import matplotlib.transforms as transforms
fig = plt.figure()
ax = fig.add_subplot(111)
# make a simple sine wave
x = np.arange(0., 2., 0.01)
y = np.sin(2*np.pi*x)
line, = ax.plot(x, y, lw=3, color='blue')
# shift the object over 2 points, and down 2 points
dx, dy = 2/72., -2/72.
offset = transforms.ScaledTranslation(dx, dy,
fig.dpi_scale_trans)
shadow_transform = ax.transData + offset
# now plot the same data with our offset transform;
# use the zorder to make sure we are below the line
84 Chapter 3. Tutorials",0.0097599029541015,"Matplotlib, Release 2.0.2
Using offset transforms to create a shadow effect
One use of transformations is to create a new transformation that is oﬀset from another transformation, e.g.,
to place one object shifted a bit relative to another object. Typically you want the shift to be in some physical
dimension, like points or inches rather than in data coordinates, so that the shift eﬀect is constant at diﬀerent
zoom levels and dpi settings.
One use for an oﬀset is to create a shadow eﬀect, where you draw one object identical to the ﬁrst just to the
right of it, and just below it, adjusting the zorder to make sure the shadow is drawn ﬁrst and then the object
it is shadowing above it. The transforms module has a helper transformation ScaledTranslation. It is
instantiated with:
trans = ScaledTranslation(xt, yt, scale_trans)
where xt and yt are the translation oﬀsets, and scale_trans is a transformation which scales xt and
yt at transformation time before applying the oﬀsets.
A typical use case is to use the ﬁgure fig.
dpi_scale_trans transformation for the scale_trans argument, to ﬁrst scale xt and yt speciﬁed in
points to display space before doing the ﬁnal oﬀset. The dpi and inches oﬀset is a common-enough use
case that we have a special helper function to create it in matplotlib.transforms.offset_copy(),
which returns a new transform with an added oﬀset. But in the example below, we’ll create the oﬀset
transform ourselves. Note the use of the plus operator in:
offset = transforms.ScaledTranslation(dx, dy,
fig.dpi_scale_trans)
shadow_transform = ax.transData + offset
showing that can chain transformations using the addition operator. This code says: ﬁrst apply the data
transformation ax.transData and then translate the data by dx and dy points. In typography, a‘point
<https://en.wikipedia.org/wiki/Point_%28typography%29>‘_ is 1/72 inches, and by specifying your oﬀsets
in points, your ﬁgure will look the same regardless of the dpi resolution it is saved in.
import numpy as np
import matplotlib.pyplot as plt
import matplotlib.patches as patches
import matplotlib.transforms as transforms
fig = plt.figure()
ax = fig.add_subplot(111)
# make a simple sine wave
x = np.arange(0., 2., 0.01)
y = np.sin(2*np.pi*x)
line, = ax.plot(x, y, lw=3, color='blue')
# shift the object over 2 points, and down 2 points
dx, dy = 2/72., -2/72.
offset = transforms.ScaledTranslation(dx, dy,
fig.dpi_scale_trans)
shadow_transform = ax.transData + offset
# now plot the same data with our offset transform;
# use the zorder to make sure we are below the line
84
Chapter 3. Tutorials
",0.0025532245635986,"Matplotlib, Release 2.0.2
Using offset transforms to create a shadow effect
One use of transformations is to create a new transformation that is oﬀset from another transformation, e.g.,
to place one object shifted a bit relative to another object. Typically you want the shift to be in some physical
dimension, like points or inches rather than in data coordinates, so that the shift eﬀect is constant at diﬀerent
zoom levels and dpi settings.
One use for an oﬀset is to create a shadow eﬀect, where you draw one object identical to the ﬁrst just to the
right of it, and just below it, adjusting the zorder to make sure the shadow is drawn ﬁrst and then the object
it is shadowing above it. The transforms module has a helper transformation ScaledTranslation. It is
instantiated with:
trans = ScaledTranslation(xt, yt, scale_trans)
where xt and yt are the translation o ﬀsets, and scale_trans is a transformation which scales xt and
yt at transformation time before applying the o ﬀsets. A typical use case is to use the ﬁgure fig.
dpi_scale_trans transformation for the scale_trans argument, to ﬁrst scale xt and yt speciﬁed in
points to display space before doing the ﬁnal o ﬀset. The dpi and inches o ﬀset is a common-enough use
case that we have a special helper function to create it in matplotlib.transforms.offset_copy(),
which returns a new transform with an added o ﬀset. But in the example below, we’ll create the o ﬀset
transform ourselves. Note the use of the plus operator in:
offset = transforms.ScaledTranslation(dx, dy,
fig.dpi_scale_trans)
shadow_transform = ax.transData + offset
showing that can chain transformations using the addition operator. This code says: ﬁrst apply the data
transformation ax.transData and then translate the data by dx and dy points. In typography, a‘point
<https://en.wikipedia.org/wiki/Point_%28typography%29>‘_ is 1/72 inches, and by specifying your oﬀsets
in points, your ﬁgure will look the same regardless of the dpi resolution it is saved in.
import numpy as np
import matplotlib.pyplot as plt
import matplotlib.patches as patches
import matplotlib.transforms as transforms
fig = plt.figure()
ax = fig.add_subplot(111)
# make a simple sine wave
x = np.arange(0., 2., 0.01)
y = np.sin(2*np.pi*x)
line, = ax.plot(x, y, lw=3, color='blue')
# shift the object over 2 points, and down 2 points
dx, dy = 2/72., -2/72.
offset = transforms.ScaledTranslation(dx, dy,
fig.dpi_scale_trans)
shadow_transform = ax.transData + offset
# now plot the same data with our offset transform;
# use the zorder to make sure we are below the line
84 Chapter 3. Tutorials",0.0101900100708007,"10>
Matplotlib, Release 2.0.2
 so that the view limits can be adjusted to contain the plotted data. You can, nonetheless, create objects yourself and add them directly to the Axes using helper methods like add_line() and add_patch(). Here is an annotated interactive session illustrating what is going on:
    In [261]: fig = plt.figure()
In [262]: ax = fig.add_subplot(111)
# create a rectangle instance
In [263]: rect = matplotlib.patches.Rectangle( (1,1), width=5, height=12)
# by default the axes instance is None
In [264]: print rect.get_axes() None
# and the transformation instance is set to the ""identity transform""
In [265]: print rect.get_transform() <Affine object at 0x13695544>
# now we add the Rectangle to the Axes
In [266]: ax.add_patch(rect)
# and notice that the ax.add_patch method has set the axes # instance
In [267]: print rect.get_axes()
Axes(0.125,0.1;0.775x0.8)
# and the transformation has been set too
In [268]: print rect.get_transform() <Affine object at 0x15009ca4>
# the default axes transformation is ax.transData
In [269]: print ax.transData <Affine object at 0x15009ca4>
# notice that the xlimits of the Axes have not been changed
In [270]: print ax.get_xlim() (0.0, 1.0)
# but the data limits have been updated to encompass the rectangle
In [271]: print ax.dataLim.bounds (1.0, 1.0, 5.0, 12.0)
# we can manually invoke the auto-scaling machinery
In [272]: ax.autoscale_view()
# and now the xlim are updated to encompass the rectangle
In [273]: print ax.get_xlim() (1.0, 6.0)
# we have to manually force a figure draw
In [274]: ax.figure.canvas.draw()
  62 Chapter3. Tutorials

"
96,12.0,matplotlib_81-101_pdf.pdf ~ 12,"Matplotlib, Release 2.0.2
ax.plot(x, y, lw=3, color='gray',
transform=shadow_transform,
zorder=0.5*line.get_zorder())
ax.set_title('creating a shadow effect with an offset transform')
plt.show()
0.00 0.25 0.50 0.75 1.00 1.25 1.50 1.75 2.00
1.00
0.75
0.50
0.25
0.00
0.25
0.50
0.75
1.00
creating a shadow effect with an offset transform
The transformation pipeline
The ax.transData transform we have been working with in this tutorial is a composite of three di ﬀerent
transformations that comprise the transformation pipeline from data -> display coordinates. Michael
Droettboom implemented the transformations framework, taking care to provide a clean API that segre-
gated the nonlinear projections and scales that happen in polar and logarithmic plots, from the linear a ﬃne
transformations that happen when you pan and zoom. There is an e ﬃciency here, because you can pan and
zoom in your axes which aﬀects the aﬃne transformation, but you may not need to compute the potentially
expensive nonlinear scales or projections on simple navigation events. It is also possible to multiply a ﬃne
transformation matrices together, and then apply them to coordinates in one step. This is not true of all
possible transformations.
Here is how the ax.transDatainstance is deﬁned in the basic separable axis Axes class:
self.transData = self.transScale + (self.transLimits + self.transAxes)
3.3. Advanced 85",0.0075559616088867,"Matplotlib, Release 2.0.2
ax.plot(x, y, lw=3, color='gray',
transform=shadow_transform,
zorder=0.5*line.get_zorder())
ax.set_title('creating a shadow effect with an offset transform')
plt.show()
0.00
0.25
0.50
0.75
1.00
1.25
1.50
1.75
2.00
1.00
0.75
0.50
0.25
0.00
0.25
0.50
0.75
1.00
creating a shadow effect with an offset transform
The transformation pipeline
The ax.transData transform we have been working with in this tutorial is a composite of three diﬀerent
transformations that comprise the transformation pipeline from data -> display coordinates. Michael
Droettboom implemented the transformations framework, taking care to provide a clean API that segre-
gated the nonlinear projections and scales that happen in polar and logarithmic plots, from the linear aﬃne
transformations that happen when you pan and zoom. There is an eﬃciency here, because you can pan and
zoom in your axes which aﬀects the aﬃne transformation, but you may not need to compute the potentially
expensive nonlinear scales or projections on simple navigation events. It is also possible to multiply aﬃne
transformation matrices together, and then apply them to coordinates in one step. This is not true of all
possible transformations.
Here is how the ax.transData instance is deﬁned in the basic separable axis Axes class:
self.transData = self.transScale + (self.transLimits + self.transAxes)
3.3. Advanced
85
",0.0018501281738281,"Matplotlib, Release 2.0.2
ax.plot(x, y, lw=3, color='gray',
transform=shadow_transform,
zorder=0.5*line.get_zorder())
ax.set_title('creating a shadow effect with an offset transform')
plt.show()
0.00 0.25 0.50 0.75 1.00 1.25 1.50 1.75 2.00
1.00
0.75
0.50
0.25
0.00
0.25
0.50
0.75
1.00
creating a shadow effect with an offset transform
The transformation pipeline
The ax.transData transform we have been working with in this tutorial is a composite of three di ﬀerent
transformations that comprise the transformation pipeline from data -> display coordinates. Michael
Droettboom implemented the transformations framework, taking care to provide a clean API that segre-
gated the nonlinear projections and scales that happen in polar and logarithmic plots, from the linear a ﬃne
transformations that happen when you pan and zoom. There is an e ﬃciency here, because you can pan and
zoom in your axes which aﬀects the aﬃne transformation, but you may not need to compute the potentially
expensive nonlinear scales or projections on simple navigation events. It is also possible to multiply a ﬃne
transformation matrices together, and then apply them to coordinates in one step. This is not true of all
possible transformations.
Here is how the ax.transDatainstance is deﬁned in the basic separable axis Axes class:
self.transData = self.transScale + (self.transLimits + self.transAxes)
3.3. Advanced 85",0.0078489780426025,"11>
There are many, many Axes helper methods for creating primitive Artists and adding them to their respec- tive containers. The table below summarizes a small sampling of them, the kinds of Artist they create, and where they store them
Helper method
ax.annotate - text annotations ax.bar - bar charts ax.errorbar - error bar plots ax.fill - shared area
ax.hist - histograms ax.imshow - image data ax.legend - axes legends ax.plot - xy plots ax.scatter - scatter charts ax.text - text
Artist
Annotate
Rectangle
Line2D and Rectangle Polygon
Rectangle
AxesImage
Legend
Line2D PolygonCollection Text
Container
ax.texts
ax.patches
ax.lines and ax.patches ax.patches
ax.patches
ax.images
ax.legends
ax.lines
ax.collections
ax.texts
Matplotlib, Release 2.0.2
             In addition to all of these Artists, the Axes contains two important Artist containers: the XAxis and YAxis, which handle the drawing of the ticks and labels. These are stored as instance variables xaxis and yaxis. The XAxis and YAxis containers will be detailed below, but note that the Axes contains many helper methods which forward calls on to the Axis instances so you often do not need to work with them directly unless you want to. For example, you can set the font color of the XAxis ticklabels using the Axes helper method:
Below is a summary of the Artists that the Axes contains
    for label in ax.get_xticklabels(): label.set_color('orange')
  Axes attribute
artists patch collections images legends lines patches texts
xaxis yaxis
Axis containers
Description
A list of Artist instances
Rectangle instance for Axes background A list of Collection instances
A list of AxesImage
A list of Legend instances
A list of Line2D instances
A list of Patch instances
A list of Text instances matplotlib.axis.XAxis instance matplotlib.axis.YAxis instance
           The matplotlib.axis.Axis instances handle the drawing of the tick lines, the grid lines, the tick labels and the axis label. You can configure the left and right ticks separately for the y-axis, and the upper and lower ticks separately for the x-axis. The Axis also stores the data and view intervals used in auto-scaling, panning and zooming, as well as the Locator and Formatter instances which control where the ticks are placed and how they are represented as strings.
Each Axis object contains a label attribute (this is what pylab modifies in calls to xlabel() and 3.2. Intermediate 63

"
97,13.0,matplotlib_81-101_pdf.pdf ~ 13,"Matplotlib, Release 2.0.2
We’ve been introduced to the transAxes instance above in Axes coordinates, which maps the (0,0), (1,1)
corners of the axes or subplot bounding box to displayspace, so let’s look at these other two pieces.
self.transLimitsis the transformation that takes you from datato axescoordinates; i.e., it maps your
view xlim and ylim to the unit space of the axes (andtransAxesthen takes that unit space to display space).
We can see this in action here
In [80]: ax = subplot(111)
In [81]: ax.set_xlim(0, 10)
Out[81]: (0, 10)
In [82]: ax.set_ylim(-1,1)
Out[82]: (-1, 1)
In [84]: ax.transLimits.transform((0,-1))
Out[84]: array([ 0., 0.])
In [85]: ax.transLimits.transform((10,-1))
Out[85]: array([ 1., 0.])
In [86]: ax.transLimits.transform((10,1))
Out[86]: array([ 1., 1.])
In [87]: ax.transLimits.transform((5,0))
Out[87]: array([ 0.5, 0.5])
and we can use this same inverted transformation to go from the unit axes coordinates back to data coor-
dinates.
In [90]: inv.transform((0.25, 0.25))
Out[90]: array([ 2.5, -0.5])
The ﬁnal piece is the self.transScale attribute, which is responsible for the optional non-linear scaling
of the data, e.g., for logarithmic axes. When an Axes is initially setup, this is just set to the identity trans-
form, since the basic matplotlib axes has linear scale, but when you call a logarithmic scaling function like
semilogx() or explicitly set the scale to logarithmic with set_xscale(), then the ax.transScale at-
tribute is set to handle the nonlinear projection. The scales transforms are properties of the respectivexaxis
and yaxis Axis instances. For example, when you call ax.set_xscale('log'), the xaxis updates its
scale to a matplotlib.scale.LogScale instance.
For non-separable axes the PolarAxes, there is one more piece to consider, the projection transformation.
The transDatamatplotlib.projections.polar.PolarAxes is similar to that for the typical separable
matplotlib Axes, with one additional piece transProjection:
self.transData = self.transScale + self.transProjection + \
(self.transProjectionAffine + self.transAxes)
transProjectionhandles the projection from the space, e.g., latitude and longitude for map data, or radius
and theta for polar data, to a separable Cartesian coordinate system. There are several projection examples
in the matplotlib.projections package, and the best way to learn more is to open the source for those
packages and see how to make your own, since matplotlib supports extensible axes and projections. Michael
86 Chapter 3. Tutorials",0.0101330280303955,"Matplotlib, Release 2.0.2
We’ve been introduced to the transAxes instance above in Axes coordinates, which maps the (0,0), (1,1)
corners of the axes or subplot bounding box to display space, so let’s look at these other two pieces.
self.transLimits is the transformation that takes you from data to axes coordinates; i.e., it maps your
view xlim and ylim to the unit space of the axes (and transAxes then takes that unit space to display space).
We can see this in action here
In [80]: ax = subplot(111)
In [81]: ax.set_xlim(0, 10)
Out[81]: (0, 10)
In [82]: ax.set_ylim(-1,1)
Out[82]: (-1, 1)
In [84]: ax.transLimits.transform((0,-1))
Out[84]: array([ 0.,
0.])
In [85]: ax.transLimits.transform((10,-1))
Out[85]: array([ 1.,
0.])
In [86]: ax.transLimits.transform((10,1))
Out[86]: array([ 1.,
1.])
In [87]: ax.transLimits.transform((5,0))
Out[87]: array([ 0.5,
0.5])
and we can use this same inverted transformation to go from the unit axes coordinates back to data coor-
dinates.
In [90]: inv.transform((0.25, 0.25))
Out[90]: array([ 2.5, -0.5])
The ﬁnal piece is the self.transScale attribute, which is responsible for the optional non-linear scaling
of the data, e.g., for logarithmic axes. When an Axes is initially setup, this is just set to the identity trans-
form, since the basic matplotlib axes has linear scale, but when you call a logarithmic scaling function like
semilogx() or explicitly set the scale to logarithmic with set_xscale(), then the ax.transScale at-
tribute is set to handle the nonlinear projection. The scales transforms are properties of the respective xaxis
and yaxis Axis instances. For example, when you call ax.set_xscale('log'), the xaxis updates its
scale to a matplotlib.scale.LogScale instance.
For non-separable axes the PolarAxes, there is one more piece to consider, the projection transformation.
The transData matplotlib.projections.polar.PolarAxes is similar to that for the typical separable
matplotlib Axes, with one additional piece transProjection:
self.transData = self.transScale + self.transProjection + \
(self.transProjectionAffine + self.transAxes)
transProjection handles the projection from the space, e.g., latitude and longitude for map data, or radius
and theta for polar data, to a separable Cartesian coordinate system. There are several projection examples
in the matplotlib.projections package, and the best way to learn more is to open the source for those
packages and see how to make your own, since matplotlib supports extensible axes and projections. Michael
86
Chapter 3. Tutorials
",0.0024099349975585,"Matplotlib, Release 2.0.2
We’ve been introduced to the transAxes instance above in Axes coordinates, which maps the (0,0), (1,1)
corners of the axes or subplot bounding box to displayspace, so let’s look at these other two pieces.
self.transLimitsis the transformation that takes you from datato axescoordinates; i.e., it maps your
view xlim and ylim to the unit space of the axes (andtransAxesthen takes that unit space to display space).
We can see this in action here
In [80]: ax = subplot(111)
In [81]: ax.set_xlim(0, 10)
Out[81]: (0, 10)
In [82]: ax.set_ylim(-1,1)
Out[82]: (-1, 1)
In [84]: ax.transLimits.transform((0,-1))
Out[84]: array([ 0., 0.])
In [85]: ax.transLimits.transform((10,-1))
Out[85]: array([ 1., 0.])
In [86]: ax.transLimits.transform((10,1))
Out[86]: array([ 1., 1.])
In [87]: ax.transLimits.transform((5,0))
Out[87]: array([ 0.5, 0.5])
and we can use this same inverted transformation to go from the unit axes coordinates back to data coor-
dinates.
In [90]: inv.transform((0.25, 0.25))
Out[90]: array([ 2.5, -0.5])
The ﬁnal piece is the self.transScale attribute, which is responsible for the optional non-linear scaling
of the data, e.g., for logarithmic axes. When an Axes is initially setup, this is just set to the identity trans-
form, since the basic matplotlib axes has linear scale, but when you call a logarithmic scaling function like
semilogx() or explicitly set the scale to logarithmic with set_xscale(), then the ax.transScale at-
tribute is set to handle the nonlinear projection. The scales transforms are properties of the respectivexaxis
and yaxis Axis instances. For example, when you call ax.set_xscale('log'), the xaxis updates its
scale to a matplotlib.scale.LogScale instance.
For non-separable axes the PolarAxes, there is one more piece to consider, the projection transformation.
The transDatamatplotlib.projections.polar.PolarAxes is similar to that for the typical separable
matplotlib Axes, with one additional piece transProjection:
self.transData = self.transScale + self.transProjection + \
(self.transProjectionAffine + self.transAxes)
transProjectionhandles the projection from the space, e.g., latitude and longitude for map data, or radius
and theta for polar data, to a separable Cartesian coordinate system. There are several projection examples
in the matplotlib.projections package, and the best way to learn more is to open the source for those
packages and see how to make your own, since matplotlib supports extensible axes and projections. Michael
86 Chapter 3. Tutorials",0.0092191696166992,"12>
Matplotlib, Release 2.0.2
 ylabel()) as well as a list of major and minor ticks. The ticks are XTick and YTick instances, which contain the actual line and text primitives that render the ticks and ticklabels. Because the ticks are dynam- ically created as needed (e.g., when panning and zooming), you should access the lists of major and minor ticks through their accessor methods get_major_ticks() and get_minor_ticks(). Although the ticks contain all the primitives and will be covered below, Axis instances have accessor methods that return the tick lines, tick labels, tick locations etc.:
    In [285]: axis = ax.xaxis
In [286]: axis.get_ticklocs()
Out[286]: array([ 0., 1., 2., 3., 4., 5., 6., 7., 8., 9.]) In [287]: axis.get_ticklabels()
Out[287]: <a list of 10 Text major ticklabel objects>
# note there are twice as many ticklines as labels because by
# default there are tick lines at the top and bottom but only tick # labels below the xaxis; this can be customized
In [288]: axis.get_ticklines()
Out[288]: <a list of 20 Line2D ticklines objects>
# by default you get the major ticks back
In [291]: axis.get_ticklines()
Out[291]: <a list of 20 Line2D ticklines objects>
# but you can also ask for the minor ticks
In [292]: axis.get_ticklines(minor=True) Out[292]: <a list of 0 Line2D ticklines objects>
 Here is a summary of some of the useful accessor methods of the Axis (these have corresponding setters where useful, such as set_major_formatter)
 Accessor method
get_scale get_view_interval get_data_interval get_gridlines get_label get_ticklabels get_ticklines get_ticklocs get_major_locator get_major_formatter get_minor_locator get_minor_formatter get_major_ticks get_minor_ticks grid
Description
The scale of the axis, e.g., ‘log’ or ‘linear’ The interval instance of the axis view limits The interval instance of the axis data limits A list of grid lines for the Axis
The axis label - a Text instance
A list of Text instances - keyword minor=True|False
A list of Line2D instances - keyword minor=True|False A list of Tick locations - keyword minor=True|False The matplotlib.ticker.Locator instance for major ticks The matplotlib.ticker.Formatter instance for major ticks The matplotlib.ticker.Locator instance for minor ticks The matplotlib.ticker.Formatter instance for minor ticks A list of Tick instances for major ticks
A list of Tick instances for minor ticks
Turn the grid on or off for the major or minor ticks
                Here is an example, not recommended for its beauty, which customizes the axes and tick properties
 64 Chapter3. Tutorials

"
98,14.0,matplotlib_81-101_pdf.pdf ~ 14,"Matplotlib, Release 2.0.2
Droettboom has provided a nice tutorial example of creating a hammer projection axes; see api example
code: custom_projection_example.py.
3.3.2 Path Tutorial
The object underlying all of thematplotlib.patchobjects is the Path, which supports the standard set of
moveto, lineto, curveto commands to draw simple and compound outlines consisting of line segments and
splines. The Pathis instantiated with a (N,2) array of (x,y) vertices, and a N-length array of path codes. For
example to draw the unit rectangle from (0,0) to (1,1), we could use this code
import matplotlib.pyplot as plt
from matplotlib.path import Path
import matplotlib.patches as patches
verts = [
(0., 0.), # left, bottom
(0., 1.), # left, top
(1., 1.), # right, top
(1., 0.), # right, bottom
(0., 0.), # ignored
]
codes = [Path.MOVETO,
Path.LINETO,
Path.LINETO,
Path.LINETO,
Path.CLOSEPOLY,
]
path = Path(verts, codes)
fig = plt.figure()
ax = fig.add_subplot(111)
patch = patches.PathPatch(path, facecolor='orange', lw=2)
ax.add_patch(patch)
ax.set_xlim(-2,2)
ax.set_ylim(-2,2)
plt.show()
3.3. Advanced 87",0.0066020488739013,"Matplotlib, Release 2.0.2
Droettboom has provided a nice tutorial example of creating a hammer projection axes; see api example
code: custom_projection_example.py.
3.3.2 Path Tutorial
The object underlying all of the matplotlib.patch objects is the Path, which supports the standard set of
moveto, lineto, curveto commands to draw simple and compound outlines consisting of line segments and
splines. The Path is instantiated with a (N,2) array of (x,y) vertices, and a N-length array of path codes. For
example to draw the unit rectangle from (0,0) to (1,1), we could use this code
import matplotlib.pyplot as plt
from matplotlib.path import Path
import matplotlib.patches as patches
verts = [
(0., 0.), # left, bottom
(0., 1.), # left, top
(1., 1.), # right, top
(1., 0.), # right, bottom
(0., 0.), # ignored
]
codes = [Path.MOVETO,
Path.LINETO,
Path.LINETO,
Path.LINETO,
Path.CLOSEPOLY,
]
path = Path(verts, codes)
fig = plt.figure()
ax = fig.add_subplot(111)
patch = patches.PathPatch(path, facecolor='orange', lw=2)
ax.add_patch(patch)
ax.set_xlim(-2,2)
ax.set_ylim(-2,2)
plt.show()
3.3. Advanced
87
",0.0012187957763671,"Matplotlib, Release 2.0.2
Droettboom has provided a nice tutorial example of creating a hammer projection axes; see api example
code: custom_projection_example.py.
3.3.2 Path Tutorial
The object underlying all of thematplotlib.patchobjects is the Path, which supports the standard set of
moveto, lineto, curveto commands to draw simple and compound outlines consisting of line segments and
splines. The Pathis instantiated with a (N,2) array of (x,y) vertices, and a N-length array of path codes. For
example to draw the unit rectangle from (0,0) to (1,1), we could use this code
import matplotlib.pyplot as plt
from matplotlib.path import Path
import matplotlib.patches as patches
verts = [
(0., 0.), # left, bottom
(0., 1.), # left, top
(1., 1.), # right, top
(1., 0.), # right, bottom
(0., 0.), # ignored
]
codes = [Path.MOVETO,
Path.LINETO,
Path.LINETO,
Path.LINETO,
Path.CLOSEPOLY,
]
path = Path(verts, codes)
fig = plt.figure()
ax = fig.add_subplot(111)
patch = patches.PathPatch(path, facecolor='orange', lw=2)
ax.add_patch(patch)
ax.set_xlim(-2,2)
ax.set_ylim(-2,2)
plt.show()
3.3. Advanced 87",0.0056180953979492,"13>
Matplotlib, Release 2.0.2
     import numpy as np
import matplotlib.pyplot as plt
# plt.figure creates a matplotlib.figure.Figure instance
fig = plt.figure()
rect = fig.patch # a rectangle instance rect.set_facecolor('lightgoldenrodyellow')
ax1 = fig.add_axes([0.1, 0.3, 0.4, 0.4]) rect = ax1.patch rect.set_facecolor('lightslategray')
for label in ax1.xaxis.get_ticklabels(): # label is a Text instance label.set_color('red') label.set_rotation(45) label.set_fontsize(16)
for line in ax1.yaxis.get_ticklines(): # line is a Line2D instance line.set_color('green') line.set_markersize(25) line.set_markeredgewidth(3)
plt.show()
  3.2. Intermediate 65

"
99,15.0,matplotlib_81-101_pdf.pdf ~ 15,"Matplotlib, Release 2.0.2
2.0
 1.5
 1.0
 0.5
 0.0 0.5 1.0 1.5 2.0
2.0
1.5
1.0
0.5
0.0
0.5
1.0
1.5
2.0
The following path codes are recognized
Code Vertices Description
STOP 1 (ignored) A marker for the end of the entire path (currently not required and
ignored)
MOVETO 1 Pick up the pen and move to the given vertex.
LINETO 1 Draw a line from the current position to the given vertex.
CURVE3 2 (1 control point, 1
endpoint)
Draw a quadratic Bézier curve from the current position, with the
given control point, to the given end point.
CURVE4 3 (2 control points,
1 endpoint)
Draw a cubic Bézier curve from the current position, with the given
control points, to the given end point.
CLOSEPOLY1 (point itself is
ignored)
Draw a line segment to the start point of the current polyline.
Bézier example
Some of the path components require multiple vertices to specify them: for example CURVE 3 is a bézier
curve with one control point and one end point, and CURVE4 has three vertices for the two control points
and the end point. The example below shows a CURVE4 Bézier spline – the bézier curve will be contained
in the convex hull of the start point, the two control points, and the end point
import matplotlib.pyplot as plt
from matplotlib.path import Path
88 Chapter 3. Tutorials",0.0072829723358154,"Matplotlib, Release 2.0.2
2.0
1.5
1.0
0.5
0.0
0.5
1.0
1.5
2.0
2.0
1.5
1.0
0.5
0.0
0.5
1.0
1.5
2.0
The following path codes are recognized
Code
Vertices
Description
STOP
1 (ignored)
A marker for the end of the entire path (currently not required and
ignored)
MOVETO
1
Pick up the pen and move to the given vertex.
LINETO
1
Draw a line from the current position to the given vertex.
CURVE3
2 (1 control point, 1
endpoint)
Draw a quadratic Bézier curve from the current position, with the
given control point, to the given end point.
CURVE4
3 (2 control points,
1 endpoint)
Draw a cubic Bézier curve from the current position, with the given
control points, to the given end point.
CLOSEPOLY1 (point itself is
ignored)
Draw a line segment to the start point of the current polyline.
Bézier example
Some of the path components require multiple vertices to specify them: for example CURVE 3 is a bézier
curve with one control point and one end point, and CURVE4 has three vertices for the two control points
and the end point. The example below shows a CURVE4 Bézier spline – the bézier curve will be contained
in the convex hull of the start point, the two control points, and the end point
import matplotlib.pyplot as plt
from matplotlib.path import Path
88
Chapter 3. Tutorials
",0.0018877983093261,"Matplotlib, Release 2.0.2
2.0
 1.5
 1.0
 0.5
 0.0 0.5 1.0 1.5 2.0
2.0
1.5
1.0
0.5
0.0
0.5
1.0
1.5
2.0
The following path codes are recognized
Code Vertices Description
STOP 1 (ignored) A marker for the end of the entire path (currently not required and
ignored)
MOVETO 1 Pick up the pen and move to the given vertex.
LINETO 1 Draw a line from the current position to the given vertex.
CURVE3 2 (1 control point, 1
endpoint)
Draw a quadratic Bézier curve from the current position, with the
given control point, to the given end point.
CURVE4 3 (2 control points,
1 endpoint)
Draw a cubic Bézier curve from the current position, with the given
control points, to the given end point.
CLOSEPOLY1 (point itself is
ignored)
Draw a line segment to the start point of the current polyline.
Bézier example
Some of the path components require multiple vertices to specify them: for example CURVE 3 is a bézier
curve with one control point and one end point, and CURVE4 has three vertices for the two control points
and the end point. The example below shows a CURVE4 Bézier spline – the bézier curve will be contained
in the convex hull of the start point, the two control points, and the end point
import matplotlib.pyplot as plt
from matplotlib.path import Path
88 Chapter 3. Tutorials",0.007613182067871,"14>
Matplotlib, Release 2.0.2
  1.0 0.8 0.6 0.4 0.2 0.0
     0.0 0.2
0.4 0.6
0.8 1.0
Tick containers
The matplotlib.axis.Tick is the final container object in our descent from the Figure to the Axes to the Axis to the Tick. The Tick contains the tick and grid line instances, as well as the label instances for the upper and lower ticks. Each of these is accessible directly as an attribute of the Tick. In addition, there are boolean variables that determine whether the upper labels and ticks are on for the x-axis and whether the right labels and ticks are on for the y-axis.
 Tick attribute
tick1line tick2line gridline label1 label2 gridOn tick1On tick2On label1On label2On
Description
Line2D instance
Line2D instance
Line2D instance
Text instance
Text instance
boolean which determines whether to draw the gridline boolean which determines whether to draw the 1st tickline boolean which determines whether to draw the 2nd tickline boolean which determines whether to draw the 1st tick label boolean which determines whether to draw the 2nd tick label
           Here is an
on the right side of the yaxis
example which sets the formatter for the right side ticks with dollar signs and colors them green
 66 Chapter3. Tutorials

"
100,16.0,matplotlib_81-101_pdf.pdf ~ 16,"Matplotlib, Release 2.0.2
import matplotlib.patches as patches
verts = [
(0., 0.), # P0
(0.2, 1.), # P1
(1., 0.8), # P2
(0.8, 0.), # P3
]
codes = [Path.MOVETO,
Path.CURVE4,
Path.CURVE4,
Path.CURVE4,
]
path = Path(verts, codes)
fig = plt.figure()
ax = fig.add_subplot(111)
patch = patches.PathPatch(path, facecolor='none', lw=2)
ax.add_patch(patch)
xs, ys = zip(*verts)
ax.plot(xs, ys, 'x--', lw=2, color='black', ms=10)
ax.text(-0.05, -0.05, 'P0')
ax.text(0.15, 1.05, 'P1')
ax.text(1.05, 0.85, 'P2')
ax.text(0.85, -0.05, 'P3')
ax.set_xlim(-0.1, 1.1)
ax.set_ylim(-0.1, 1.1)
plt.show()
3.3. Advanced 89",0.0052251815795898,"Matplotlib, Release 2.0.2
import matplotlib.patches as patches
verts = [
(0., 0.),
# P0
(0.2, 1.), # P1
(1., 0.8), # P2
(0.8, 0.), # P3
]
codes = [Path.MOVETO,
Path.CURVE4,
Path.CURVE4,
Path.CURVE4,
]
path = Path(verts, codes)
fig = plt.figure()
ax = fig.add_subplot(111)
patch = patches.PathPatch(path, facecolor='none', lw=2)
ax.add_patch(patch)
xs, ys = zip(*verts)
ax.plot(xs, ys, 'x--', lw=2, color='black', ms=10)
ax.text(-0.05, -0.05, 'P0')
ax.text(0.15, 1.05, 'P1')
ax.text(1.05, 0.85, 'P2')
ax.text(0.85, -0.05, 'P3')
ax.set_xlim(-0.1, 1.1)
ax.set_ylim(-0.1, 1.1)
plt.show()
3.3. Advanced
89
",0.0007209777832031,"Matplotlib, Release 2.0.2
import matplotlib.patches as patches
verts = [
(0., 0.), # P0
(0.2, 1.), # P1
(1., 0.8), # P2
(0.8, 0.), # P3
]
codes = [Path.MOVETO,
Path.CURVE4,
Path.CURVE4,
Path.CURVE4,
]
path = Path(verts, codes)
fig = plt.figure()
ax = fig.add_subplot(111)
patch = patches.PathPatch(path, facecolor='none', lw=2)
ax.add_patch(patch)
xs, ys = zip(*verts)
ax.plot(xs, ys, 'x--', lw=2, color='black', ms=10)
ax.text(-0.05, -0.05, 'P0')
ax.text(0.15, 1.05, 'P1')
ax.text(1.05, 0.85, 'P2')
ax.text(0.85, -0.05, 'P3')
ax.set_xlim(-0.1, 1.1)
ax.set_ylim(-0.1, 1.1)
plt.show()
3.3. Advanced 89",0.0053911209106445,"15>
Matplotlib, Release 2.0.2
     import numpy as np
import matplotlib.pyplot as plt
import matplotlib.ticker as ticker
# Fixing random state for reproducibility
np.random.seed(19680801)
fig = plt.figure()
ax = fig.add_subplot(111)
ax.plot(100*np.random.rand(20))
formatter = ticker.FormatStrFormatter('$%1.2f') ax.yaxis.set_major_formatter(formatter)
for tick in ax.yaxis.get_major_ticks(): tick.label1On = False
tick.label2On = True tick.label2.set_color('green')
plt.show()
       0.0 2.5
5.0 7.5
10.0 12.5 15.0 17.5
$100.
$80.0
$60.0
$40.0
$20.0
00
0
0
0
0
 3.2. Intermediate
67

"
101,17.0,matplotlib_81-101_pdf.pdf ~ 17,"Matplotlib, Release 2.0.2
0.0 0.2 0.4 0.6 0.8 1.0
0.0
0.2
0.4
0.6
0.8
1.0
P0
P1
P2
P3
Compound paths
All of the simple patch primitives in matplotlib, Rectangle, Circle, Polygon, etc, are implemented with
simple path. Plotting functions like hist() and bar(), which create a number of primitives, e.g., a bunch
of Rectangles, can usually be implemented more eﬃciently using a compound path. The reason barcreates
a list of rectangles and not a compound path is largely historical: the Path code is comparatively new and
barpredates it. While we could change it now, it would break old code, so here we will cover how to create
compound paths, replacing the functionality in bar, in case you need to do so in your own code for eﬃciency
reasons, e.g., you are creating an animated bar plot.
We will make the histogram chart by creating a series of rectangles for each histogram bar: the rectangle
width is the bin width and the rectangle height is the number of datapoints in that bin. First we’ll create
some random normally distributed data and compute the histogram. Because numpy returns the bin edges
and not centers, the length of binsis 1 greater than the length of nin the example below:
# histogram our data with numpy
data = np.random.randn(1000)
n, bins = np.histogram(data, 100)
We’ll now extract the corners of the rectangles. Each of the left, bottom, etc, arrays below is len(n),
where nis the array of counts for each histogram bar:
90 Chapter 3. Tutorials",0.0065610408782958,"Matplotlib, Release 2.0.2
0.0
0.2
0.4
0.6
0.8
1.0
0.0
0.2
0.4
0.6
0.8
1.0
P0
P1
P2
P3
Compound paths
All of the simple patch primitives in matplotlib, Rectangle, Circle, Polygon, etc, are implemented with
simple path. Plotting functions like hist() and bar(), which create a number of primitives, e.g., a bunch
of Rectangles, can usually be implemented more eﬃciently using a compound path. The reason bar creates
a list of rectangles and not a compound path is largely historical: the Path code is comparatively new and
bar predates it. While we could change it now, it would break old code, so here we will cover how to create
compound paths, replacing the functionality in bar, in case you need to do so in your own code for eﬃciency
reasons, e.g., you are creating an animated bar plot.
We will make the histogram chart by creating a series of rectangles for each histogram bar: the rectangle
width is the bin width and the rectangle height is the number of datapoints in that bin. First we’ll create
some random normally distributed data and compute the histogram. Because numpy returns the bin edges
and not centers, the length of bins is 1 greater than the length of n in the example below:
# histogram our data with numpy
data = np.random.randn(1000)
n, bins = np.histogram(data, 100)
We’ll now extract the corners of the rectangles. Each of the left, bottom, etc, arrays below is len(n),
where n is the array of counts for each histogram bar:
90
Chapter 3. Tutorials
",0.0015280246734619,"Matplotlib, Release 2.0.2
0.0 0.2 0.4 0.6 0.8 1.0
0.0
0.2
0.4
0.6
0.8
1.0
P0
P1
P2
P3
Compound paths
All of the simple patch primitives in matplotlib, Rectangle, Circle, Polygon, etc, are implemented with
simple path. Plotting functions like hist() and bar(), which create a number of primitives, e.g., a bunch
of Rectangles, can usually be implemented more eﬃciently using a compound path. The reason barcreates
a list of rectangles and not a compound path is largely historical: the Path code is comparatively new and
barpredates it. While we could change it now, it would break old code, so here we will cover how to create
compound paths, replacing the functionality in bar, in case you need to do so in your own code for eﬃciency
reasons, e.g., you are creating an animated bar plot.
We will make the histogram chart by creating a series of rectangles for each histogram bar: the rectangle
width is the bin width and the rectangle height is the number of datapoints in that bin. First we’ll create
some random normally distributed data and compute the histogram. Because numpy returns the bin edges
and not centers, the length of binsis 1 greater than the length of nin the example below:
# histogram our data with numpy
data = np.random.randn(1000)
n, bins = np.histogram(data, 100)
We’ll now extract the corners of the rectangles. Each of the left, bottom, etc, arrays below is len(n),
where nis the array of counts for each histogram bar:
90 Chapter 3. Tutorials",0.0063269138336181,"16>
Matplotlib, Release 2.0.2
 3.2.2 Legend guide
This legend guide is an extension of the documentation available at legend() - please ensure you are familiar with contents of that documentation before proceeding with this guide.
This guide makes use of some common terms, which are documented here for clarity:
legend entry A legend is made up of one or more legend entries. An entry is made up of exactly one key and one label.
legend key The colored/patterned marker to the left of each legend label.
legend label The text which describes the handle represented by the key.
legend handle The original object which is used to generate an appropriate entry in the legend.
Controlling the legend entries
Calling legend() with no arguments automatically fetches the legend handles and their associated labels. This functionality is equivalent to:
The get_legend_handles_labels() function returns a list of handles/artists which exist on the Axes which can be used to generate entries for the resulting legend - it is worth noting however that not all artists can be added to a legend, at which point a “proxy” will have to be created (see Creating artists specifically for adding to the legend (aka. Proxy artists) for further details).
For full control of what is being added to the legend, it is common to pass the appropriate handles directly to legend():
In some cases, it is not possible to set the label of the handle, so it is possible to pass through the list of labels to legend():
Creating artists specifically for adding to the legend (aka. Proxy artists)
Not all handles can be turned into legend entries automatically, so it is often necessary to create an artist which can. Legend handles don’t have to exists on the Figure or Axes in order to be used.
Suppose we wanted to create a legend which has an entry for some data which is represented by a red color:
    handles, labels = ax.get_legend_handles_labels()
ax.legend(handles, labels)
     line_up, = plt.plot([1,2,3], label='Line 2') line_down, = plt.plot([3,2,1], label='Line 1') plt.legend(handles=[line_up, line_down])
     line_up, = plt.plot([1,2,3], label='Line 2')
line_down, = plt.plot([3,2,1], label='Line 1') plt.legend([line_up, line_down], ['Line Up', 'Line Down'])
  68 Chapter3. Tutorials

There are many supported legend handles, instead of creating a patch of color we could have created a line with a marker:
"
102,18.0,matplotlib_81-101_pdf.pdf ~ 18,"Matplotlib, Release 2.0.2
# get the corners of the rectangles for the histogram
left = np.array(bins[:-1])
right = np.array(bins[1:])
bottom = np.zeros(len(left))
top = bottom + n
Now we have to construct our compound path, which will consist of a series of MOVETO, LINETO and
CLOSEPOLYfor each rectangle. For each rectangle, we need 5 vertices: 1 for the MOVETO, 3 for the LINETO,
and 1 for the CLOSEPOLY. As indicated in the table above, the vertex for the closepoly is ignored but we still
need it to keep the codes aligned with the vertices:
nverts = nrects*(1+3+1)
verts = np.zeros((nverts, 2))
codes = np.ones(nverts, int) * path.Path.LINETO
codes[0::5] = path.Path.MOVETO
codes[4::5] = path.Path.CLOSEPOLY
verts[0::5,0] = left
verts[0::5,1] = bottom
verts[1::5,0] = left
verts[1::5,1] = top
verts[2::5,0] = right
verts[2::5,1] = top
verts[3::5,0] = right
verts[3::5,1] = bottom
All that remains is to create the path, attach it to a PathPatch, and add it to our axes:
barpath = path.Path(verts, codes)
patch = patches.PathPatch(barpath, facecolor='green',
edgecolor='yellow', alpha=0.5)
ax.add_patch(patch)
Here is the result
3.3. Advanced 91",0.0071911811828613,"Matplotlib, Release 2.0.2
# get the corners of the rectangles for the histogram
left = np.array(bins[:-1])
right = np.array(bins[1:])
bottom = np.zeros(len(left))
top = bottom + n
Now we have to construct our compound path, which will consist of a series of MOVETO, LINETO and
CLOSEPOLY for each rectangle. For each rectangle, we need 5 vertices: 1 for the MOVETO, 3 for the LINETO,
and 1 for the CLOSEPOLY. As indicated in the table above, the vertex for the closepoly is ignored but we still
need it to keep the codes aligned with the vertices:
nverts = nrects*(1+3+1)
verts = np.zeros((nverts, 2))
codes = np.ones(nverts, int) * path.Path.LINETO
codes[0::5] = path.Path.MOVETO
codes[4::5] = path.Path.CLOSEPOLY
verts[0::5,0] = left
verts[0::5,1] = bottom
verts[1::5,0] = left
verts[1::5,1] = top
verts[2::5,0] = right
verts[2::5,1] = top
verts[3::5,0] = right
verts[3::5,1] = bottom
All that remains is to create the path, attach it to a PathPatch, and add it to our axes:
barpath = path.Path(verts, codes)
patch = patches.PathPatch(barpath, facecolor='green',
edgecolor='yellow', alpha=0.5)
ax.add_patch(patch)
Here is the result
3.3. Advanced
91
",0.0012192726135253,"Matplotlib, Release 2.0.2
# get the corners of the rectangles for the histogram
left = np.array(bins[:-1])
right = np.array(bins[1:])
bottom = np.zeros(len(left))
top = bottom + n
Now we have to construct our compound path, which will consist of a series of MOVETO, LINETO and
CLOSEPOLYfor each rectangle. For each rectangle, we need 5 vertices: 1 for the MOVETO, 3 for the LINETO,
and 1 for the CLOSEPOLY. As indicated in the table above, the vertex for the closepoly is ignored but we still
need it to keep the codes aligned with the vertices:
nverts = nrects*(1+3+1)
verts = np.zeros((nverts, 2))
codes = np.ones(nverts, int) * path.Path.LINETO
codes[0::5] = path.Path.MOVETO
codes[4::5] = path.Path.CLOSEPOLY
verts[0::5,0] = left
verts[0::5,1] = bottom
verts[1::5,0] = left
verts[1::5,1] = top
verts[2::5,0] = right
verts[2::5,1] = top
verts[3::5,0] = right
verts[3::5,1] = bottom
All that remains is to create the path, attach it to a PathPatch, and add it to our axes:
barpath = path.Path(verts, codes)
patch = patches.PathPatch(barpath, facecolor='green',
edgecolor='yellow', alpha=0.5)
ax.add_patch(patch)
Here is the result
3.3. Advanced 91",0.0065891742706298,"17>
Matplotlib, Release 2.0.2
     import matplotlib.patches as mpatches
import matplotlib.pyplot as plt
red_patch = mpatches.Patch(color='red', label='The red data') plt.legend(handles=[red_patch])
plt.show()
  1.0
0.8
0.6
0.4
0.2
0.0
0.0 0.2
0.4 0.6
0.8 1.0
    The red data
     import matplotlib.lines as mlines
import matplotlib.pyplot as plt
blue_line = mlines.Line2D([], [], color='blue', marker='*', markersize=15, label='Blue stars')
plt.legend(handles=[blue_line])
plt.show()
  3.2. Intermediate 69

"
103,19.0,matplotlib_81-101_pdf.pdf ~ 19,"Matplotlib, Release 2.0.2
3
 2
 1
 0 1 2 3 4
0
5
10
15
20
25
30
35
3.3.3 Path effects guide
Matplotlib’spatheffects module provides functionality to apply a multiple draw stage to any Artist which
can be rendered via a Path.
Artists which can have a path eﬀect applied to them include Patch, Line2D, Collection and even Text.
Each artist’s path e ﬀects can be controlled via the set_path_effects method ( set_path_effects),
which takes an iterable of AbstractPathEffect instances.
The simplest path eﬀect is the Normal eﬀect, which simply draws the artist without any eﬀect:
import matplotlib.pyplot as plt
import matplotlib.patheffects as path_effects
fig = plt.figure(figsize=(5, 1.5))
text = fig.text(0.5, 0.5, 'Hello path effects world!\nThis is the normal '
'path effect.\nPretty dull, huh?',
ha='center', va='center', size=20)
text.set_path_effects([path_effects.Normal()])
plt.show()
92 Chapter 3. Tutorials",0.0099692344665527,"Matplotlib, Release 2.0.2
3
2
1
0
1
2
3
4
0
5
10
15
20
25
30
35
3.3.3 Path effects guide
Matplotlib’s patheffects module provides functionality to apply a multiple draw stage to any Artist which
can be rendered via a Path.
Artists which can have a path eﬀect applied to them include Patch, Line2D, Collection and even Text.
Each artist’s path eﬀects can be controlled via the set_path_effects method (set_path_effects),
which takes an iterable of AbstractPathEffect instances.
The simplest path eﬀect is the Normal eﬀect, which simply draws the artist without any eﬀect:
import matplotlib.pyplot as plt
import matplotlib.patheffects as path_effects
fig = plt.figure(figsize=(5, 1.5))
text = fig.text(0.5, 0.5, 'Hello path effects world!\nThis is the normal '
'path effect.\nPretty dull, huh?',
ha='center', va='center', size=20)
text.set_path_effects([path_effects.Normal()])
plt.show()
92
Chapter 3. Tutorials
",0.001176118850708,"Matplotlib, Release 2.0.2
3
 2
 1
 0 1 2 3 4
0
5
10
15
20
25
30
35
3.3.3 Path effects guide
Matplotlib’spatheffects module provides functionality to apply a multiple draw stage to any Artist which
can be rendered via a Path.
Artists which can have a path eﬀect applied to them include Patch, Line2D, Collection and even Text.
Each artist’s path e ﬀects can be controlled via the set_path_effects method ( set_path_effects),
which takes an iterable of AbstractPathEffect instances.
The simplest path eﬀect is the Normal eﬀect, which simply draws the artist without any eﬀect:
import matplotlib.pyplot as plt
import matplotlib.patheffects as path_effects
fig = plt.figure(figsize=(5, 1.5))
text = fig.text(0.5, 0.5, 'Hello path effects world!\nThis is the normal '
'path effect.\nPretty dull, huh?',
ha='center', va='center', size=20)
text.set_path_effects([path_effects.Normal()])
plt.show()
92 Chapter 3. Tutorials",0.0085251331329345,"18>
Matplotlib, Release 2.0.2
  1.0
0.8
0.6
0.4
0.2
0.0
0.0 0.2
0.4 0.6
0.8 1.0
 Blue stars
Legend location
The location of the legend can be specified by the keyword argument loc. Please see the documentation at legend() for more details.
The bbox_to_anchor keyword gives a great degree of control for manual legend placement. For example, if you want your axes legend located at the figure’s top right-hand corner instead of the axes’ corner, simply specify the corner’s location, and the coordinate system of that location:
More examples of custom legend placement:
    plt.legend(bbox_to_anchor=(1, 1),
           bbox_transform=plt.gcf().transFigure)
     import matplotlib.pyplot as plt
plt.subplot(211)
plt.plot([1,2,3], label=""test1"")
plt.plot([3,2,1], label=""test2"")
# Place a legend above this subplot, expanding itself to # fully use the given bounding box. plt.legend(bbox_to_anchor=(0., 1.02, 1., .102), loc=3,
           ncol=2, mode=""expand"", borderaxespad=0.)
  70 Chapter3. Tutorials

"
104,0.0,genai_pdf.pdf ~ 0,"   
 
   
 
 
Generative AI: Your New Digital Creative 
Companion
 
What Exactly is Generative AI?             _____________________________________________ 2 
How Does It Actually Work? _____________________________________________________ 2 
Real-World Examples That'll Blow Your Mind ______________________________________ 2 
Art Creation __________________________________________________________________ 2 
Writing Help __________________________________________________________________ 2 
Problem Solving ______________________________________________________________ 2 
Cool Things to Know ____________________________________________________________ 2 
Potential Concerns (Because Nothing's Perfect) ___________________________________ 3 
The Good ____________________________________________________________________ 3 
The Challenging ______________________________________________________________ 3 
Who's Using This Magic? ________________________________________________________ 3 
The Future Looks Bright!        _____________________________________________________ 3 
Quick Pro Tips __________________________________________________________________ 3 
Want to Get Started? ____________________________________________________________ 3 
  
",0.0099618434906005," 
 
 
 
 
Generative AI: Your New Digital Creative 
Companion
 
What Exactly is Generative AI?    _____________________________________________ 2 
How Does It Actually Work? _____________________________________________________ 2 
Real-World Examples That'll Blow Your Mind ______________________________________ 2 
Art Creation __________________________________________________________________ 2 
Writing Help __________________________________________________________________ 2 
Problem Solving ______________________________________________________________ 2 
Cool Things to Know ____________________________________________________________ 2 
Potential Concerns (Because Nothing's Perfect) ___________________________________ 3 
The Good ____________________________________________________________________ 3 
The Challenging ______________________________________________________________ 3 
Who's Using This Magic? ________________________________________________________ 3 
The Future Looks Bright!   _____________________________________________________ 3 
Quick Pro Tips __________________________________________________________________ 3 
Want to Get Started? ____________________________________________________________ 3 
 
 
",0.0405921936035156,"   
 
   
 
 
Generative AI: Your New Digital Creative 
Companion
 
What Exactly is Generative AI?             _____________________________________________ 2 
How Does It Actually Work? _____________________________________________________ 2 
Real-World Examples That'll Blow Your Mind ______________________________________ 2 
Art Creation __________________________________________________________________ 2 
Writing Help __________________________________________________________________ 2 
Problem Solving ______________________________________________________________ 2 
Cool Things to Know ____________________________________________________________ 2 
Potential Concerns (Because Nothing's Perfect) ___________________________________ 3 
The Good ____________________________________________________________________ 3 
The Challenging ______________________________________________________________ 3 
Who's Using This Magic? ________________________________________________________ 3 
The Future Looks Bright!        _____________________________________________________ 3 
Quick Pro Tips __________________________________________________________________ 3 
Want to Get Started? ____________________________________________________________ 3 
  
",0.010498046875,"19>
Multiple legends on the same Axes
Sometimes it is more clear to split legend entries across multiple legends. Whilst the instinctive approach to doing this might be to call the legend() function multiple times, you will find that only one legend ever exists on the Axes. This has been done so that it is possible to call legend() repeatedly to update the legend to the latest handles on the Axes, so to persist old legend instances, we must add them manually to the Axes:
Matplotlib, Release 2.0.2
     plt.subplot(223)
plt.plot([1,2,3], label=""test1"")
plt.plot([3,2,1], label=""test2"")
# Place a legend to the right of this smaller subplot. plt.legend(bbox_to_anchor=(1.05, 1), loc=2, borderaxespad=0.)
plt.show()
      3.0 2.5 2.0 1.5 1.0
3.0 2.5 2.0 1.5 1.0
0.00 0.25 0.50 0.75 1.00 1.25 1.50 1.75 2.00
test1
test2
    012
test1 test2
    import matplotlib.pyplot as plt
line1, = plt.plot([1,2,3], label=""Line 1"", linestyle='--')
line2, = plt.plot([3,2,1], label=""Line 2"", linewidth=4)
# Create a legend for the first line.
first_legend = plt.legend(handles=[line1], loc=1)
  3.2. Intermediate 71

"
105,1.0,genai_pdf.pdf ~ 1,"Author: Prateek Mannem   
 
  2 
 
What Exactly is Generative AI? 🤖✨ 
Think of Generative AI like a super-smart digital assistant that can create things from 
scratch. Imagine having a friend who can: 
• Write stories 
• Draw pictures 
• Compose music 
• Write computer code 
• Solve complex problems 
All by just understanding what you want! 
How Does It Actually Work? 
Picture a massive library where an AI has read EVERYTHING. When you ask it to do 
something, it: 
1. Understands your request 
2. Pulls from its enormous ""knowledge bank"" 
3. Creates something totally new 
It's like having a genius friend who can instantly combine information in unique ways. 
Real-World Examples That'll Blow Your Mind 
Art Creation 
• For example, you can type ""robot playing guitar in a space cafe"" as a prompt 
• AI instantly generates a unique image matching your description 
Writing Help 
• Need a blog post about climate change? 
• AI can draft a complete, coherent article in minutes 
Problem Solving 
• Stuck on a math problem? 
• AI can break it down, explain steps, and show solutions 
Cool Things to Know 
🌟 Generative AI learns by: 
• Studying massive amounts of data ",0.0098161697387695,"Author: Prateek Mannem 
 
 
 
2
 
What Exactly is Generative AI? 🤖✨ 
Think of Generative AI like a super-smart digital assistant that can create things from 
scratch. Imagine having a friend who can: 
• Write stories 
• Draw pictures 
• Compose music 
• Write computer code 
• Solve complex problems 
All by just understanding what you want! 
How Does It Actually Work? 
Picture a massive library where an AI has read EVERYTHING. When you ask it to do 
something, it: 
1. Understands your request 
2. Pulls from its enormous ""knowledge bank"" 
3. Creates something totally new 
It's like having a genius friend who can instantly combine information in unique ways. 
Real-World Examples That'll Blow Your Mind 
Art Creation 
• For example, you can type ""robot playing guitar in a space cafe"" as a prompt 
• AI instantly generates a unique image matching your description 
Writing Help 
• Need a blog post about climate change? 
• AI can draft a complete, coherent article in minutes 
Problem Solving 
• Stuck on a math problem? 
• AI can break it down, explain steps, and show solutions 
Cool Things to Know 
🌟 Generative AI learns by: 
• Studying massive amounts of data 
",0.0032463073730468,"Author: Prateek Mannem   
 
  2 
 
What Exactly is Generative AI? 🤖✨ 
Think of Generative AI like a super-smart digital assistant that can create things from 
scratch. Imagine having a friend who can: 
• Write stories 
• Draw pictures 
• Compose music 
• Write computer code 
• Solve complex problems 
All by just understanding what you want! 
How Does It Actually Work? 
Picture a massive library where an AI has read EVERYTHING. When you ask it to do 
something, it: 
1. Understands your request 
2. Pulls from its enormous ""knowledge bank"" 
3. Creates something totally new 
It's like having a genius friend who can instantly combine information in unique ways. 
Real-World Examples That'll Blow Your Mind 
Art Creation 
• For example, you can type ""robot playing guitar in a space cafe"" as a prompt 
• AI instantly generates a unique image matching your description 
Writing Help 
• Need a blog post about climate change? 
• AI can draft a complete, coherent article in minutes 
Problem Solving 
• Stuck on a math problem? 
• AI can break it down, explain steps, and show solutions 
Cool Things to Know 
🌟 Generative AI learns by: 
• Studying massive amounts of data ",0.0103449821472167,"20>
Matplotlib, Release 2.0.2
     # Add the legend manually to the current Axes.
ax = plt.gca().add_artist(first_legend)
# Create another legend for the second line.
plt.legend(handles=[line2], loc=4)
plt.show()
      Line 1
  Line 2
 3.00 2.75 2.50 2.25 2.00 1.75 1.50 1.25 1.00
0.00 0.25 0.50 0.75 1.00 1.25 1.50 1.75 2.00
Legend Handlers
In order to create legend entries, handles are given as an argument to an appropriate HandlerBase subclass. The choice of handler subclass is determined by the following rules:
1. Update get_legend_handler_map() with the value in the handler_map keyword. 2. Check if the handle is in the newly created handler_map.
3. Check if the type of handle is in the newly created handler_map.
4. Check if any of the types in the handle‘s mro is in the newly created handler_map.
For completeness, this logic is mostly implemented in get_legend_handler().
 72 Chapter3. Tutorials
"
106,2.0,genai_pdf.pdf ~ 2,"Author: Prateek Mannem   
 
  3 
 
• Recognizing patterns 
• Creating new content based on what it's learned 
🚀 It's NOT just copying - it's CREATING something original! 
Potential Concerns (Because Nothing's Perfect) 
The Good 
• Incredible productivity 
• Endless creativity 
• Solving complex problems quickly 
The Challenging 
• Potential misinformation 
• Copyright questions 
• Ethical use of technology 
Who's Using This Magic? 
• Doctors (diagnosing diseases) 
• Artists (creating new designs) 
• Programmers (writing code) 
• Businesses (solving complex problems) 
• Researchers (exploring new ideas) 
The Future Looks Bright! 🌈 
Generative AI isn't about replacing humans - it's about HELPING humans do amazing things 
faster and more creatively. Think of it like a supercharged creativity and problem-solving 
partner. 
Quick Pro Tips 
• Be specific in your requests 
• Understand it's a tool, not a replacement for human creativity 
• Experiment and have fun! 
Want to Get Started? 
Try free tools like: ",0.0091660022735595,"Author: Prateek Mannem 
 
 
 
3
 
• Recognizing patterns 
• Creating new content based on what it's learned 
🚀 It's NOT just copying - it's CREATING something original! 
Potential Concerns (Because Nothing's Perfect) 
The Good 
• Incredible productivity 
• Endless creativity 
• Solving complex problems quickly 
The Challenging 
• Potential misinformation 
• Copyright questions 
• Ethical use of technology 
Who's Using This Magic? 
• Doctors (diagnosing diseases) 
• Artists (creating new designs) 
• Programmers (writing code) 
• Businesses (solving complex problems) 
• Researchers (exploring new ideas) 
The Future Looks Bright! 🌈 
Generative AI isn't about replacing humans - it's about HELPING humans do amazing things 
faster and more creatively. Think of it like a supercharged creativity and problem-solving 
partner. 
Quick Pro Tips 
• Be specific in your requests 
• Understand it's a tool, not a replacement for human creativity 
• Experiment and have fun! 
Want to Get Started? 
Try free tools like: 
",0.0023212432861328,"Author: Prateek Mannem   
 
  3 
 
• Recognizing patterns 
• Creating new content based on what it's learned 
🚀 It's NOT just copying - it's CREATING something original! 
Potential Concerns (Because Nothing's Perfect) 
The Good 
• Incredible productivity 
• Endless creativity 
• Solving complex problems quickly 
The Challenging 
• Potential misinformation 
• Copyright questions 
• Ethical use of technology 
Who's Using This Magic? 
• Doctors (diagnosing diseases) 
• Artists (creating new designs) 
• Programmers (writing code) 
• Businesses (solving complex problems) 
• Researchers (exploring new ideas) 
The Future Looks Bright! 🌈 
Generative AI isn't about replacing humans - it's about HELPING humans do amazing things 
faster and more creatively. Think of it like a supercharged creativity and problem-solving 
partner. 
Quick Pro Tips 
• Be specific in your requests 
• Understand it's a tool, not a replacement for human creativity 
• Experiment and have fun! 
Want to Get Started? 
Try free tools like: ",0.0087652206420898,
107,3.0,genai_pdf.pdf ~ 3,"Author: Prateek Mannem   
 
  4 
 
• ChatGPT 
• DALL-E 
• Midjourney 
• Canva AI tools 
 
Remember: The more you play and experiment, the more you'll understand how incredible 
this technology can be! 🤖 Welcome to the Future of Creativity! 🚀 ",0.0029819011688232,"Author: Prateek Mannem 
 
 
 
4
 
• ChatGPT 
• DALL-E 
• Midjourney 
• Canva AI tools 
 
Remember: The more you play and experiment, the more you'll understand how incredible 
this technology can be! 🤖 Welcome to the Future of Creativity! 🚀 
",0.0003800392150878,"Author: Prateek Mannem   
 
  4 
 
• ChatGPT 
• DALL-E 
• Midjourney 
• Canva AI tools 
 
Remember: The more you play and experiment, the more you'll understand how incredible 
this technology can be! 🤖 Welcome to the Future of Creativity! 🚀 ",0.0027759075164794,"1>
 John Hunter, Darren Dale, Eric Firing, Michael Droettboom and the m
Matplotlib
Release 2.0.2
May 10, 2017
"
108,0.0,matplotlib_21-41_pdf.pdf ~ 0,"Matplotlib, Release 2.0.2
0 1 2 3 4 5 6
0.0
2.5
5.0
7.5
10.0
12.5
15.0
17.5
20.0
See the plot() documentation for a complete list of line styles and format strings. The axis() command
in the example above takes a list of [xmin, xmax, ymin, ymax]and speciﬁes the viewport of the axes.
If matplotlib were limited to working with lists, it would be fairly useless for numeric processing. Generally,
you will use numpy arrays. In fact, all sequences are converted to numpy arrays internally. The example
below illustrates a plotting several lines with diﬀerent format styles in one command using arrays.
import numpy as np
import matplotlib.pyplot as plt
# evenly sampled time at 200ms intervals
t = np.arange(0., 5., 0.2)
# red dashes, blue squares and green triangles
plt.plot(t, t, 'r--', t, t**2, 'bs', t, t**3, 'g^')
plt.show()
3.1. Introductory 13",0.0090138912200927,"Matplotlib, Release 2.0.2
0
1
2
3
4
5
6
0.0
2.5
5.0
7.5
10.0
12.5
15.0
17.5
20.0
See the plot() documentation for a complete list of line styles and format strings. The axis() command
in the example above takes a list of [xmin, xmax, ymin, ymax] and speciﬁes the viewport of the axes.
If matplotlib were limited to working with lists, it would be fairly useless for numeric processing. Generally,
you will use numpy arrays. In fact, all sequences are converted to numpy arrays internally. The example
below illustrates a plotting several lines with diﬀerent format styles in one command using arrays.
import numpy as np
import matplotlib.pyplot as plt
# evenly sampled time at 200ms intervals
t = np.arange(0., 5., 0.2)
# red dashes, blue squares and green triangles
plt.plot(t, t, 'r--', t, t**2, 'bs', t, t**3, 'g^')
plt.show()
3.1. Introductory
13
",0.0042219161987304,"Matplotlib, Release 2.0.2
0 1 2 3 4 5 6
0.0
2.5
5.0
7.5
10.0
12.5
15.0
17.5
20.0
See the plot() documentation for a complete list of line styles and format strings. The axis() command
in the example above takes a list of [xmin, xmax, ymin, ymax]and speciﬁes the viewport of the axes.
If matplotlib were limited to working with lists, it would be fairly useless for numeric processing. Generally,
you will use numpy arrays. In fact, all sequences are converted to numpy arrays internally. The example
below illustrates a plotting several lines with diﬀerent format styles in one command using arrays.
import numpy as np
import matplotlib.pyplot as plt
# evenly sampled time at 200ms intervals
t = np.arange(0., 5., 0.2)
# red dashes, blue squares and green triangles
plt.plot(t, t, 'r--', t, t**2, 'bs', t, t**3, 'g^')
plt.show()
3.1. Introductory 13",0.0105400085449218,"2>

"
109,1.0,matplotlib_21-41_pdf.pdf ~ 1,"Matplotlib, Release 2.0.2
0 1 2 3 4 5
0
20
40
60
80
100
Controlling line properties
Lines have many attributes that you can set: linewidth, dash style, antialiased, etc; seematplotlib.lines.
Line2D. There are several ways to set line properties
• Use keyword args:
plt.plot(x, y, linewidth=2.0)
• Use the setter methods of a Line2D instance. plot returns a list of Line2D objects; e.g., line1,
line2 = plot(x1, y1, x2, y2). In the code below we will suppose that we have only one line
so that the list returned is of length 1. We use tuple unpacking with line, to get the ﬁrst element of
that list:
line, = plt.plot(x, y, '-')
line.set_antialiased(False) # turn off antialising
• Use the setp() command. The example below uses a MATLAB-style command to set multiple
properties on a list of lines. setpworks transparently with a list of objects or a single object. You can
either use python keyword arguments or MATLAB-style string/value pairs:
lines = plt.plot(x1, y1, x2, y2)
# use keyword args
plt.setp(lines, color='r', linewidth=2.0)
14 Chapter 3. Tutorials",0.0085198879241943,"Matplotlib, Release 2.0.2
0
1
2
3
4
5
0
20
40
60
80
100
Controlling line properties
Lines have many attributes that you can set: linewidth, dash style, antialiased, etc; see matplotlib.lines.
Line2D. There are several ways to set line properties
• Use keyword args:
plt.plot(x, y, linewidth=2.0)
• Use the setter methods of a Line2D instance. plot returns a list of Line2D objects; e.g., line1,
line2 = plot(x1, y1, x2, y2). In the code below we will suppose that we have only one line
so that the list returned is of length 1. We use tuple unpacking with line, to get the ﬁrst element of
that list:
line, = plt.plot(x, y, '-')
line.set_antialiased(False) # turn off antialising
• Use the setp() command. The example below uses a MATLAB-style command to set multiple
properties on a list of lines. setp works transparently with a list of objects or a single object. You can
either use python keyword arguments or MATLAB-style string/value pairs:
lines = plt.plot(x1, y1, x2, y2)
# use keyword args
plt.setp(lines, color='r', linewidth=2.0)
14
Chapter 3. Tutorials
",0.0018162727355957,"Matplotlib, Release 2.0.2
0 1 2 3 4 5
0
20
40
60
80
100
Controlling line properties
Lines have many attributes that you can set: linewidth, dash style, antialiased, etc; seematplotlib.lines.
Line2D. There are several ways to set line properties
• Use keyword args:
plt.plot(x, y, linewidth=2.0)
• Use the setter methods of a Line2D instance. plot returns a list of Line2D objects; e.g., line1,
line2 = plot(x1, y1, x2, y2). In the code below we will suppose that we have only one line
so that the list returned is of length 1. We use tuple unpacking with line, to get the ﬁrst element of
that list:
line, = plt.plot(x, y, '-')
line.set_antialiased(False) # turn off antialising
• Use the setp() command. The example below uses a MATLAB-style command to set multiple
properties on a list of lines. setpworks transparently with a list of objects or a single object. You can
either use python keyword arguments or MATLAB-style string/value pairs:
lines = plt.plot(x1, y1, x2, y2)
# use keyword args
plt.setp(lines, color='r', linewidth=2.0)
14 Chapter 3. Tutorials",0.0087189674377441,"3>
CONTENTS
I User’s Guide 1
1 Introduction 3
2 Installing 5
3 Tutorials 11
4 Working with text 97
5 Colors 145
6 Customizing matplotlib 173
7 Interactive plots 189
8 Selected Examples 205
9 What’s new in matplotlib 239
10 GitHub Stats 339
11 License 417
12 Credits 421
II The Matplotlib API 423
13 Plotting commands summary 425
14 API Changes 433
15 The top level matplotlib module 483
16 afm (Adobe Font Metrics interface) 487
17 animation module 491
 i
"
110,2.0,matplotlib_21-41_pdf.pdf ~ 2,"Matplotlib, Release 2.0.2
# or MATLAB style string value pairs
plt.setp(lines, 'color', 'r', 'linewidth', 2.0)
Here are the available Line2D properties.
Property Value Type
alpha ﬂoat
animated [True | False]
antialiased or aa [True | False]
clip_box a matplotlib.transform.Bbox instance
clip_on [True | False]
clip_path a Path instance and a Transform instance, a Patch
color or c any matplotlib color
contains the hit testing function
dash_capstyle ['butt' | 'round' | 'projecting']
dash_joinstyle ['miter' | 'round' | 'bevel']
dashes sequence of on/oﬀ ink in points
data (np.array xdata, np.array ydata)
ﬁgure a matplotlib.ﬁgure.Figure instance
label any string
linestyle or ls [ '-' | '--' | '-.' | ':' | 'steps' | ...]
linewidth or lw ﬂoat value in points
lod [True | False]
marker [ '+' | ',' | '.' | '1' | '2' | '3' | '4' ]
markeredgecolor or mec any matplotlib color
markeredgewidth or mew ﬂoat value in points
markerfacecolor or mfc any matplotlib color
markersize or ms ﬂoat
markevery [ None | integer | (startind, stride) ]
picker used in interactive line selection
pickradius the line pick selection radius
solid_capstyle ['butt' | 'round' | 'projecting']
solid_joinstyle ['miter' | 'round' | 'bevel']
transform a matplotlib.transforms.Transform instance
visible [True | False]
xdata np.array
ydata np.array
zorder any number
To get a list of settable line properties, call the setp() function with a line or lines as argument
In [69]: lines = plt.plot([1, 2, 3])
In [70]: plt.setp(lines)
alpha: float
animated: [True | False]
antialiased or aa: [True | False]
3.1. Introductory 15",0.0148839950561523,"Matplotlib, Release 2.0.2
# or MATLAB style string value pairs
plt.setp(lines, 'color', 'r', 'linewidth', 2.0)
Here are the available Line2D properties.
Property
Value Type
alpha
ﬂoat
animated
[True | False]
antialiased or aa
[True | False]
clip_box
a matplotlib.transform.Bbox instance
clip_on
[True | False]
clip_path
a Path instance and a Transform instance, a Patch
color or c
any matplotlib color
contains
the hit testing function
dash_capstyle
['butt' | 'round' | 'projecting']
dash_joinstyle
['miter' | 'round' | 'bevel']
dashes
sequence of on/oﬀink in points
data
(np.array xdata, np.array ydata)
ﬁgure
a matplotlib.ﬁgure.Figure instance
label
any string
linestyle or ls
[ '-' | '--' | '-.' | ':' | 'steps' | ...]
linewidth or lw
ﬂoat value in points
lod
[True | False]
marker
[ '+' | ',' | '.' | '1' | '2' | '3' | '4' ]
markeredgecolor or mec
any matplotlib color
markeredgewidth or mew
ﬂoat value in points
markerfacecolor or mfc
any matplotlib color
markersize or ms
ﬂoat
markevery
[ None | integer | (startind, stride) ]
picker
used in interactive line selection
pickradius
the line pick selection radius
solid_capstyle
['butt' | 'round' | 'projecting']
solid_joinstyle
['miter' | 'round' | 'bevel']
transform
a matplotlib.transforms.Transform instance
visible
[True | False]
xdata
np.array
ydata
np.array
zorder
any number
To get a list of settable line properties, call the setp() function with a line or lines as argument
In [69]: lines = plt.plot([1, 2, 3])
In [70]: plt.setp(lines)
alpha: float
animated: [True | False]
antialiased or aa: [True | False]
3.1. Introductory
15
",0.0034489631652832,"Matplotlib, Release 2.0.2
# or MATLAB style string value pairs
plt.setp(lines, 'color', 'r', 'linewidth', 2.0)
Here are the available Line2D properties.
Property Value Type
alpha ﬂoat
animated [True | False]
antialiased or aa [True | False]
clip_box a matplotlib.transform.Bbox instance
clip_on [True | False]
clip_path a Path instance and a Transform instance, a Patch
color or c any matplotlib color
contains the hit testing function
dash_capstyle ['butt' | 'round' | 'projecting']
dash_joinstyle ['miter' | 'round' | 'bevel']
dashes sequence of on/oﬀ ink in points
data (np.array xdata, np.array ydata)
ﬁgure a matplotlib.ﬁgure.Figure instance
label any string
linestyle or ls [ '-' | '--' | '-.' | ':' | 'steps' | ...]
linewidth or lw ﬂoat value in points
lod [True | False]
marker [ '+' | ',' | '.' | '1' | '2' | '3' | '4' ]
markeredgecolor or mec any matplotlib color
markeredgewidth or mew ﬂoat value in points
markerfacecolor or mfc any matplotlib color
markersize or ms ﬂoat
markevery [ None | integer | (startind, stride) ]
picker used in interactive line selection
pickradius the line pick selection radius
solid_capstyle ['butt' | 'round' | 'projecting']
solid_joinstyle ['miter' | 'round' | 'bevel']
transform a matplotlib.transforms.Transform instance
visible [True | False]
xdata np.array
ydata np.array
zorder any number
To get a list of settable line properties, call the setp() function with a line or lines as argument
In [69]: lines = plt.plot([1, 2, 3])
In [70]: plt.setp(lines)
alpha: float
animated: [True | False]
antialiased or aa: [True | False]
3.1. Introductory 15",0.0147459506988525,"4>
18 artist Module 535 19 Axes class 555 20 axis and tick API 793 21 backends 913 22 cbook 953 23 cm (colormap) 971 24 collections 975 25 colorbar 1145 26 colors 1151 27 container 1165 28 dates 1167 29 dviread 1181 30 figure 1185 31 finance 1207 32 font_manager 1219 33 gridspec 1227 34 image 1231 35 legend and legend_handler 1237 36 lines 1245 37 markers 1255 38 mathtext 1259 39 mlab 1279 40 offsetbox 1313 41 patches 1325 42 path 1367 43 patheffects 1375 44 projections 1379
 ii
"
111,3.0,matplotlib_21-41_pdf.pdf ~ 3,"Matplotlib, Release 2.0.2
...snip
Working with multiple ﬁgures and axes
MATLAB, and pyplot, have the concept of the current ﬁgure and the current axes. All plotting com-
mands apply to the current axes. The function gca() returns the current axes (a matplotlib.axes.Axes
instance), and gcf() returns the current ﬁgure ( matplotlib.figure.Figure instance). Normally, you
don’t have to worry about this, because it is all taken care of behind the scenes. Below is a script to create
two subplots.
import numpy as np
import matplotlib.pyplot as plt
def f(t):
return np.exp(-t) * np.cos(2*np.pi*t)
t1 = np.arange(0.0, 5.0, 0.1)
t2 = np.arange(0.0, 5.0, 0.02)
plt.figure(1)
plt.subplot(211)
plt.plot(t1, f(t1), 'bo', t2, f(t2), 'k')
plt.subplot(212)
plt.plot(t2, np.cos(2*np.pi*t2), 'r--')
plt.show()
16 Chapter 3. Tutorials",0.0051629543304443,"Matplotlib, Release 2.0.2
...snip
Working with multiple ﬁgures and axes
MATLAB, and pyplot, have the concept of the current ﬁgure and the current axes. All plotting com-
mands apply to the current axes. The function gca() returns the current axes (a matplotlib.axes.Axes
instance), and gcf() returns the current ﬁgure (matplotlib.figure.Figure instance). Normally, you
don’t have to worry about this, because it is all taken care of behind the scenes. Below is a script to create
two subplots.
import numpy as np
import matplotlib.pyplot as plt
def f(t):
return np.exp(-t) * np.cos(2*np.pi*t)
t1 = np.arange(0.0, 5.0, 0.1)
t2 = np.arange(0.0, 5.0, 0.02)
plt.figure(1)
plt.subplot(211)
plt.plot(t1, f(t1), 'bo', t2, f(t2), 'k')
plt.subplot(212)
plt.plot(t2, np.cos(2*np.pi*t2), 'r--')
plt.show()
16
Chapter 3. Tutorials
",0.0009591579437255,"Matplotlib, Release 2.0.2
...snip
Working with multiple ﬁgures and axes
MATLAB, and pyplot, have the concept of the current ﬁgure and the current axes. All plotting com-
mands apply to the current axes. The function gca() returns the current axes (a matplotlib.axes.Axes
instance), and gcf() returns the current ﬁgure ( matplotlib.figure.Figure instance). Normally, you
don’t have to worry about this, because it is all taken care of behind the scenes. Below is a script to create
two subplots.
import numpy as np
import matplotlib.pyplot as plt
def f(t):
return np.exp(-t) * np.cos(2*np.pi*t)
t1 = np.arange(0.0, 5.0, 0.1)
t2 = np.arange(0.0, 5.0, 0.02)
plt.figure(1)
plt.subplot(211)
plt.plot(t1, f(t1), 'bo', t2, f(t2), 'k')
plt.subplot(212)
plt.plot(t2, np.cos(2*np.pi*t2), 'r--')
plt.show()
16 Chapter 3. Tutorials",0.0053579807281494,"5>
45 pyplot 1387 46 rcsetup 1593 47 sankey 1597 48 scale 1605 49 spines 1615 50 style 1619 51 text 1621 52 ticker 1635 53 tight_layout 1647 54 Working with transformations 1649 55 triangular grids 1671 56 type1font 1683 57 units 1685 58 widgets 1687
III The Matplotlib FAQ 1703 59 Installation 1705 60 Usage 1713 61 How-To 1725 62 Troubleshooting 1741 63 Environment Variables 1745 64 Working with Matplotlib in Virtual environments 1747 65 Working with Matplotlib on OSX 1749
IV Matplotlib AxesGrid Toolkit 1753 66 Overview of AxesGrid toolkit 1757 67 The Matplotlib AxesGrid Toolkit User’s Guide 1779
 iii
"
112,4.0,matplotlib_21-41_pdf.pdf ~ 4,"Matplotlib, Release 2.0.2
0 1 2 3 4 5
0.5
0.0
0.5
1.0
0 1 2 3 4 5
1.0
0.5
0.0
0.5
1.0
The figure() command here is optional because figure(1) will be created by default, just as a
subplot(111) will be created by default if you don’t manually specify any axes. The subplot() com-
mand speciﬁes numrows, numcols, fignum where fignum ranges from 1 to numrows*numcols. The
commas in the subplot command are optional if numrows*numcols<10. So subplot(211) is identical
to subplot(2, 1, 1). You can create an arbitrary number of subplots and axes. If you want to place
an axes manually, i.e., not on a rectangular grid, use the axes() command, which allows you to specify
the location as axes([left, bottom, width, height]) where all values are in fractional (0 to 1) co-
ordinates. See pylab_examples example code: axes_demo.py for an example of placing axes manually and
pylab_examples example code: subplots_demo.py for an example with lots of subplots.
You can create multiple ﬁgures by using multiple figure() calls with an increasing ﬁgure number. Of
course, each ﬁgure can contain as many axes and subplots as your heart desires:
import matplotlib.pyplot as plt
plt.figure(1) # the first figure
plt.subplot(211) # the first subplot in the first figure
plt.plot([1, 2, 3])
plt.subplot(212) # the second subplot in the first figure
plt.plot([4, 5, 6])
plt.figure(2) # a second figure
plt.plot([4, 5, 6]) # creates a subplot(111) by default
plt.figure(1) # figure 1 current; subplot(212) still current
3.1. Introductory 17",0.0101490020751953,"Matplotlib, Release 2.0.2
0
1
2
3
4
5
0.5
0.0
0.5
1.0
0
1
2
3
4
5
1.0
0.5
0.0
0.5
1.0
The figure() command here is optional because figure(1) will be created by default, just as a
subplot(111) will be created by default if you don’t manually specify any axes. The subplot() com-
mand speciﬁes numrows, numcols, fignum where fignum ranges from 1 to numrows*numcols. The
commas in the subplot command are optional if numrows*numcols<10. So subplot(211) is identical
to subplot(2, 1, 1). You can create an arbitrary number of subplots and axes. If you want to place
an axes manually, i.e., not on a rectangular grid, use the axes() command, which allows you to specify
the location as axes([left, bottom, width, height]) where all values are in fractional (0 to 1) co-
ordinates. See pylab_examples example code: axes_demo.py for an example of placing axes manually and
pylab_examples example code: subplots_demo.py for an example with lots of subplots.
You can create multiple ﬁgures by using multiple figure() calls with an increasing ﬁgure number. Of
course, each ﬁgure can contain as many axes and subplots as your heart desires:
import matplotlib.pyplot as plt
plt.figure(1)
# the first figure
plt.subplot(211)
# the first subplot in the first figure
plt.plot([1, 2, 3])
plt.subplot(212)
# the second subplot in the first figure
plt.plot([4, 5, 6])
plt.figure(2)
# a second figure
plt.plot([4, 5, 6])
# creates a subplot(111) by default
plt.figure(1)
# figure 1 current; subplot(212) still current
3.1. Introductory
17
",0.002918004989624,"Matplotlib, Release 2.0.2
0 1 2 3 4 5
0.5
0.0
0.5
1.0
0 1 2 3 4 5
1.0
0.5
0.0
0.5
1.0
The figure() command here is optional because figure(1) will be created by default, just as a
subplot(111) will be created by default if you don’t manually specify any axes. The subplot() com-
mand speciﬁes numrows, numcols, fignum where fignum ranges from 1 to numrows*numcols. The
commas in the subplot command are optional if numrows*numcols<10. So subplot(211) is identical
to subplot(2, 1, 1). You can create an arbitrary number of subplots and axes. If you want to place
an axes manually, i.e., not on a rectangular grid, use the axes() command, which allows you to specify
the location as axes([left, bottom, width, height]) where all values are in fractional (0 to 1) co-
ordinates. See pylab_examples example code: axes_demo.py for an example of placing axes manually and
pylab_examples example code: subplots_demo.py for an example with lots of subplots.
You can create multiple ﬁgures by using multiple figure() calls with an increasing ﬁgure number. Of
course, each ﬁgure can contain as many axes and subplots as your heart desires:
import matplotlib.pyplot as plt
plt.figure(1) # the first figure
plt.subplot(211) # the first subplot in the first figure
plt.plot([1, 2, 3])
plt.subplot(212) # the second subplot in the first figure
plt.plot([4, 5, 6])
plt.figure(2) # a second figure
plt.plot([4, 5, 6]) # creates a subplot(111) by default
plt.figure(1) # figure 1 current; subplot(212) still current
3.1. Introductory 17",0.0100400447845458,"6>
68 The Matplotlib AxesGrid Toolkit API 1795 69 The Matplotlib axes_grid1 Toolkit API 1805
V mplot3d 1823 70 Matplotlib mplot3d toolkit 1825
VI Toolkits 1879 71 Mapping Toolkits 1883 72 General Toolkits 1885 73 High-Level Plotting 1889
VII External Resources 1893 74 Books, Chapters and Articles 1895 75 Videos 1897 76 Tutorials 1899
VIII The Matplotlib Developers’ Guide 1901 77 Contributing 1903 78 Developer’s tips for testing 1911 79 Developer’s tips for documenting matplotlib 1917 80 Developer’s guide for creating scales and transformations 1929 81 Developer’s tips for writing code for Python 2 and 3 1933 82 Working with Matplotlib source code 1937 83 Reviewers guideline 1957 84 Release Guide 1959 85 Matplotlib Enhancement Proposals 1965 86 Licenses 2017 87 DefaultColorchanges 2019
 iv
"
113,5.0,matplotlib_21-41_pdf.pdf ~ 5,"Matplotlib, Release 2.0.2
plt.subplot(211) # make subplot(211) in figure1 current
plt.title('Easy as 1, 2, 3') # subplot 211 title
You can clear the current ﬁgure with clf() and the current axes with cla(). If you ﬁnd it annoying that
states (speciﬁcally the current image, ﬁgure and axes) are being maintained for you behind the scenes, don’t
despair: this is just a thin stateful wrapper around an object oriented API, which you can use instead (see
Artist tutorial)
If you are making lots of ﬁgures, you need to be aware of one more thing: the memory required for a ﬁgure
is not completely released until the ﬁgure is explicitly closed with close(). Deleting all references to the
ﬁgure, and/or using the window manager to kill the window in which the ﬁgure appears on the screen, is not
enough, because pyplot maintains internal references until close() is called.
Working with text
The text() command can be used to add text in an arbitrary location, and the xlabel(), ylabel() and
title() are used to add text in the indicated locations (see Text introductionfor a more detailed example)
import numpy as np
import matplotlib.pyplot as plt
# Fixing random state for reproducibility
np.random.seed(19680801)
mu, sigma = 100, 15
x = mu + sigma * np.random.randn(10000)
# the histogram of the data
n, bins, patches = plt.hist(x, 50, normed=1, facecolor='g', alpha=0.75)
plt.xlabel('Smarts')
plt.ylabel('Probability')
plt.title('Histogram of IQ')
plt.text(60, .025, r'$\mu=100,\ \sigma=15$')
plt.axis([40, 160, 0, 0.03])
plt.grid(True)
plt.show()
18 Chapter 3. Tutorials",0.0082948207855224,"Matplotlib, Release 2.0.2
plt.subplot(211)
# make subplot(211) in figure1 current
plt.title('Easy as 1, 2, 3') # subplot 211 title
You can clear the current ﬁgure with clf() and the current axes with cla(). If you ﬁnd it annoying that
states (speciﬁcally the current image, ﬁgure and axes) are being maintained for you behind the scenes, don’t
despair: this is just a thin stateful wrapper around an object oriented API, which you can use instead (see
Artist tutorial)
If you are making lots of ﬁgures, you need to be aware of one more thing: the memory required for a ﬁgure
is not completely released until the ﬁgure is explicitly closed with close(). Deleting all references to the
ﬁgure, and/or using the window manager to kill the window in which the ﬁgure appears on the screen, is not
enough, because pyplot maintains internal references until close() is called.
Working with text
The text() command can be used to add text in an arbitrary location, and the xlabel(), ylabel() and
title() are used to add text in the indicated locations (see Text introduction for a more detailed example)
import numpy as np
import matplotlib.pyplot as plt
# Fixing random state for reproducibility
np.random.seed(19680801)
mu, sigma = 100, 15
x = mu + sigma * np.random.randn(10000)
# the histogram of the data
n, bins, patches = plt.hist(x, 50, normed=1, facecolor='g', alpha=0.75)
plt.xlabel('Smarts')
plt.ylabel('Probability')
plt.title('Histogram of IQ')
plt.text(60, .025, r'$\mu=100,\ \sigma=15$')
plt.axis([40, 160, 0, 0.03])
plt.grid(True)
plt.show()
18
Chapter 3. Tutorials
",0.0015449523925781,"Matplotlib, Release 2.0.2
plt.subplot(211) # make subplot(211) in figure1 current
plt.title('Easy as 1, 2, 3') # subplot 211 title
You can clear the current ﬁgure with clf() and the current axes with cla(). If you ﬁnd it annoying that
states (speciﬁcally the current image, ﬁgure and axes) are being maintained for you behind the scenes, don’t
despair: this is just a thin stateful wrapper around an object oriented API, which you can use instead (see
Artist tutorial)
If you are making lots of ﬁgures, you need to be aware of one more thing: the memory required for a ﬁgure
is not completely released until the ﬁgure is explicitly closed with close(). Deleting all references to the
ﬁgure, and/or using the window manager to kill the window in which the ﬁgure appears on the screen, is not
enough, because pyplot maintains internal references until close() is called.
Working with text
The text() command can be used to add text in an arbitrary location, and the xlabel(), ylabel() and
title() are used to add text in the indicated locations (see Text introductionfor a more detailed example)
import numpy as np
import matplotlib.pyplot as plt
# Fixing random state for reproducibility
np.random.seed(19680801)
mu, sigma = 100, 15
x = mu + sigma * np.random.randn(10000)
# the histogram of the data
n, bins, patches = plt.hist(x, 50, normed=1, facecolor='g', alpha=0.75)
plt.xlabel('Smarts')
plt.ylabel('Probability')
plt.title('Histogram of IQ')
plt.text(60, .025, r'$\mu=100,\ \sigma=15$')
plt.axis([40, 160, 0, 0.03])
plt.grid(True)
plt.show()
18 Chapter 3. Tutorials",0.0078637599945068,"7>
IX Matplotlib Examples 2023 88 animation Examples 2025 89 api Examples 2029 90 axes_grid Examples 2123 91 color Examples 2175 92 event_handling Examples 2187 93 frontpage Examples 2221 94 images_contours_and_fields Examples 2225 95 lines_bars_and_markers Examples 2237 96 misc Examples 2251 97 mplot3d Examples 2275 98 pie_and_polar_charts Examples 2323 99 pylab_examples Examples 2329 100pyplots Examples 2769 101scales Examples 2791 102shapes_and_collections Examples 2793 103showcase Examples 2799 104specialty_plots Examples 2817 105statistics Examples 2825 106style_sheets Examples 2857 107subplots_axes_and_figures Examples 2873 108tests Examples 2877 109text_labels_and_annotations Examples 2889 110ticks_and_spines Examples 2895 111units Examples 2909 112user_interfaces Examples 2935 113widgets Examples 3001
 v
"
114,6.0,matplotlib_21-41_pdf.pdf ~ 6,"Matplotlib, Release 2.0.2
40 60 80 100 120 140 160
Smarts
0.000
0.005
0.010
0.015
0.020
0.025
0.030Probability
= 100, = 15
Histogram of IQ
All of the text() commands return an matplotlib.text.Text instance. Just as with with lines above,
you can customize the properties by passing keyword arguments into the text functions or using setp():
t = plt.xlabel('my data', fontsize=14, color='red')
These properties are covered in more detail in Text properties and layout.
Using mathematical expressions in text
matplotlib accepts TeX equation expressions in any text expression. For example to write the expression
σi = 15 in the title, you can write a TeX expression surrounded by dollar signs:
plt.title(r'$\sigma_i=15$')
The r preceding the title string is important – it signiﬁes that the string is a raw string and not to treat
backslashes as python escapes. matplotlib has a built-in TeX expression parser and layout engine, and ships
its own math fonts – for details see Writing mathematical expressions. Thus you can use mathematical text
across platforms without requiring a TeX installation. For those who have LaTeX and dvipng installed, you
can also use LaTeX to format your text and incorporate the output directly into your display ﬁgures or saved
postscript – see Text rendering With LaTeX.
3.1. Introductory 19",0.0109996795654296,"Matplotlib, Release 2.0.2
40
60
80
100
120
140
160
Smarts
0.000
0.005
0.010
0.015
0.020
0.025
0.030
Probability
= 100,
= 15
Histogram of IQ
All of the text() commands return an matplotlib.text.Text instance. Just as with with lines above,
you can customize the properties by passing keyword arguments into the text functions or using setp():
t = plt.xlabel('my data', fontsize=14, color='red')
These properties are covered in more detail in Text properties and layout.
Using mathematical expressions in text
matplotlib accepts TeX equation expressions in any text expression. For example to write the expression
σi = 15 in the title, you can write a TeX expression surrounded by dollar signs:
plt.title(r'$\sigma_i=15$')
The r preceding the title string is important – it signiﬁes that the string is a raw string and not to treat
backslashes as python escapes. matplotlib has a built-in TeX expression parser and layout engine, and ships
its own math fonts – for details see Writing mathematical expressions. Thus you can use mathematical text
across platforms without requiring a TeX installation. For those who have LaTeX and dvipng installed, you
can also use LaTeX to format your text and incorporate the output directly into your display ﬁgures or saved
postscript – see Text rendering With LaTeX.
3.1. Introductory
19
",0.0021021366119384,"Matplotlib, Release 2.0.2
40 60 80 100 120 140 160
Smarts
0.000
0.005
0.010
0.015
0.020
0.025
0.030Probability
= 100, = 15
Histogram of IQ
All of the text() commands return an matplotlib.text.Text instance. Just as with with lines above,
you can customize the properties by passing keyword arguments into the text functions or using setp():
t = plt.xlabel('my data', fontsize=14, color='red')
These properties are covered in more detail in Text properties and layout.
Using mathematical expressions in text
matplotlib accepts TeX equation expressions in any text expression. For example to write the expression
σi = 15 in the title, you can write a TeX expression surrounded by dollar signs:
plt.title(r'$\sigma_i=15$')
The r preceding the title string is important – it signiﬁes that the string is a raw string and not to treat
backslashes as python escapes. matplotlib has a built-in TeX expression parser and layout engine, and ships
its own math fonts – for details see Writing mathematical expressions. Thus you can use mathematical text
across platforms without requiring a TeX installation. For those who have LaTeX and dvipng installed, you
can also use LaTeX to format your text and incorporate the output directly into your display ﬁgures or saved
postscript – see Text rendering With LaTeX.
3.1. Introductory 19",0.0109469890594482,"8>
X Glossary 3015 Bibliography 3019 Python Module Index 3021 Index 3023
 vi
"
115,7.0,matplotlib_21-41_pdf.pdf ~ 7,"Matplotlib, Release 2.0.2
Annotating text
The uses of the basictext() command above place text at an arbitrary position on the Axes. A common use
for text is to annotate some feature of the plot, and the annotate() method provides helper functionality
to make annotations easy. In an annotation, there are two points to consider: the location being annotated
represented by the argument xy and the location of the text xytext. Both of these arguments are (x,y)
tuples.
import numpy as np
import matplotlib.pyplot as plt
ax = plt.subplot(111)
t = np.arange(0.0, 5.0, 0.01)
s = np.cos(2*np.pi*t)
line, = plt.plot(t, s, lw=2)
plt.annotate('local max', xy=(2, 1), xytext=(3, 1.5),
arrowprops=dict(facecolor='black', shrink=0.05),
)
plt.ylim(-2,2)
plt.show()
0 1 2 3 4 5
2.0
1.5
1.0
0.5
0.0
0.5
1.0
1.5
2.0
local max
In this basic example, both the xy (arrow tip) and xytext locations (text location) are in data coordinates.
20 Chapter 3. Tutorials",0.0074009895324707,"Matplotlib, Release 2.0.2
Annotating text
The uses of the basic text() command above place text at an arbitrary position on the Axes. A common use
for text is to annotate some feature of the plot, and the annotate() method provides helper functionality
to make annotations easy. In an annotation, there are two points to consider: the location being annotated
represented by the argument xy and the location of the text xytext. Both of these arguments are (x,y)
tuples.
import numpy as np
import matplotlib.pyplot as plt
ax = plt.subplot(111)
t = np.arange(0.0, 5.0, 0.01)
s = np.cos(2*np.pi*t)
line, = plt.plot(t, s, lw=2)
plt.annotate('local max', xy=(2, 1), xytext=(3, 1.5),
arrowprops=dict(facecolor='black', shrink=0.05),
)
plt.ylim(-2,2)
plt.show()
0
1
2
3
4
5
2.0
1.5
1.0
0.5
0.0
0.5
1.0
1.5
2.0
local max
In this basic example, both the xy (arrow tip) and xytext locations (text location) are in data coordinates.
20
Chapter 3. Tutorials
",0.0015740394592285,"Matplotlib, Release 2.0.2
Annotating text
The uses of the basictext() command above place text at an arbitrary position on the Axes. A common use
for text is to annotate some feature of the plot, and the annotate() method provides helper functionality
to make annotations easy. In an annotation, there are two points to consider: the location being annotated
represented by the argument xy and the location of the text xytext. Both of these arguments are (x,y)
tuples.
import numpy as np
import matplotlib.pyplot as plt
ax = plt.subplot(111)
t = np.arange(0.0, 5.0, 0.01)
s = np.cos(2*np.pi*t)
line, = plt.plot(t, s, lw=2)
plt.annotate('local max', xy=(2, 1), xytext=(3, 1.5),
arrowprops=dict(facecolor='black', shrink=0.05),
)
plt.ylim(-2,2)
plt.show()
0 1 2 3 4 5
2.0
1.5
1.0
0.5
0.0
0.5
1.0
1.5
2.0
local max
In this basic example, both the xy (arrow tip) and xytext locations (text location) are in data coordinates.
20 Chapter 3. Tutorials",0.0076401233673095,"9>
Part I User’s Guide
 1
"
116,8.0,matplotlib_21-41_pdf.pdf ~ 8,"Matplotlib, Release 2.0.2
There are a variety of other coordinate systems one can choose – seeBasic annotation and Advanced Anno-
tation for details. More examples can be found in pylab_examples example code: annotation_demo.py.
Logarithmic and other nonlinear axes
matplotlib.pyplot supports not only linear axis scales, but also logarithmic and logit scales. This is
commonly used if data spans many orders of magnitude. Changing the scale of an axis is easy:
plt.xscale(‘log’)
An example of four plots with the same data and diﬀerent scales for the y axis is shown below.
import numpy as np
import matplotlib.pyplot as plt
from matplotlib.ticker import NullFormatter # useful for ` logit` scale
# Fixing random state for reproducibility
np.random.seed(19680801)
# make up some data in the interval ]0, 1[
y = np.random.normal(loc=0.5, scale=0.4, size=1000)
y = y[(y > 0) & (y < 1)]
y.sort()
x = np.arange(len(y))
# plot with various axes scales
plt.figure(1)
# linear
plt.subplot(221)
plt.plot(x, y)
plt.yscale('linear')
plt.title('linear')
plt.grid(True)
# log
plt.subplot(222)
plt.plot(x, y)
plt.yscale('log')
plt.title('log')
plt.grid(True)
# symmetric log
plt.subplot(223)
plt.plot(x, y - y.mean())
plt.yscale('symlog', linthreshy=0.01)
plt.title('symlog')
plt.grid(True)
# logit
3.1. Introductory 21",0.0068380832672119,"Matplotlib, Release 2.0.2
There are a variety of other coordinate systems one can choose – see Basic annotation and Advanced Anno-
tation for details. More examples can be found in pylab_examples example code: annotation_demo.py.
Logarithmic and other nonlinear axes
matplotlib.pyplot supports not only linear axis scales, but also logarithmic and logit scales. This is
commonly used if data spans many orders of magnitude. Changing the scale of an axis is easy:
plt.xscale(‘log’)
An example of four plots with the same data and diﬀerent scales for the y axis is shown below.
import numpy as np
import matplotlib.pyplot as plt
from matplotlib.ticker import NullFormatter
# useful for `logit` scale
# Fixing random state for reproducibility
np.random.seed(19680801)
# make up some data in the interval ]0, 1[
y = np.random.normal(loc=0.5, scale=0.4, size=1000)
y = y[(y > 0) & (y < 1)]
y.sort()
x = np.arange(len(y))
# plot with various axes scales
plt.figure(1)
# linear
plt.subplot(221)
plt.plot(x, y)
plt.yscale('linear')
plt.title('linear')
plt.grid(True)
# log
plt.subplot(222)
plt.plot(x, y)
plt.yscale('log')
plt.title('log')
plt.grid(True)
# symmetric log
plt.subplot(223)
plt.plot(x, y - y.mean())
plt.yscale('symlog', linthreshy=0.01)
plt.title('symlog')
plt.grid(True)
# logit
3.1. Introductory
21
",0.0014331340789794,"Matplotlib, Release 2.0.2
There are a variety of other coordinate systems one can choose – seeBasic annotation and Advanced Anno-
tation for details. More examples can be found in pylab_examples example code: annotation_demo.py.
Logarithmic and other nonlinear axes
matplotlib.pyplot supports not only linear axis scales, but also logarithmic and logit scales. This is
commonly used if data spans many orders of magnitude. Changing the scale of an axis is easy:
plt.xscale(‘log’)
An example of four plots with the same data and diﬀerent scales for the y axis is shown below.
import numpy as np
import matplotlib.pyplot as plt
from matplotlib.ticker import NullFormatter # useful for ` logit` scale
# Fixing random state for reproducibility
np.random.seed(19680801)
# make up some data in the interval ]0, 1[
y = np.random.normal(loc=0.5, scale=0.4, size=1000)
y = y[(y > 0) & (y < 1)]
y.sort()
x = np.arange(len(y))
# plot with various axes scales
plt.figure(1)
# linear
plt.subplot(221)
plt.plot(x, y)
plt.yscale('linear')
plt.title('linear')
plt.grid(True)
# log
plt.subplot(222)
plt.plot(x, y)
plt.yscale('log')
plt.title('log')
plt.grid(True)
# symmetric log
plt.subplot(223)
plt.plot(x, y - y.mean())
plt.yscale('symlog', linthreshy=0.01)
plt.title('symlog')
plt.grid(True)
# logit
3.1. Introductory 21",0.0068836212158203,"10>

"
117,9.0,matplotlib_21-41_pdf.pdf ~ 9,"Matplotlib, Release 2.0.2
plt.subplot(224)
plt.plot(x, y)
plt.yscale('logit')
plt.title('logit')
plt.grid(True)
# Format the minor tick labels of the y-axis into empty strings with
# ` NullFormatter` , to avoid cumbering the axis with too many labels.
plt.gca().yaxis.set_minor_formatter(NullFormatter())
# Adjust the subplot layout, because the logit one may take more space
# than usual, due to y-tick labels like ""1 - 10^{-3}""
plt.subplots_adjust(top=0.92, bottom=0.08, left=0.10, right=0.95, hspace=0.25,
wspace=0.35)
plt.show()
0 250 500 750
0.0
0.2
0.4
0.6
0.8
1.0
linear
0 250 500 750
10 2
10 1
100
log
0 250 500 750
100
10 1
10 2
0
10 2
10 1
symlog
0 250 500 750
0.01
0.10
0.50
0.90
0.99
1 10 3
logit
It is also possible to add your own scale, see Developer’s guide for creating scales and transformationsfor
details.
3.1.2 Image tutorial
22 Chapter 3. Tutorials",0.0156099796295166,"Matplotlib, Release 2.0.2
plt.subplot(224)
plt.plot(x, y)
plt.yscale('logit')
plt.title('logit')
plt.grid(True)
# Format the minor tick labels of the y-axis into empty strings with
# `NullFormatter`, to avoid cumbering the axis with too many labels.
plt.gca().yaxis.set_minor_formatter(NullFormatter())
# Adjust the subplot layout, because the logit one may take more space
# than usual, due to y-tick labels like ""1 - 10^{-3}""
plt.subplots_adjust(top=0.92, bottom=0.08, left=0.10, right=0.95, hspace=0.25,
wspace=0.35)
plt.show()
0
250
500
750
0.0
0.2
0.4
0.6
0.8
1.0
linear
0
250
500
750
10
2
10
1
100
log
0
250
500
750
100
10
1
10
2
0
10
2
10
1
symlog
0
250
500
750
0.01
0.10
0.50
0.90
0.99
1
10
3
logit
It is also possible to add your own scale, see Developer’s guide for creating scales and transformations for
details.
3.1.2 Image tutorial
22
Chapter 3. Tutorials
",0.0039911270141601,"Matplotlib, Release 2.0.2
plt.subplot(224)
plt.plot(x, y)
plt.yscale('logit')
plt.title('logit')
plt.grid(True)
# Format the minor tick labels of the y-axis into empty strings with
# ` NullFormatter` , to avoid cumbering the axis with too many labels.
plt.gca().yaxis.set_minor_formatter(NullFormatter())
# Adjust the subplot layout, because the logit one may take more space
# than usual, due to y-tick labels like ""1 - 10^{-3}""
plt.subplots_adjust(top=0.92, bottom=0.08, left=0.10, right=0.95, hspace=0.25,
wspace=0.35)
plt.show()
0 250 500 750
0.0
0.2
0.4
0.6
0.8
1.0
linear
0 250 500 750
10 2
10 1
100
log
0 250 500 750
100
10 1
10 2
0
10 2
10 1
symlog
0 250 500 750
0.01
0.10
0.50
0.90
0.99
1 10 3
logit
It is also possible to add your own scale, see Developer’s guide for creating scales and transformationsfor
details.
3.1.2 Image tutorial
22 Chapter 3. Tutorials",0.0141060352325439,"11>
 CHAPTER ONE
INTRODUCTION
Matplotlib is a library for making 2D plots of arrays in Python. Although it has its origins in emulating the MATLAB®1 graphics commands, it is independent of MATLAB, and can be used in a Pythonic, object oriented way. Although Matplotlib is written primarily in pure Python, it makes heavy use of NumPy and other extension code to provide good performance even for large arrays.
Matplotlib is designed with the philosophy that you should be able to create simple plots with just a few commands, or just one! If you want to see a histogram of your data, you shouldn’t need to instantiate objects, call methods, set properties, and so on; it should just work.
For years, I used to use MATLAB exclusively for data analysis and visualization. MATLAB excels at mak- ing nice looking plots easy. When I began working with EEG data, I found that I needed to write applications to interact with my data, and developed an EEG analysis application in MATLAB. As the application grew in complexity, interacting with databases, http servers, manipulating complex data structures, I began to strain against the limitations of MATLAB as a programming language, and decided to start over in Python. Python more than makes up for all of MATLAB’s deficiencies as a programming language, but I was having difficulty finding a 2D plotting package (for 3D VTK more than exceeds all of my needs).
When I went searching for a Python plotting package, I had several requirements:
• Plots should look great - publication quality. One important requirement for me is that the text looks good (antialiased, etc.)
• Postscript output for inclusion with TeX documents
• Embeddable in a graphical user interface for application development
• Code should be easy enough that I can understand it and extend it
• Making plots should be easy
Finding no package that suited me just right, I did what any self-respecting Python programmer would do: rolled up my sleeves and dived in. Not having any real experience with computer graphics, I decided to emulate MATLAB’s plotting capabilities because that is something MATLAB does very well. This had the added advantage that many people have a lot of MATLAB experience, and thus they can quickly get up to steam plotting in python. From a developer’s perspective, having a fixed user interface (the pylab interface) has been very useful, because the guts of the code base can be redesigned without affecting user code.
The Matplotlib code is conceptually divided into three parts: the pylab interface is the set of functions provided by matplotlib.pylab which allow the user to create plots with code quite similar to MATLAB
1 MATLAB is a registered trademark of The MathWorks, Inc.
   3
"
118,10.0,matplotlib_21-41_pdf.pdf ~ 10,"Matplotlib, Release 2.0.2
Startup commands
First, let’s start IPython. It is a most excellent enhancement to the standard Python prompt, and it ties in
especially well with Matplotlib. Start IPython either at a shell, or the IPython Notebook now.
With IPython started, we now need to connect to a GUI event loop. This tells IPython where (and how) to
display plots. To connect to a GUI loop, execute the %matplotlib magic at your IPython prompt. There’s
more detail on exactly what this does at IPython’s documentation on GUI event loops.
If you’re using IPython Notebook, the same commands are available, but people commonly use a speciﬁc
argument to the %matplotlib magic:
In [1]: %matplotlib inline
This turns on inline plotting, where plot graphics will appear in your notebook. This has important implica-
tions for interactivity. For inline plotting, commands in cells below the cell that outputs a plot will not aﬀect
the plot. For example, changing the color map is not possible from cells below the cell that creates a plot.
However, for other backends, such as qt4, that open a separate window, cells below those that create the plot
will change the plot - it is a live object in memory.
This tutorial will use matplotlib’s imperative-style plotting interface, pyplot. This interface maintains global
state, and is very useful for quickly and easily experimenting with various plot settings. The alternative is
the object-oriented interface, which is also very powerful, and generally more suitable for large application
development. If you’d like to learn about the object-oriented interface, a great place to start is our FAQ on
usage. For now, let’s get on with the imperative-style approach:
In [2]: import matplotlib.pyplot as plt
In [3]: import matplotlib.image as mpimg
In [4]: import numpy as np
Importing image data into Numpy arrays
Loading image data is supported by the Pillow library. Natively, matplotlib only supports PNG images. The
commands shown below fall back on Pillow if the native read fails.
The image used in this example is a PNG ﬁle, but keep that Pillow requirement in mind for your own data.
Here’s the image we’re going to play with:
3.1. Introductory 23",0.0072879791259765,"Matplotlib, Release 2.0.2
Startup commands
First, let’s start IPython. It is a most excellent enhancement to the standard Python prompt, and it ties in
especially well with Matplotlib. Start IPython either at a shell, or the IPython Notebook now.
With IPython started, we now need to connect to a GUI event loop. This tells IPython where (and how) to
display plots. To connect to a GUI loop, execute the %matplotlib magic at your IPython prompt. There’s
more detail on exactly what this does at IPython’s documentation on GUI event loops.
If you’re using IPython Notebook, the same commands are available, but people commonly use a speciﬁc
argument to the %matplotlib magic:
In [1]: %matplotlib inline
This turns on inline plotting, where plot graphics will appear in your notebook. This has important implica-
tions for interactivity. For inline plotting, commands in cells below the cell that outputs a plot will not aﬀect
the plot. For example, changing the color map is not possible from cells below the cell that creates a plot.
However, for other backends, such as qt4, that open a separate window, cells below those that create the plot
will change the plot - it is a live object in memory.
This tutorial will use matplotlib’s imperative-style plotting interface, pyplot. This interface maintains global
state, and is very useful for quickly and easily experimenting with various plot settings. The alternative is
the object-oriented interface, which is also very powerful, and generally more suitable for large application
development. If you’d like to learn about the object-oriented interface, a great place to start is our FAQ on
usage. For now, let’s get on with the imperative-style approach:
In [2]: import matplotlib.pyplot as plt
In [3]: import matplotlib.image as mpimg
In [4]: import numpy as np
Importing image data into Numpy arrays
Loading image data is supported by the Pillow library. Natively, matplotlib only supports PNG images. The
commands shown below fall back on Pillow if the native read fails.
The image used in this example is a PNG ﬁle, but keep that Pillow requirement in mind for your own data.
Here’s the image we’re going to play with:
3.1. Introductory
23
",0.0022308826446533,"Matplotlib, Release 2.0.2
Startup commands
First, let’s start IPython. It is a most excellent enhancement to the standard Python prompt, and it ties in
especially well with Matplotlib. Start IPython either at a shell, or the IPython Notebook now.
With IPython started, we now need to connect to a GUI event loop. This tells IPython where (and how) to
display plots. To connect to a GUI loop, execute the %matplotlib magic at your IPython prompt. There’s
more detail on exactly what this does at IPython’s documentation on GUI event loops.
If you’re using IPython Notebook, the same commands are available, but people commonly use a speciﬁc
argument to the %matplotlib magic:
In [1]: %matplotlib inline
This turns on inline plotting, where plot graphics will appear in your notebook. This has important implica-
tions for interactivity. For inline plotting, commands in cells below the cell that outputs a plot will not aﬀect
the plot. For example, changing the color map is not possible from cells below the cell that creates a plot.
However, for other backends, such as qt4, that open a separate window, cells below those that create the plot
will change the plot - it is a live object in memory.
This tutorial will use matplotlib’s imperative-style plotting interface, pyplot. This interface maintains global
state, and is very useful for quickly and easily experimenting with various plot settings. The alternative is
the object-oriented interface, which is also very powerful, and generally more suitable for large application
development. If you’d like to learn about the object-oriented interface, a great place to start is our FAQ on
usage. For now, let’s get on with the imperative-style approach:
In [2]: import matplotlib.pyplot as plt
In [3]: import matplotlib.image as mpimg
In [4]: import numpy as np
Importing image data into Numpy arrays
Loading image data is supported by the Pillow library. Natively, matplotlib only supports PNG images. The
commands shown below fall back on Pillow if the native read fails.
The image used in this example is a PNG ﬁle, but keep that Pillow requirement in mind for your own data.
Here’s the image we’re going to play with:
3.1. Introductory 23",0.007127046585083,"12>
Matplotlib, Release 2.0.2
 figure generating code (Pyplot tutorial). The Matplotlib frontend or Matplotlib API is the set of classes that do the heavy lifting, creating and managing figures, text, lines, plots and so on (Artist tutorial). This is an abstract interface that knows nothing about output. The backends are device-dependent drawing devices, aka renderers, that transform the frontend representation to hardcopy or a display device (What is a backend?). Example backends: PS creates PostScript® hardcopy, SVG creates Scalable Vector Graphics hardcopy, Agg creates PNG output using the high quality Anti-Grain Geometry library that ships with Matplotlib, GTK embeds Matplotlib in a Gtk+ application, GTKAgg uses the Anti-Grain renderer to create a figure and embed it in a Gtk+ application, and so on for PDF, WxWidgets, Tkinter, etc.
Matplotlib is used by many people in many different contexts. Some people want to automatically generate PostScript files to send to a printer or publishers. Others deploy Matplotlib on a web application server to generate PNG output for inclusion in dynamically-generated web pages. Some use Matplotlib interactively from the Python shell in Tkinter on WindowsTM. My primary use is to embed Matplotlib in a Gtk+ EEG application that runs on Windows, Linux and Macintosh OS X.
 4 Chapter1. Introduction

"
119,11.0,matplotlib_21-41_pdf.pdf ~ 11,"Matplotlib, Release 2.0.2
It’s a 24-bit RGB PNG image (8 bits for each of R, G, B). Depending on where you get your data, the other
kinds of image that you’ll most likely encounter are RGBA images, which allow for transparency, or single-
channel grayscale (luminosity) images. You can right click on it and choose “Save image as” to download
it to your computer for the rest of this tutorial.
And here we go...
In [5]: img=mpimg.imread('stinkbug.png')
Out[5]:
array([[[ 0.40784314, 0.40784314, 0.40784314],
[ 0.40784314, 0.40784314, 0.40784314],
[ 0.40784314, 0.40784314, 0.40784314],
...,
[ 0.42745098, 0.42745098, 0.42745098],
[ 0.42745098, 0.42745098, 0.42745098],
[ 0.42745098, 0.42745098, 0.42745098]],
...,
[[ 0.44313726, 0.44313726, 0.44313726],
[ 0.4509804 , 0.4509804 , 0.4509804 ],
[ 0.4509804 , 0.4509804 , 0.4509804 ],
...,
[ 0.44705883, 0.44705883, 0.44705883],
24 Chapter 3. Tutorials",0.0036380290985107,"Matplotlib, Release 2.0.2
It’s a 24-bit RGB PNG image (8 bits for each of R, G, B). Depending on where you get your data, the other
kinds of image that you’ll most likely encounter are RGBA images, which allow for transparency, or single-
channel grayscale (luminosity) images. You can right click on it and choose “Save image as” to download
it to your computer for the rest of this tutorial.
And here we go...
In [5]: img=mpimg.imread('stinkbug.png')
Out[5]:
array([[[ 0.40784314,
0.40784314,
0.40784314],
[ 0.40784314,
0.40784314,
0.40784314],
[ 0.40784314,
0.40784314,
0.40784314],
...,
[ 0.42745098,
0.42745098,
0.42745098],
[ 0.42745098,
0.42745098,
0.42745098],
[ 0.42745098,
0.42745098,
0.42745098]],
...,
[[ 0.44313726,
0.44313726,
0.44313726],
[ 0.4509804 ,
0.4509804 ,
0.4509804 ],
[ 0.4509804 ,
0.4509804 ,
0.4509804 ],
...,
[ 0.44705883,
0.44705883,
0.44705883],
24
Chapter 3. Tutorials
",0.0008158683776855,"Matplotlib, Release 2.0.2
It’s a 24-bit RGB PNG image (8 bits for each of R, G, B). Depending on where you get your data, the other
kinds of image that you’ll most likely encounter are RGBA images, which allow for transparency, or single-
channel grayscale (luminosity) images. You can right click on it and choose “Save image as” to download
it to your computer for the rest of this tutorial.
And here we go...
In [5]: img=mpimg.imread('stinkbug.png')
Out[5]:
array([[[ 0.40784314, 0.40784314, 0.40784314],
[ 0.40784314, 0.40784314, 0.40784314],
[ 0.40784314, 0.40784314, 0.40784314],
...,
[ 0.42745098, 0.42745098, 0.42745098],
[ 0.42745098, 0.42745098, 0.42745098],
[ 0.42745098, 0.42745098, 0.42745098]],
...,
[[ 0.44313726, 0.44313726, 0.44313726],
[ 0.4509804 , 0.4509804 , 0.4509804 ],
[ 0.4509804 , 0.4509804 , 0.4509804 ],
...,
[ 0.44705883, 0.44705883, 0.44705883],
24 Chapter 3. Tutorials",0.0039882659912109,"13>
 CHAPTER TWO
INSTALLING
There are many different ways to install matplotlib, and the best way depends on what operating system you are using, what you already have installed, and how you want to use it. To avoid wading through all the details (and potential complications) on this page, there are several convenient options.
2.1 Installing pre-built packages
2.1.1 Most platforms : scientific Python distributions
The first option is to use one of the pre-packaged python distributions that already provide matplotlib built-in. The Continuum.io Python distribution (Anaconda or miniconda) and the Enthought distribution (Canopy) are both excellent choices that “just work” out of the box for Windows, OSX and common Linux platforms. Both of these distributions include matplotlib and lots of other useful tools.
2.1.2 Linux : using your package manager
If you are on Linux, you might prefer to use your package manager. matplotlib is packaged for almost every major Linux distribution.
• Debian / Ubuntu : sudo apt-get install python-matplotlib • Fedora / Redhat : sudo yum install python-matplotlib
2.1.3 Mac OSX : using pip
If you are on Mac OSX you can probably install matplotlib binaries using the standard Python installation program pip. See Installing OSX binary wheels.
2.1.4 Windows
If you don’t already have Python installed, we recommend using one of the scipy-stack compatible Python distributions such as WinPython, Python(x,y), Enthought Canopy, or Continuum Anaconda, which have matplotlib and many of its dependencies, plus other useful packages, preinstalled.
For standard Python installations, install matplotlib using pip:
  5
"
120,12.0,matplotlib_21-41_pdf.pdf ~ 12,"Matplotlib, Release 2.0.2
[ 0.44705883, 0.44705883, 0.44705883],
[ 0.44313726, 0.44313726, 0.44313726]]], dtype=float32)
Note the dtype there - ﬂoat32. Matplotlib has rescaled the 8 bit data from each channel to ﬂoating point
data between 0.0 and 1.0. As a side note, the only datatype that Pillow can work with is uint8. Matplotlib
plotting can handle ﬂoat32 and uint8, but image reading /writing for any format other than PNG is limited
to uint8 data. Why 8 bits? Most displays can only render 8 bits per channel worth of color gradation. Why
can they only render 8 bits /channel? Because that’s about all the human eye can see. More here (from a
photography standpoint): Luminous Landscape bit depth tutorial.
Each inner list represents a pixel. Here, with an RGB image, there are 3 values. Since it’s a black and white
image, R, G, and B are all similar. An RGBA (where A is alpha, or transparency), has 4 values per inner list,
and a simple luminance image just has one value (and is thus only a 2-D array, not a 3-D array). For RGB
and RGBA images, matplotlib supports ﬂoat32 and uint8 data types. For grayscale, matplotlib supports only
ﬂoat32. If your array data does not meet one of these descriptions, you need to rescale it.
Plotting numpy arrays as images
So, you have your data in a numpy array (either by importing it, or by generating it). Let’s render it. In
Matplotlib, this is performed using the imshow() function. Here we’ll grab the plot object. This object
gives you an easy way to manipulate the plot from the prompt.
In [6]: imgplot = plt.imshow(img)
0 100 200 300 400 500
0
50
100
150
200
250
300
350
3.1. Introductory 25",0.0069401264190673,"Matplotlib, Release 2.0.2
[ 0.44705883,
0.44705883,
0.44705883],
[ 0.44313726,
0.44313726,
0.44313726]]], dtype=float32)
Note the dtype there - ﬂoat32. Matplotlib has rescaled the 8 bit data from each channel to ﬂoating point
data between 0.0 and 1.0. As a side note, the only datatype that Pillow can work with is uint8. Matplotlib
plotting can handle ﬂoat32 and uint8, but image reading/writing for any format other than PNG is limited
to uint8 data. Why 8 bits? Most displays can only render 8 bits per channel worth of color gradation. Why
can they only render 8 bits/channel? Because that’s about all the human eye can see. More here (from a
photography standpoint): Luminous Landscape bit depth tutorial.
Each inner list represents a pixel. Here, with an RGB image, there are 3 values. Since it’s a black and white
image, R, G, and B are all similar. An RGBA (where A is alpha, or transparency), has 4 values per inner list,
and a simple luminance image just has one value (and is thus only a 2-D array, not a 3-D array). For RGB
and RGBA images, matplotlib supports ﬂoat32 and uint8 data types. For grayscale, matplotlib supports only
ﬂoat32. If your array data does not meet one of these descriptions, you need to rescale it.
Plotting numpy arrays as images
So, you have your data in a numpy array (either by importing it, or by generating it). Let’s render it. In
Matplotlib, this is performed using the imshow() function. Here we’ll grab the plot object. This object
gives you an easy way to manipulate the plot from the prompt.
In [6]: imgplot = plt.imshow(img)
0
100
200
300
400
500
0
50
100
150
200
250
300
350
3.1. Introductory
25
",0.002040147781372,"Matplotlib, Release 2.0.2
[ 0.44705883, 0.44705883, 0.44705883],
[ 0.44313726, 0.44313726, 0.44313726]]], dtype=float32)
Note the dtype there - ﬂoat32. Matplotlib has rescaled the 8 bit data from each channel to ﬂoating point
data between 0.0 and 1.0. As a side note, the only datatype that Pillow can work with is uint8. Matplotlib
plotting can handle ﬂoat32 and uint8, but image reading /writing for any format other than PNG is limited
to uint8 data. Why 8 bits? Most displays can only render 8 bits per channel worth of color gradation. Why
can they only render 8 bits /channel? Because that’s about all the human eye can see. More here (from a
photography standpoint): Luminous Landscape bit depth tutorial.
Each inner list represents a pixel. Here, with an RGB image, there are 3 values. Since it’s a black and white
image, R, G, and B are all similar. An RGBA (where A is alpha, or transparency), has 4 values per inner list,
and a simple luminance image just has one value (and is thus only a 2-D array, not a 3-D array). For RGB
and RGBA images, matplotlib supports ﬂoat32 and uint8 data types. For grayscale, matplotlib supports only
ﬂoat32. If your array data does not meet one of these descriptions, you need to rescale it.
Plotting numpy arrays as images
So, you have your data in a numpy array (either by importing it, or by generating it). Let’s render it. In
Matplotlib, this is performed using the imshow() function. Here we’ll grab the plot object. This object
gives you an easy way to manipulate the plot from the prompt.
In [6]: imgplot = plt.imshow(img)
0 100 200 300 400 500
0
50
100
150
200
250
300
350
3.1. Introductory 25",0.0068390369415283,"14>
Matplotlib, Release 2.0.2
     python -m pip install -U pip setuptools
python -m pip install matplotlib
 In case Python 2.7 or 3.4 are not installed for all users, the Microsoft Visual C++ 2008 (64 bit or 32 bit for Python 2.7) or Microsoft Visual C++ 2010 (64 bit or 32 bit for Python 3.4) redistributable packages need to be installed.
Matplotlib depends on Pillow for reading and saving JPEG, BMP, and TIFF image files. Matplotlib requires MiKTeX and GhostScript for rendering text with LaTeX. FFmpeg, avconv, mencoder, or ImageMagick are required for the animation module.
The following backends should work out of the box: agg, tkagg, ps, pdf and svg. For other backends you may need to install pycairo, PyQt4, PyQt5, PySide, wxPython, PyGTK, Tornado, or GhostScript.
TkAgg is probably the best backend for interactive use from the standard Python shell or IPython. It is enabled as the default backend for the official binaries. GTK3 is not supported on Windows.
The Windows wheels (*.whl) on the PyPI download page do not contain test data or example code. If you want to try the many demos that come in the matplotlib source distribution, down- load the *.tar.gz file and look in the examples subdirectory. To run the test suite, copy the lib\matplotlib\tests and lib\mpl_toolkits\tests directories from the source distribution to sys. prefix\Lib\site-packages\matplotlib and sys.prefix\Lib\site-packages\mpl_toolkits respectively, and install nose, mock, Pillow, MiKTeX, GhostScript, ffmpeg, avconv, mencoder, ImageMag- ick, and Inkscape.
2.2 Installing from source
If you are interested in contributing to matplotlib development, running the latest source code, or just like to build everything yourself, it is not difficult to build matplotlib from source. Grab the latest tar.gz release file from the PyPI files page, or if you want to develop matplotlib or just need the latest bugfixed version, grab the latest git version Source install from git.
The standard environment variables CC, CXX, PKG_CONFIG are respected. This means you can set them if your toolchain is prefixed. This may be used for cross compiling.
Once you have satisfied the requirements detailed below (mainly python, numpy, libpng and freetype), you can build matplotlib.
We provide a setup.cfg file that goes with setup.py which you can use to customize the build process. For example, which default backend to use, whether some of the optional libraries that matplotlib ships with are installed, and so on. This file will be particularly useful to those packaging matplotlib.
    export CC=x86_64-pc-linux-gnu-gcc
export CXX=x86_64-pc-linux-gnu-g++
export PKG_CONFIG=x86_64-pc-linux-gnu-pkg-config
     cd matplotlib
python setup.py build
python setup.py install
  6 Chapter2. Installing
"
121,13.0,matplotlib_21-41_pdf.pdf ~ 13,"Matplotlib, Release 2.0.2
You can also plot any numpy array.
Applying pseudocolor schemes to image plots
Pseudocolor can be a useful tool for enhancing contrast and visualizing your data more easily. This is
especially useful when making presentations of your data using projectors - their contrast is typically quite
poor.
Pseudocolor is only relevant to single-channel, grayscale, luminosity images. We currently have an RGB
image. Since R, G, and B are all similar (see for yourself above or in your data), we can just pick one
channel of our data:
In [7]: lum_img = img[:,:,0]
This is array slicing. You can read more in the Numpy tutorial.
In [8]: plt.imshow(lum_img)
0 100 200 300 400 500
0
50
100
150
200
250
300
350
Now, with a luminosity (2D, no color) image, the default colormap (aka lookup table, LUT), is applied. The
default is called viridis. There are plenty of others to choose from.
In [9]: plt.imshow(lum_img, cmap=""hot"")
26 Chapter 3. Tutorials",0.0072524547576904,"Matplotlib, Release 2.0.2
You can also plot any numpy array.
Applying pseudocolor schemes to image plots
Pseudocolor can be a useful tool for enhancing contrast and visualizing your data more easily. This is
especially useful when making presentations of your data using projectors - their contrast is typically quite
poor.
Pseudocolor is only relevant to single-channel, grayscale, luminosity images. We currently have an RGB
image. Since R, G, and B are all similar (see for yourself above or in your data), we can just pick one
channel of our data:
In [7]: lum_img = img[:,:,0]
This is array slicing. You can read more in the Numpy tutorial.
In [8]: plt.imshow(lum_img)
0
100
200
300
400
500
0
50
100
150
200
250
300
350
Now, with a luminosity (2D, no color) image, the default colormap (aka lookup table, LUT), is applied. The
default is called viridis. There are plenty of others to choose from.
In [9]: plt.imshow(lum_img, cmap=""hot"")
26
Chapter 3. Tutorials
",0.0013141632080078,"Matplotlib, Release 2.0.2
You can also plot any numpy array.
Applying pseudocolor schemes to image plots
Pseudocolor can be a useful tool for enhancing contrast and visualizing your data more easily. This is
especially useful when making presentations of your data using projectors - their contrast is typically quite
poor.
Pseudocolor is only relevant to single-channel, grayscale, luminosity images. We currently have an RGB
image. Since R, G, and B are all similar (see for yourself above or in your data), we can just pick one
channel of our data:
In [7]: lum_img = img[:,:,0]
This is array slicing. You can read more in the Numpy tutorial.
In [8]: plt.imshow(lum_img)
0 100 200 300 400 500
0
50
100
150
200
250
300
350
Now, with a luminosity (2D, no color) image, the default colormap (aka lookup table, LUT), is applied. The
default is called viridis. There are plenty of others to choose from.
In [9]: plt.imshow(lum_img, cmap=""hot"")
26 Chapter 3. Tutorials",0.0056631565093994,"15>
If you have installed prerequisites to nonstandard places and need to inform matplotlib where they are, edit setupext.py and add the base dirs to the basedir dictionary entry for your sys.platform. e.g., if the header to some required library is in /some/path/include/someheader.h, put /some/path in the basedir list for your platform.
2.2.1 Build requirements
These are external packages which you will need to install before installing matplotlib. If you are building on OSX, see Building on OSX. If you are building on Windows, see Building on Windows. If you are installing dependencies with a package manager on Linux, you may need to install the development packages (look for a “-dev” postfix) in addition to the libraries themselves.
Required Dependencies
python 2.7, 3.4, 3.5 or 3.6 Download python.
numpy 1.7.1 (or later) array support for python (download numpy)
setuptools Setuptools provides extensions for python package installation.
dateutil 1.1 or later Provides extensions to python datetime handling. If using pip, easy_install or in- stalling from source, the installer will attempt to download and install python_dateutil from PyPI.
pyparsing Required for matplotlib’s mathtext math rendering support. If using pip, easy_install or in- stalling from source, the installer will attempt to download and install pyparsing from PyPI.
libpng 1.2 (or later) library for loading and saving PNG files (download). libpng requires zlib.
pytz Used to manipulate time-zone aware datetimes. https://pypi.python.org/pypi/pytz
FreeType 2.3 or later Library for reading true type font files. If using pip, easy_install or installing from source, the installer will attempt to locate FreeType in expected locations. If it cannot, try installing pkg-config, a tool used to find required non-python libraries.
cycler 0.10.0 or later Composable cycle class used for constructing style-cycles six Required for compatibility between python 2 and python 3
Dependencies for python 2
functools32 Required for compatibility if running on Python 2.7.
subprocess32 Optional, unix only. Backport of the subprocess standard library from 3.2+ for Python 2.7.
It provides better error messages and timeout support.
Optional GUI framework
These are optional packages which you may want to install to use matplotlib with a user interface toolkit. See What is a backend? for more details on the optional matplotlib backends and the capabilities they provide.
Matplotlib, Release 2.0.2
  2.2. Installingfromsource 7

"
122,14.0,matplotlib_21-41_pdf.pdf ~ 14,"Matplotlib, Release 2.0.2
0 100 200 300 400 500
0
50
100
150
200
250
300
350
Note that you can also change colormaps on existing plot objects using the set_cmap()method:
In [10]: imgplot = plt.imshow(lum_img)
In [11]: imgplot.set_cmap('nipy_spectral')
3.1. Introductory 27",0.0045320987701416,"Matplotlib, Release 2.0.2
0
100
200
300
400
500
0
50
100
150
200
250
300
350
Note that you can also change colormaps on existing plot objects using the set_cmap() method:
In [10]: imgplot = plt.imshow(lum_img)
In [11]: imgplot.set_cmap('nipy_spectral')
3.1. Introductory
27
",0.0004658699035644,"Matplotlib, Release 2.0.2
0 100 200 300 400 500
0
50
100
150
200
250
300
350
Note that you can also change colormaps on existing plot objects using the set_cmap()method:
In [10]: imgplot = plt.imshow(lum_img)
In [11]: imgplot.set_cmap('nipy_spectral')
3.1. Introductory 27",0.0035028457641601,"16>
Matplotlib, Release 2.0.2
 tk 8.3 or later, not 8.6.0 or 8.6.1 The TCL/Tk widgets library used by the TkAgg backend.
Versions 8.6.0 and 8.6.1 are known to have issues that may result in segfaults when closing multiple
windows in the wrong order.
pyqt 4.4 or later The Qt4 widgets library python wrappers for the Qt4Agg backend
pygtk 2.4 or later The python wrappers for the GTK widgets library for use with the GTK or GTKAgg backend
wxpython 2.8 or later The python wrappers for the wx widgets library for use with the WX or WXAgg backend
Optional external programs
ffmpeg/avconv or mencoder Required for the animation module to be save out put to movie formats. ImageMagick Required for the animation module to be able to save to animated gif.
Optional dependencies
Pillow If Pillow is installed, matplotlib can read and write a larger selection of image file formats. pkg-config A tool used to find required non-python libraries. This is not strictly required, but can make
installation go more smoothly if the libraries and headers are not in the expected locations.
Required libraries that ship with matplotlib
agg 2.4 The antigrain C++ rendering engine. matplotlib links against the agg template source statically, so it will not affect anything on your system outside of matplotlib.
qhull 2012.1 A library for computing Delaunay triangulations. ttconv truetype font utility
2.2.2 Building on Linux
It is easiest to use your system package manager to install the dependencies.
If you are on Debian/Ubuntu, you can get all the dependencies required to build matplotlib with: sudo apt-get build-dep python-matplotlib
If you are on Fedora/RedHat, you can get all the dependencies required to build matplotlib by first installing yum-builddep and then running:
su -c ""yum-builddep python-matplotlib""
This does not build matplotlib, but it does get the install the build dependencies, which will make building
from source easier.
       8 Chapter2. Installing

"
123,15.0,matplotlib_21-41_pdf.pdf ~ 15,"Matplotlib, Release 2.0.2
0 100 200 300 400 500
0
50
100
150
200
250
300
350
Note: However, remember that in the IPython notebook with the inline backend, you can’t make changes
to plots that have already been rendered. If you create imgplot here in one cell, you cannot call set_cmap()
on it in a later cell and expect the earlier plot to change. Make sure that you enter these commands together
in one cell. plt commands will not change plots from earlier cells.
There are many other colormap schemes available. See the list and images of the colormaps.
Color scale reference
It’s helpful to have an idea of what value a color represents. We can do that by adding color bars.
In [12]: imgplot = plt.imshow(lum_img)
In [13]: plt.colorbar()
28 Chapter 3. Tutorials",0.004753828048706,"Matplotlib, Release 2.0.2
0
100
200
300
400
500
0
50
100
150
200
250
300
350
Note: However, remember that in the IPython notebook with the inline backend, you can’t make changes
to plots that have already been rendered. If you create imgplot here in one cell, you cannot call set_cmap()
on it in a later cell and expect the earlier plot to change. Make sure that you enter these commands together
in one cell. plt commands will not change plots from earlier cells.
There are many other colormap schemes available. See the list and images of the colormaps.
Color scale reference
It’s helpful to have an idea of what value a color represents. We can do that by adding color bars.
In [12]: imgplot = plt.imshow(lum_img)
In [13]: plt.colorbar()
28
Chapter 3. Tutorials
",0.0012621879577636,"Matplotlib, Release 2.0.2
0 100 200 300 400 500
0
50
100
150
200
250
300
350
Note: However, remember that in the IPython notebook with the inline backend, you can’t make changes
to plots that have already been rendered. If you create imgplot here in one cell, you cannot call set_cmap()
on it in a later cell and expect the earlier plot to change. Make sure that you enter these commands together
in one cell. plt commands will not change plots from earlier cells.
There are many other colormap schemes available. See the list and images of the colormaps.
Color scale reference
It’s helpful to have an idea of what value a color represents. We can do that by adding color bars.
In [12]: imgplot = plt.imshow(lum_img)
In [13]: plt.colorbar()
28 Chapter 3. Tutorials",0.0046100616455078,"17>
2.2.3 Building on OSX
The build situation on OSX is complicated by the various places one can get the libpng and freetype re- quirements (darwinports, fink, /usr/X11R6) and the different architectures (e.g., x86, ppc, universal) and the different OSX version (e.g., 10.4 and 10.5). We recommend that you build the way we do for the OSX release: get the source from the tarball or the git repository and follow the instruction in README.osx.
2.2.4 Building on Windows
The Python shipped from https://www.python.org is compiled with Visual Studio 2008 for versions before 3.3, Visual Studio 2010 for 3.3 and 3.4, and Visual Studio 2015 for 3.5 and 3.6. Python extensions are recommended to be compiled with the same compiler.
Since there is no canonical Windows package manager, the methods for building freetype, zlib, and libpng from source code are documented as a build script at matplotlib-winbuild.
Matplotlib, Release 2.0.2
  2.2. Installingfromsource 9

"
124,16.0,matplotlib_21-41_pdf.pdf ~ 16,"Matplotlib, Release 2.0.2
0 100 200 300 400 500
0
50
100
150
200
250
300
350
0.0
0.1
0.2
0.3
0.4
0.5
0.6
0.7
0.8
This adds a colorbar to your existing ﬁgure. This won’t automatically change if you change you switch to a
diﬀerent colormap - you have to re-create your plot, and add in the colorbar again.
Examining a speciﬁc data range
Sometimes you want to enhance the contrast in your image, or expand the contrast in a particular region
while sacriﬁcing the detail in colors that don’t vary much, or don’t matter. A good tool to ﬁnd interesting
regions is the histogram. To create a histogram of our image data, we use the hist() function.
In [14]: plt.hist(lum_img.ravel(), bins=256, range=(0.0, 1.0), fc='k', ec='k')
3.1. Introductory 29",0.0058307647705078,"Matplotlib, Release 2.0.2
0
100
200
300
400
500
0
50
100
150
200
250
300
350
0.0
0.1
0.2
0.3
0.4
0.5
0.6
0.7
0.8
This adds a colorbar to your existing ﬁgure. This won’t automatically change if you change you switch to a
diﬀerent colormap - you have to re-create your plot, and add in the colorbar again.
Examining a speciﬁc data range
Sometimes you want to enhance the contrast in your image, or expand the contrast in a particular region
while sacriﬁcing the detail in colors that don’t vary much, or don’t matter. A good tool to ﬁnd interesting
regions is the histogram. To create a histogram of our image data, we use the hist() function.
In [14]: plt.hist(lum_img.ravel(), bins=256, range=(0.0, 1.0), fc='k', ec='k')
3.1. Introductory
29
",0.0010538101196289,"Matplotlib, Release 2.0.2
0 100 200 300 400 500
0
50
100
150
200
250
300
350
0.0
0.1
0.2
0.3
0.4
0.5
0.6
0.7
0.8
This adds a colorbar to your existing ﬁgure. This won’t automatically change if you change you switch to a
diﬀerent colormap - you have to re-create your plot, and add in the colorbar again.
Examining a speciﬁc data range
Sometimes you want to enhance the contrast in your image, or expand the contrast in a particular region
while sacriﬁcing the detail in colors that don’t vary much, or don’t matter. A good tool to ﬁnd interesting
regions is the histogram. To create a histogram of our image data, we use the hist() function.
In [14]: plt.hist(lum_img.ravel(), bins=256, range=(0.0, 1.0), fc='k', ec='k')
3.1. Introductory 29",0.005782127380371,"19>
Matplotlib, Release 2.0.2
  10 Chapter2. Installing

 matplotlib.pyplot is a collection of command style functions that make matplotlib work like MATLAB. Each pyplot function makes some change to a figure: e.g., creates a figure, creates a plotting area in a figure, plots some lines in a plotting area, decorates the plot with labels, etc. In matplotlib.pyplot various states are preserved across function calls, so that it keeps track of things like the current figure and plotting area, and the plotting functions are directed to the current axes (please note that “axes” here and in most places in the documentation refers to the axes part of a figure and not the strict mathematical term for more than one axis).
"
125,17.0,matplotlib_21-41_pdf.pdf ~ 17,"Matplotlib, Release 2.0.2
0.0 0.2 0.4 0.6 0.8 1.0
0
2000
4000
6000
8000
Most often, the “interesting” part of the image is around the peak, and you can get extra contrast by clipping
the regions above and/or below the peak. In our histogram, it looks like there’s not much useful information
in the high end (not many white things in the image). Let’s adjust the upper limit, so that we e ﬀectively
“zoom in on” part of the histogram. We do this by passing the clim argument to imshow. You could also do
this by calling the set_clim() method of the image plot object, but make sure that you do so in the same
cell as your plot command when working with the IPython Notebook - it will not change plots from earlier
cells.
In [15]: imgplot = plt.imshow(lum_img, clim=(0.0, 0.7))
30 Chapter 3. Tutorials",0.0150477886199951,"Matplotlib, Release 2.0.2
0.0
0.2
0.4
0.6
0.8
1.0
0
2000
4000
6000
8000
Most often, the “interesting” part of the image is around the peak, and you can get extra contrast by clipping
the regions above and/or below the peak. In our histogram, it looks like there’s not much useful information
in the high end (not many white things in the image). Let’s adjust the upper limit, so that we eﬀectively
“zoom in on” part of the histogram. We do this by passing the clim argument to imshow. You could also do
this by calling the set_clim() method of the image plot object, but make sure that you do so in the same
cell as your plot command when working with the IPython Notebook - it will not change plots from earlier
cells.
In [15]: imgplot = plt.imshow(lum_img, clim=(0.0, 0.7))
30
Chapter 3. Tutorials
",0.0015196800231933,"Matplotlib, Release 2.0.2
0.0 0.2 0.4 0.6 0.8 1.0
0
2000
4000
6000
8000
Most often, the “interesting” part of the image is around the peak, and you can get extra contrast by clipping
the regions above and/or below the peak. In our histogram, it looks like there’s not much useful information
in the high end (not many white things in the image). Let’s adjust the upper limit, so that we e ﬀectively
“zoom in on” part of the histogram. We do this by passing the clim argument to imshow. You could also do
this by calling the set_clim() method of the image plot object, but make sure that you do so in the same
cell as your plot command when working with the IPython Notebook - it will not change plots from earlier
cells.
In [15]: imgplot = plt.imshow(lum_img, clim=(0.0, 0.7))
30 Chapter 3. Tutorials",0.0152320861816406,"20>
CHAPTER THREE
TUTORIALS
 3.1 Introductory 3.1.1 Pyplot tutorial
    import matplotlib.pyplot as plt plt.plot([1,2,3,4]) plt.ylabel('some numbers') plt.show()
  11
"
126,18.0,matplotlib_21-41_pdf.pdf ~ 18,"Matplotlib, Release 2.0.2
0 200 400
0
100
200
300
Before
0.1 0.3 0.5 0.7
0 200 400
0
100
200
300
After
0.1 0.3 0.5 0.7
Array Interpolation schemes
Interpolation calculates what the color or value of a pixel “should” be, according to di ﬀerent mathematical
schemes. One common place that this happens is when you resize an image. The number of pixels change,
but you want the same information. Since pixels are discrete, there’s missing space. Interpolation is how
you ﬁll that space. This is why your images sometimes come out looking pixelated when you blow them
up. The eﬀect is more pronounced when the diﬀerence between the original image and the expanded image
is greater. Let’s take our image and shrink it. We’re eﬀectively discarding pixels, only keeping a select few.
Now when we plot it, that data gets blown up to the size on your screen. The old pixels aren’t there anymore,
and the computer has to draw in pixels to ﬁll that space.
We’ll use the Pillow library that we used to load the image also to resize the image.
In [16]: from PIL import Image
In [17]: img = Image.open('../_static/stinkbug.png')
In [18]: img.thumbnail((64, 64), Image.ANTIALIAS) # resizes image in-place
In [19]: imgplot = plt.imshow(img)
3.1. Introductory 31",0.0084249973297119,"Matplotlib, Release 2.0.2
0
200
400
0
100
200
300
Before
0.1
0.3
0.5
0.7
0
200
400
0
100
200
300
After
0.1
0.3
0.5
0.7
Array Interpolation schemes
Interpolation calculates what the color or value of a pixel “should” be, according to diﬀerent mathematical
schemes. One common place that this happens is when you resize an image. The number of pixels change,
but you want the same information. Since pixels are discrete, there’s missing space. Interpolation is how
you ﬁll that space. This is why your images sometimes come out looking pixelated when you blow them
up. The eﬀect is more pronounced when the diﬀerence between the original image and the expanded image
is greater. Let’s take our image and shrink it. We’re eﬀectively discarding pixels, only keeping a select few.
Now when we plot it, that data gets blown up to the size on your screen. The old pixels aren’t there anymore,
and the computer has to draw in pixels to ﬁll that space.
We’ll use the Pillow library that we used to load the image also to resize the image.
In [16]: from PIL import Image
In [17]: img = Image.open('../_static/stinkbug.png')
In [18]: img.thumbnail((64, 64), Image.ANTIALIAS) # resizes image in-place
In [19]: imgplot = plt.imshow(img)
3.1. Introductory
31
",0.0014319419860839,"Matplotlib, Release 2.0.2
0 200 400
0
100
200
300
Before
0.1 0.3 0.5 0.7
0 200 400
0
100
200
300
After
0.1 0.3 0.5 0.7
Array Interpolation schemes
Interpolation calculates what the color or value of a pixel “should” be, according to di ﬀerent mathematical
schemes. One common place that this happens is when you resize an image. The number of pixels change,
but you want the same information. Since pixels are discrete, there’s missing space. Interpolation is how
you ﬁll that space. This is why your images sometimes come out looking pixelated when you blow them
up. The eﬀect is more pronounced when the diﬀerence between the original image and the expanded image
is greater. Let’s take our image and shrink it. We’re eﬀectively discarding pixels, only keeping a select few.
Now when we plot it, that data gets blown up to the size on your screen. The old pixels aren’t there anymore,
and the computer has to draw in pixels to ﬁll that space.
We’ll use the Pillow library that we used to load the image also to resize the image.
In [16]: from PIL import Image
In [17]: img = Image.open('../_static/stinkbug.png')
In [18]: img.thumbnail((64, 64), Image.ANTIALIAS) # resizes image in-place
In [19]: imgplot = plt.imshow(img)
3.1. Introductory 31",0.0080020427703857,"21>
Matplotlib, Release 2.0.2
       4.0 3.5 3.0 2.5 2.0 1.5 1.0
0.0 0.5
1.0 1.5
2.0 2.5 3.0
some numbers
You may be wondering why the x-axis ranges from 0-3 and the y-axis from 1-4. If you provide a single list or array to the plot() command, matplotlib assumes it is a sequence of y values, and automatically generates the x values for you. Since python ranges start with 0, the default x vector has the same length as y but starts with 0. Hence the x data are [0,1,2,3].
plot() is a versatile command, and will take an arbitrary number of arguments. For example, to plot x versus y, you can issue the command:
plt.plot([1, 2, 3, 4], [1, 4, 9, 16])
For every x, y pair of arguments, there is an optional third argument which is the format string that indicates the color and line type of the plot. The letters and symbols of the format string are from MATLAB, and you concatenate a color string with a line style string. The default format string is ‘b-‘, which is a solid blue line. For example, to plot the above with red circles, you would issue
       import matplotlib.pyplot as plt plt.plot([1,2,3,4], [1,4,9,16], 'ro') plt.axis([0, 6, 0, 20])
plt.show()
  12 Chapter3. Tutorials"
127,19.0,matplotlib_21-41_pdf.pdf ~ 19,"Matplotlib, Release 2.0.2
0 10 20 30 40 50 60
0
10
20
30
40
Here we have the default interpolation, bilinear, since we did not giveimshow() any interpolation argument.
Let’s try some others:
In [20]: imgplot = plt.imshow(img, interpolation=""nearest"")
32 Chapter 3. Tutorials",0.0040161609649658,"Matplotlib, Release 2.0.2
0
10
20
30
40
50
60
0
10
20
30
40
Here we have the default interpolation, bilinear, since we did not give imshow() any interpolation argument.
Let’s try some others:
In [20]: imgplot = plt.imshow(img, interpolation=""nearest"")
32
Chapter 3. Tutorials
",0.0004811286926269,"Matplotlib, Release 2.0.2
0 10 20 30 40 50 60
0
10
20
30
40
Here we have the default interpolation, bilinear, since we did not giveimshow() any interpolation argument.
Let’s try some others:
In [20]: imgplot = plt.imshow(img, interpolation=""nearest"")
32 Chapter 3. Tutorials",0.0039761066436767,
128,,,,,,,,,"1>
🏆 Checkmate Through Time: The Global Conquest of Chess 

 
From Chaturanga to Chess: The Birth of a Legend ........................................................... 2 
The European Evolution: Pawns Get a Boost ................................................................... 2 
Coffee House Chess: The Game Goes Public .............................................................. 2 
The Birth of Competitive Chess ..................................................................................... 3 
Chess in the Modern Era: From Grandmasters to Computers .......................................... 3 
 
  

​ 

​ 

​ 

​​ 

 

 
"
129,,,,,,,,,"2>
Chess, the game of kings and queens, has captivated minds for centuries. From its 
humble beginnings in ancient India to its current status as a global phenomenon, 
chess has evolved into a complex and fascinating pursuit. Let's embark on a journey 
through time to explore the development of this royal game. 

From Chaturanga to Chess: The Birth of a Legend 
Our story begins in India, around 600 CE, with a game called chaturanga. This early ancestor of 
chess represented the four divisions of the Indian military: infantry, cavalry, elephants, and 
chariots. As trade routes expanded, so did the reach of this intriguing game. Chaturanga spread 
to Persia, where it underwent its first transformation. The Persians modified the pieces and 
rules, developing it into a game called Shatranj. From Persia, the game continued its journey, 
carried by traders and conquerors alike. 

The European Evolution: Pawns Get a Boost 
By the 10th century, chess had made its way to Europe through North Africa and the expanding 
Arabian empire. However, it wasn't until around 1200 CE that the game underwent dramatic 
changes, shaping it into the chess we know today. In Italy and Spain, innovative players 
introduced exciting new rules: 

    Pawns gained the ability to move two squares on their first move 
    Bishops became long-range pieces, dominating diagonals 
    Queens transformed into the most powerful piece on the board 
These changes injected new life into the game, setting the stage for centuries of strategic 
exploration. 

Coffee House Chess: The Game Goes Public 
During the 18th century, the chess world shifted its focus to Western Europe. Cities like London 
and Paris became hubs of chess activity, with matches played in bustling coffee houses. This 
period saw chess transition from a pastime of the nobility to a game enjoyed by a broader 
audience. 

"
130,,,,,,,,,"3>
The Birth of Competitive Chess 
The 19th century marked a turning point for chess as it evolved into a competitive sport: 

    1851: The first chess tournament was held in London, won by German player Adolf Anderssen 
    1886: The first official World Chess Championship took place 
As chess gained popularity, the need for standardization grew. In 1924, the World Chess 
Federation (FIDE) was founded in Paris, taking responsibility for organizing international 
competitions and awarding titles. 

Chess in the Modern Era: From Grandmasters to Computers 
The 20th century saw chess reach new heights of complexity and popularity: 

    1914: Czar Nicholas II of Russia immortalized the term ""Grandmaster"" 
    1950s-1980s: Soviet players dominated the chess world 
    1997: IBM's Deep Blue defeated world champion Garry Kasparov, marking a milestone in 
    computer chess 
Today, chess continues to evolve. Online platforms have made the game more accessible than 
ever, allowing players from around the world to compete and learn together. The royal game 
that began in India 1,500 years ago has truly conquered the world, with FIDE reporting 172 
member countries. Whether you're a beginner or a seasoned player, the rich history of chess 
adds depth to every move you make on the board. So next time you sit down for a game, 
remember you're not just playing chess – you're participating in a centuries-old tradition of 
strategy, skill, and intellectual combat. 
 "
131,,,,,,,,,
132,,,,,,,,,"1>
Sleep Deprivation: Your Body's Silent AlarmAlarm clocks with mouths 
 What Happens When You Don't Sleep Enough? ......................................................... 2 
Your Brain Goes Fuzzy .......................................................................................... 2 
Your Emotions Go Crazy ....................................................................................... 2 
Your Body Starts Complaining ............................................................................... 3 
Real-World Impact of Sleep Deprivation .................................................................... 3 
At Work or School  ................................................................................................ 3 
In Your Personal Life ............................................................................................. 3 
On the Road......................................................................................................... 4 
Your Appearance ................................................................................................. 4 
Quick Sleep Rescue Tips .......................................................................................... 4 
Bottom Line: Sleep is Not a Luxury ............................................................................ 5 
​ 

​ 

​ 

​ 

​ 

​ 

​ 

​ 

​​ 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 
"
133,,,,,,,,,"2>
Imagine your body as a smartphone. Just like a phone needs charging, your body needs sleep 
to recharge and function properly. When you don't get enough sleep, everything starts to 
malfunction. Let's explore what happens when we don't get enough sleep and how it affects 
our daily lives. 

What Happens When You Don't Sleep Enough? 
Your Brain Goes Fuzzy 
When you don't get enough sleep, your brain doesn't work as well as it should. It's like 
trying to use a computer with a dying battery. Here's what happens: 

    Thinking becomes difficult: Simple tasks feel much harder. 
    Memory gets weak: You might forget important things. 
    Concentration drops dramatically: Focusing on anything becomes a challenge. 
    You feel like you're walking through fog: Everything seems unclear and confusing. 
For example, if you're a student trying to study after a sleepless night, you might read 
the same paragraph over and over without understanding it. Or if you're at work, you might 
make silly mistakes that you normally wouldn’t. 

Your Emotions Go Crazy 
Lack of sleep doesn't just affect your thinking - it also messes with your feelings. Your 
emotions can become like a roller coaster: 

    You become super irritable: Little things that normally wouldn't bother you suddenly 
    feel very annoying. 
    Small problems feel like huge mountains: A minor setback might feel like the end of 
    the world. 
    Stress feels overwhelming: Your ability to handle pressure decreases. 
    You might feel sad or anxious more often: Sleep deprivation can worsen mood disorders. 
"
134,,,,,,,,,"3>
Imagine snapping at your friend because they're chewing too loudly, or bursting into tears 
because you can't find your keys. These are examples of how lack of sleep can affect your 
emotions. 

Your Body Starts Complaining 
Your body needs sleep to repair and maintain itself. When you don't get enough, your body 
starts to show signs of wear and tear: 

    You feel tired all the time: Even after resting, you still feel exhausted. 
    Your immune system weakens: You might catch colds more easily. 
    Weight gain becomes easier: Lack of sleep messes with hormones that control 
    hunger. 
    Risk of getting sick increases: Over time, sleep deprivation can lead to serious health 
    roblems. 
It's like trying to drive a car that hasn't had an oil change in years - eventually, things 
start to break down. 

Real-World Impact of Sleep Deprivation 
Sleep deprivation is like a sneaky thief that steals your health, happiness, and productivity. 
Here's how it can affect your daily life: 

At Work or School 
    Reduced productivity: You might take longer to finish tasks or make more mistakes. 
    Difficulty learning: New information doesn't stick as well when you're tired. 
    Poor decision-making: Lack of sleep can lead to risky or unwise choices. 
For instance, you might miss an important deadline at work because you couldn't focus, or 
fail a test at school because you couldn't remember what you studied. 

In Your Personal Life 
    Relationship problems: Being cranky all the time can strain your friendships and 
    family ties. 
    Less enjoyment of activities: Your favorite hobbies might not seem as fun when 
    you're exhausted. 
    Social withdrawal: You might skip social events because you're too tired. 
"
135,,,,,,,,,"4>
Imagine missing your best friend's birthday party because you're too exhausted, or getting 
into an argument with your partner over something trivial because you're irritable from lack 
of sleep. 

On the Road 
    Increased chance of accidents: Drowsy driving can be as dangerous as drunk driving. 
    Slower reaction times: You might not be able to brake quickly enough to avoid a 
    collision. 
It's scary to think about, but many car accidents happen because drivers are too tired to 
focus on the road. 

Your Appearance 
    Premature aging: Lack of sleep can make you look older than you are. 
    Dark circles under eyes: These are a telltale sign of sleep deprivation. 
    Dull skin: Your skin needs sleep to repair itself and look healthy. 
You might notice that after a few nights of poor sleep, you look in the mirror and see a tired, 
older version of yourself staring back. 

Quick Sleep Rescue Tips 
The good news is that you can improve your sleep with some simple changes. Here are some easy tips to help you get better rest: 

    Stick to a sleep schedule: Go to bed and wake up at the same time every day, even 
    on weekends. 
    Create a calm bedroom environment: Keep your room dark, quiet, and cool. 
    Avoid screens before bedtime: The blue light from phones and computers can 
    disrupt your sleep. 
    Say no to caffeine in the evening: Coffee, tea, and soda can keep you awake if 
    consumed too late. 
    Exercise regularly: Physical activity can help you sleep better, but not too close to 
    bedtime. 
    Relax before bed: Try reading a book, listening to soft music, or doing some gentle 
    stretches. 
    Don't lie in bed awake: If you can't sleep after 20 minutes, get up and do something 
    calming until you feel sleepy. 
Remember, these changes might take some time to show effect. Be patient and consistent, 
and you should start seeing improvements in your sleep quality. 
"
136,,,,,,,,,"5>
Bottom Line: Sleep is Not a Luxury 
In our busy world, it's easy to think of sleep as something we can cut back on to make more 
time for work, socializing, or entertainment. But the truth is, sleep is not a luxury - it's a 
necessity for our health and well-being. Think of sleep as an investment in yourself. When 
you get enough good quality sleep: 

    Your brain works better 
    Your emotions are more stable 
    Your body stays healthier 
    You look and feel younger 
    You're more productive and creative 
    You enjoy life more 
So, the next time you're tempted to stay up late binge-watching your favorite show 
or scrolling through social media, remember: your body needs that sleep. Treat it right, and it 
will thank you with better health, clearer thinking, and a happier mood. Sweet dreams! 
 "
