Unnamed: 0,pageNumber_pypdf,pdfId_pypdf,pageContent_pypdf,extractionTimeSeconds_pypdf,pageContent_pymupdf,extractionTimeSeconds_pymupdf,pageContent_pdfminer,extractionTimeSeconds_pdfminer,pdfId,text,pypdf_bleu,pypdf_jaccard,pypdf_levenshtein,pymupdf_bleu,pymupdf_jaccard,pymupdf_levenshtein,pdfminer_bleu,pdfminer_jaccard,pdfminer_levenshtein
1,1.0,matplotlib_41-61_pdf.pdf ~ 1,"Matplotlib, Release 2.0.2
0 10 20 30 40 50 60
0
10
20
30
40
Bicubic interpolation is often used when blowing up photos - people tend to prefer blurry over pixelated.
3.1.3 Customizing Location of Subplot Using GridSpec
GridSpec speciﬁes the geometry of the grid that a subplot will be placed. The number of
rows and number of columns of the grid need to be set. Optionally, the subplot layout
parameters (e.g., left, right, etc.) can be tuned.
SubplotSpec speciﬁes the location of the subplot in the given GridSpec.
subplot2grid() a helper function that is similar to subplot() but uses 0-based indexing
and let subplot to occupy multiple cells.
Basic Example of using subplot2grid
To use subplot2grid(), you provide geometry of the grid and the location of the subplot in the grid. For
a simple single-cell subplot:
ax = plt.subplot2grid((2, 2), (0, 0))
is identical to
34 Chapter 3. Tutorials",0.0088069438934326,"Matplotlib, Release 2.0.2
0
10
20
30
40
50
60
0
10
20
30
40
Bicubic interpolation is often used when blowing up photos - people tend to prefer blurry over pixelated.
3.1.3 Customizing Location of Subplot Using GridSpec
GridSpec speciﬁes the geometry of the grid that a subplot will be placed. The number of
rows and number of columns of the grid need to be set. Optionally, the subplot layout
parameters (e.g., left, right, etc.) can be tuned.
SubplotSpec speciﬁes the location of the subplot in the given GridSpec.
subplot2grid() a helper function that is similar to subplot() but uses 0-based indexing
and let subplot to occupy multiple cells.
Basic Example of using subplot2grid
To use subplot2grid(), you provide geometry of the grid and the location of the subplot in the grid. For
a simple single-cell subplot:
ax = plt.subplot2grid((2, 2), (0, 0))
is identical to
34
Chapter 3. Tutorials
",0.0030930042266845,"Matplotlib, Release 2.0.2
0 10 20 30 40 50 60
0
10
20
30
40
Bicubic interpolation is often used when blowing up photos - people tend to prefer blurry over pixelated.
3.1.3 Customizing Location of Subplot Using GridSpec
GridSpec speciﬁes the geometry of the grid that a subplot will be placed. The number of
rows and number of columns of the grid need to be set. Optionally, the subplot layout
parameters (e.g., left, right, etc.) can be tuned.
SubplotSpec speciﬁes the location of the subplot in the given GridSpec.
subplot2grid() a helper function that is similar to subplot() but uses 0-based indexing
and let subplot to occupy multiple cells.
Basic Example of using subplot2grid
To use subplot2grid(), you provide geometry of the grid and the location of the subplot in the grid. For
a simple single-cell subplot:
ax = plt.subplot2grid((2, 2), (0, 0))
is identical to
34 Chapter 3. Tutorials",0.0072169303894042,matplotlib_41-61_pdf.pdf ~ 1,"
Matplotlib, Release 2.0.2
  0
10
20
30
40
     0 10 20 30 40 50 60
  In [21]: imgplot = plt.imshow(img, interpolation=""bicubic"")
  3.1. Introductory 33

",0.08013008157205671,0.0990990990990991,777,0.08013008157205671,0.0990990990990991,779,0.08013008157205671,0.0990990990990991,777
2,2.0,matplotlib_41-61_pdf.pdf ~ 2,"Matplotlib, Release 2.0.2
ax = plt.subplot(2, 2, 1)
Note that, unlike Matplotlib’s subplot, the index starts from 0 in GridSpec.
To create a subplot that spans multiple cells,
ax2 = plt.subplot2grid((3, 3), (1, 0), colspan=2)
ax3 = plt.subplot2grid((3, 3), (1, 2), rowspan=2)
For example, the following commands
ax1 = plt.subplot2grid((3, 3), (0, 0), colspan=3)
ax2 = plt.subplot2grid((3, 3), (1, 0), colspan=2)
ax3 = plt.subplot2grid((3, 3), (1, 2), rowspan=2)
ax4 = plt.subplot2grid((3, 3), (2, 0))
ax5 = plt.subplot2grid((3, 3), (2, 1))
creates
ax1
ax2
ax3
ax4 ax5
subplot2grid
GridSpec and SubplotSpec
You can create GridSpec explicitly and use them to create a subplot.
For example,
3.1. Introductory 35",0.0065438747406005,"Matplotlib, Release 2.0.2
ax = plt.subplot(2, 2, 1)
Note that, unlike Matplotlib’s subplot, the index starts from 0 in GridSpec.
To create a subplot that spans multiple cells,
ax2 = plt.subplot2grid((3, 3), (1, 0), colspan=2)
ax3 = plt.subplot2grid((3, 3), (1, 2), rowspan=2)
For example, the following commands
ax1 = plt.subplot2grid((3, 3), (0, 0), colspan=3)
ax2 = plt.subplot2grid((3, 3), (1, 0), colspan=2)
ax3 = plt.subplot2grid((3, 3), (1, 2), rowspan=2)
ax4 = plt.subplot2grid((3, 3), (2, 0))
ax5 = plt.subplot2grid((3, 3), (2, 1))
creates
ax1
ax2
ax3
ax4
ax5
subplot2grid
GridSpec and SubplotSpec
You can create GridSpec explicitly and use them to create a subplot.
For example,
3.1. Introductory
35
",0.0016489028930664,"Matplotlib, Release 2.0.2
ax = plt.subplot(2, 2, 1)
Note that, unlike Matplotlib’s subplot, the index starts from 0 in GridSpec.
To create a subplot that spans multiple cells,
ax2 = plt.subplot2grid((3, 3), (1, 0), colspan=2)
ax3 = plt.subplot2grid((3, 3), (1, 2), rowspan=2)
For example, the following commands
ax1 = plt.subplot2grid((3, 3), (0, 0), colspan=3)
ax2 = plt.subplot2grid((3, 3), (1, 0), colspan=2)
ax3 = plt.subplot2grid((3, 3), (1, 2), rowspan=2)
ax4 = plt.subplot2grid((3, 3), (2, 0))
ax5 = plt.subplot2grid((3, 3), (2, 1))
creates
ax1
ax2
ax3
ax4 ax5
subplot2grid
GridSpec and SubplotSpec
You can create GridSpec explicitly and use them to create a subplot.
For example,
3.1. Introductory 35",0.0063631534576416,matplotlib_41-61_pdf.pdf ~ 2,"
Matplotlib, Release 2.0.2
  0
10
20
30
40
     0 10 20 30 40 50 60
Bicubic interpolation is often used when blowing up photos - people tend to prefer blurry over pixelated.
3.1.3 Customizing Location of Subplot Using GridSpec
GridSpec specifies the geometry of the grid that a subplot will be placed. The number of rows and number of columns of the grid need to be set. Optionally, the subplot layout parameters (e.g., left, right, etc.) can be tuned.
SubplotSpec specifies the location of the subplot in the given GridSpec.
subplot2grid() a helper function that is similar to subplot() but uses 0-based indexing
and let subplot to occupy multiple cells.
Basic Example of using subplot2grid
To use subplot2grid(), you provide geometry of the grid and the location of the subplot in the grid. For a simple single-cell subplot:
ax = plt.subplot2grid((2, 2), (0, 0)) is identical to
    34 Chapter3. Tutorials
",0.011704607879945572,0.1773049645390071,671,0.011704607879945572,0.1773049645390071,670,0.011704607879945572,0.1773049645390071,671
3,3.0,matplotlib_41-61_pdf.pdf ~ 3,"Matplotlib, Release 2.0.2
ax = plt.subplot2grid((2, 2), (0, 0))
is equal to
import matplotlib.gridspec as gridspec
gs = gridspec.GridSpec(2, 2)
ax = plt.subplot(gs[0, 0])
A GridSpec instance provides array-like (2d or 1d) indexing that returns the SubplotSpec instance. For a
SubplotSpec that spans multiple cells, use slice.
ax2 = plt.subplot(gs[1, :-1])
ax3 = plt.subplot(gs[1:, -1])
The above example becomes
gs = gridspec.GridSpec(3, 3)
ax1 = plt.subplot(gs[0, :])
ax2 = plt.subplot(gs[1, :-1])
ax3 = plt.subplot(gs[1:, -1])
ax4 = plt.subplot(gs[-1, 0])
ax5 = plt.subplot(gs[-1, -2])
ax1
ax2
ax3
ax4 ax5
GridSpec
36 Chapter 3. Tutorials",0.0075929164886474,"Matplotlib, Release 2.0.2
ax = plt.subplot2grid((2, 2), (0, 0))
is equal to
import matplotlib.gridspec as gridspec
gs = gridspec.GridSpec(2, 2)
ax = plt.subplot(gs[0, 0])
A GridSpec instance provides array-like (2d or 1d) indexing that returns the SubplotSpec instance. For a
SubplotSpec that spans multiple cells, use slice.
ax2 = plt.subplot(gs[1, :-1])
ax3 = plt.subplot(gs[1:, -1])
The above example becomes
gs = gridspec.GridSpec(3, 3)
ax1 = plt.subplot(gs[0, :])
ax2 = plt.subplot(gs[1, :-1])
ax3 = plt.subplot(gs[1:, -1])
ax4 = plt.subplot(gs[-1, 0])
ax5 = plt.subplot(gs[-1, -2])
ax1
ax2
ax3
ax4
ax5
GridSpec
36
Chapter 3. Tutorials
",0.0016441345214843,"Matplotlib, Release 2.0.2
ax = plt.subplot2grid((2, 2), (0, 0))
is equal to
import matplotlib.gridspec as gridspec
gs = gridspec.GridSpec(2, 2)
ax = plt.subplot(gs[0, 0])
A GridSpec instance provides array-like (2d or 1d) indexing that returns the SubplotSpec instance. For a
SubplotSpec that spans multiple cells, use slice.
ax2 = plt.subplot(gs[1, :-1])
ax3 = plt.subplot(gs[1:, -1])
The above example becomes
gs = gridspec.GridSpec(3, 3)
ax1 = plt.subplot(gs[0, :])
ax2 = plt.subplot(gs[1, :-1])
ax3 = plt.subplot(gs[1:, -1])
ax4 = plt.subplot(gs[-1, 0])
ax5 = plt.subplot(gs[-1, -2])
ax1
ax2
ax3
ax4 ax5
GridSpec
36 Chapter 3. Tutorials",0.0097200870513916,matplotlib_41-61_pdf.pdf ~ 3,"
ax = plt.subplot(2, 2, 1)
Note that, unlike Matplotlib’s subplot, the index starts from 0 in GridSpec.
To create a subplot that spans multiple cells,
For example, the following commands
creates
Matplotlib, Release 2.0.2
        ax2 = plt.subplot2grid((3, 3), (1, 0), colspan=2)
ax3 = plt.subplot2grid((3, 3), (1, 2), rowspan=2)
     ax1 = plt.subplot2grid((3, 3), (0, 0), colspan=3)
ax2 = plt.subplot2grid((3, 3), (1, 0), colspan=2)
ax3 = plt.subplot2grid((3, 3), (1, 2), rowspan=2)
ax4 = plt.subplot2grid((3, 3), (2, 0))
ax5 = plt.subplot2grid((3, 3), (2, 1))
  subplot2grid
   ax1
   ax2
ax3
  ax4
ax5
GridSpec and SubplotSpec
You can create GridSpec explicitly and use them to create a subplot. For example,
 3.1. Introductory 35
",0.11132878067830311,0.23076923076923078,539,0.11132878067830311,0.23076923076923078,538,0.11132878067830311,0.23076923076923078,539
4,4.0,matplotlib_41-61_pdf.pdf ~ 4,"Matplotlib, Release 2.0.2
Adjust GridSpec layout
When a GridSpec is explicitly used, you can adjust the layout parameters of subplots that are created from
the GridSpec.
gs1 = gridspec.GridSpec(3, 3)
gs1.update(left=0.05, right=0.48, wspace=0.05)
This is similar to subplots_adjust(), but it only a ﬀects the subplots that are created from the given
GridSpec.
The code below
gs1 = gridspec.GridSpec(3, 3)
gs1.update(left=0.05, right=0.48, wspace=0.05)
ax1 = plt.subplot(gs1[:-1, :])
ax2 = plt.subplot(gs1[-1, :-1])
ax3 = plt.subplot(gs1[-1, -1])
gs2 = gridspec.GridSpec(3, 3)
gs2.update(left=0.55, right=0.98, hspace=0.05)
ax4 = plt.subplot(gs2[:, :-1])
ax5 = plt.subplot(gs2[:-1, -1])
ax6 = plt.subplot(gs2[-1, -1])
creates
ax1
ax2 ax3
ax4
ax5
ax6
GridSpec w/ different subplotpars
3.1. Introductory 37",0.0068612098693847,"Matplotlib, Release 2.0.2
Adjust GridSpec layout
When a GridSpec is explicitly used, you can adjust the layout parameters of subplots that are created from
the GridSpec.
gs1 = gridspec.GridSpec(3, 3)
gs1.update(left=0.05, right=0.48, wspace=0.05)
This is similar to subplots_adjust(), but it only aﬀects the subplots that are created from the given
GridSpec.
The code below
gs1 = gridspec.GridSpec(3, 3)
gs1.update(left=0.05, right=0.48, wspace=0.05)
ax1 = plt.subplot(gs1[:-1, :])
ax2 = plt.subplot(gs1[-1, :-1])
ax3 = plt.subplot(gs1[-1, -1])
gs2 = gridspec.GridSpec(3, 3)
gs2.update(left=0.55, right=0.98, hspace=0.05)
ax4 = plt.subplot(gs2[:, :-1])
ax5 = plt.subplot(gs2[:-1, -1])
ax6 = plt.subplot(gs2[-1, -1])
creates
ax1
ax2
ax3
ax4
ax5
ax6
GridSpec w/ different subplotpars
3.1. Introductory
37
",0.0025238990783691,"Matplotlib, Release 2.0.2
Adjust GridSpec layout
When a GridSpec is explicitly used, you can adjust the layout parameters of subplots that are created from
the GridSpec.
gs1 = gridspec.GridSpec(3, 3)
gs1.update(left=0.05, right=0.48, wspace=0.05)
This is similar to subplots_adjust(), but it only a ﬀects the subplots that are created from the given
GridSpec.
The code below
gs1 = gridspec.GridSpec(3, 3)
gs1.update(left=0.05, right=0.48, wspace=0.05)
ax1 = plt.subplot(gs1[:-1, :])
ax2 = plt.subplot(gs1[-1, :-1])
ax3 = plt.subplot(gs1[-1, -1])
gs2 = gridspec.GridSpec(3, 3)
gs2.update(left=0.55, right=0.98, hspace=0.05)
ax4 = plt.subplot(gs2[:, :-1])
ax5 = plt.subplot(gs2[:-1, -1])
ax6 = plt.subplot(gs2[-1, -1])
creates
ax1
ax2 ax3
ax4
ax5
ax6
GridSpec w/ different subplotpars
3.1. Introductory 37",0.0067741870880126,matplotlib_41-61_pdf.pdf ~ 4,"
Matplotlib, Release 2.0.2
   ax = plt.subplot2grid((2, 2), (0, 0)) is equal to
A GridSpec instance provides array-like (2d or 1d) indexing that returns the SubplotSpec instance. For a SubplotSpec that spans multiple cells, use slice.
The above example becomes
     import matplotlib.gridspec as gridspec gs = gridspec.GridSpec(2, 2)
ax = plt.subplot(gs[0, 0])
     ax2 = plt.subplot(gs[1, :-1])
ax3 = plt.subplot(gs[1:, -1])
     gs = gridspec.GridSpec(3, 3)
ax1 = plt.subplot(gs[0, :])
ax2 = plt.subplot(gs[1, :-1])
ax3 = plt.subplot(gs[1:, -1])
ax4 = plt.subplot(gs[-1, 0])
ax5 = plt.subplot(gs[-1, -2])
  GridSpec
   ax1
   ax2
ax3
  ax4
ax5
 36 Chapter3. Tutorials

",0.08959270570503101,0.1926605504587156,474,0.09045014986145108,0.1926605504587156,472,0.08959270570503101,0.1926605504587156,474
5,5.0,matplotlib_41-61_pdf.pdf ~ 5,"Matplotlib, Release 2.0.2
GridSpec using SubplotSpec
You can create GridSpec from the SubplotSpec, in which case its layout parameters are set to that of the
location of the given SubplotSpec.
gs0 = gridspec.GridSpec(1, 2)
gs00 = gridspec.GridSpecFromSubplotSpec(3, 3, subplot_spec=gs0[0])
gs01 = gridspec.GridSpecFromSubplotSpec(3, 3, subplot_spec=gs0[1])
ax1
ax2 ax3
ax4
ax5
ax6
GirdSpec Inside GridSpec
A Complex Nested GridSpec using SubplotSpec
Here’s a more sophisticated example of nested GridSpec where we put a box around each cell of the outer
4x4 grid, by hiding appropriate spines in each of the inner 3x3 grids.
38 Chapter 3. Tutorials",0.0049920082092285,"Matplotlib, Release 2.0.2
GridSpec using SubplotSpec
You can create GridSpec from the SubplotSpec, in which case its layout parameters are set to that of the
location of the given SubplotSpec.
gs0 = gridspec.GridSpec(1, 2)
gs00 = gridspec.GridSpecFromSubplotSpec(3, 3, subplot_spec=gs0[0])
gs01 = gridspec.GridSpecFromSubplotSpec(3, 3, subplot_spec=gs0[1])
ax1
ax2
ax3
ax4
ax5
ax6
GirdSpec Inside GridSpec
A Complex Nested GridSpec using SubplotSpec
Here’s a more sophisticated example of nested GridSpec where we put a box around each cell of the outer
4x4 grid, by hiding appropriate spines in each of the inner 3x3 grids.
38
Chapter 3. Tutorials
",0.0016992092132568,"Matplotlib, Release 2.0.2
GridSpec using SubplotSpec
You can create GridSpec from the SubplotSpec, in which case its layout parameters are set to that of the
location of the given SubplotSpec.
gs0 = gridspec.GridSpec(1, 2)
gs00 = gridspec.GridSpecFromSubplotSpec(3, 3, subplot_spec=gs0[0])
gs01 = gridspec.GridSpecFromSubplotSpec(3, 3, subplot_spec=gs0[1])
ax1
ax2 ax3
ax4
ax5
ax6
GirdSpec Inside GridSpec
A Complex Nested GridSpec using SubplotSpec
Here’s a more sophisticated example of nested GridSpec where we put a box around each cell of the outer
4x4 grid, by hiding appropriate spines in each of the inner 3x3 grids.
38 Chapter 3. Tutorials",0.0049600601196289,matplotlib_41-61_pdf.pdf ~ 5,"
Matplotlib, Release 2.0.2
 Adjust GridSpec layout
When a GridSpec is explicitly used, you can adjust the layout parameters of subplots that are created from the GridSpec.
This is similar to subplots_adjust(), but it only affects the subplots that are created from the given GridSpec.
The code below
    gs1 = gridspec.GridSpec(3, 3)
gs1.update(left=0.05, right=0.48, wspace=0.05)
     gs1 = gridspec.GridSpec(3, 3)
gs1.update(left=0.05, right=0.48, wspace=0.05)
ax1 = plt.subplot(gs1[:-1, :])
ax2 = plt.subplot(gs1[-1, :-1])
ax3 = plt.subplot(gs1[-1, -1])
gs2 = gridspec.GridSpec(3, 3)
gs2.update(left=0.55, right=0.98, hspace=0.05)
ax4 = plt.subplot(gs2[:, :-1])
ax5 = plt.subplot(gs2[:-1, -1])
ax6 = plt.subplot(gs2[-1, -1])
 creates
 GridSpec w/ different subplotpars
   ax1
    ax4
    ax5
  ax6
  ax2
   ax3
 3.1. Introductory 37

",0.024863496755309425,0.18487394957983194,596,0.024863496755309425,0.18487394957983194,595,0.024863496755309425,0.18487394957983194,596
6,6.0,matplotlib_41-61_pdf.pdf ~ 6,"Matplotlib, Release 2.0.2
GridSpec with Varying Cell Sizes
By default, GridSpec creates cells of equal sizes. You can adjust relative heights and widths of rows and
columns. Note that absolute values are meaningless, only their relative ratios matter.
gs = gridspec.GridSpec(2, 2,
width_ratios=[1, 2],
height_ratios=[4, 1]
)
ax1 = plt.subplot(gs[0])
ax2 = plt.subplot(gs[1])
3.1. Introductory 39",0.0874288082122802,"Matplotlib, Release 2.0.2
GridSpec with Varying Cell Sizes
By default, GridSpec creates cells of equal sizes. You can adjust relative heights and widths of rows and
columns. Note that absolute values are meaningless, only their relative ratios matter.
gs = gridspec.GridSpec(2, 2,
width_ratios=[1, 2],
height_ratios=[4, 1]
)
ax1 = plt.subplot(gs[0])
ax2 = plt.subplot(gs[1])
3.1. Introductory
39
",0.0056879520416259,"Matplotlib, Release 2.0.2
GridSpec with Varying Cell Sizes
By default, GridSpec creates cells of equal sizes. You can adjust relative heights and widths of rows and
columns. Note that absolute values are meaningless, only their relative ratios matter.
gs = gridspec.GridSpec(2, 2,
width_ratios=[1, 2],
height_ratios=[4, 1]
)
ax1 = plt.subplot(gs[0])
ax2 = plt.subplot(gs[1])
3.1. Introductory 39",0.089202880859375,matplotlib_41-61_pdf.pdf ~ 6,"
Matplotlib, Release 2.0.2
 GridSpec using SubplotSpec
You can create GridSpec from the SubplotSpec, in which case its layout parameters are set to that of the location of the given SubplotSpec.
    gs0 = gridspec.GridSpec(1, 2)
gs00 = gridspec.GridSpecFromSubplotSpec(3, 3, subplot_spec=gs0[0])
gs01 = gridspec.GridSpecFromSubplotSpec(3, 3, subplot_spec=gs0[1])
  GirdSpec Inside GridSpec
   ax1
    ax4
  ax5
   ax2
ax3
ax6
A Complex Nested GridSpec using SubplotSpec
Here’s a more sophisticated example of nested GridSpec where we put a box around each cell of the outer 4x4 grid, by hiding appropriate spines in each of the inner 3x3 grids.
 38 Chapter3. Tutorials

",0.03131825665977712,0.10810810810810811,505,0.03131825665977712,0.10810810810810811,504,0.03131825665977712,0.10810810810810811,505
7,7.0,matplotlib_41-61_pdf.pdf ~ 7,"Matplotlib, Release 2.0.2
ax3 = plt.subplot(gs[2])
ax4 = plt.subplot(gs[3])
ax1 ax2
ax3 ax4
3.1.4 Tight Layout guide
tight_layout automatically adjusts subplot params so that the subplot(s) ﬁts in to the ﬁgure area. This is an
experimental feature and may not work for some cases. It only checks the extents of ticklabels, axis labels,
and titles.
Simple Example
In matplotlib, the location of axes (including subplots) are speciﬁed in normalized ﬁgure coordinates. It can
happen that your axis labels or titles (or sometimes even ticklabels) go outside the ﬁgure area, and are thus
clipped.
plt.rcParams['savefig.facecolor'] = ""0.8""
def example_plot(ax, fontsize=12):
ax.plot([1, 2])
ax.locator_params(nbins=3)
ax.set_xlabel('x-label', fontsize=fontsize)
ax.set_ylabel('y-label', fontsize=fontsize)
40 Chapter 3. Tutorials",0.006458044052124,"Matplotlib, Release 2.0.2
ax3 = plt.subplot(gs[2])
ax4 = plt.subplot(gs[3])
ax1
ax2
ax3
ax4
3.1.4 Tight Layout guide
tight_layout automatically adjusts subplot params so that the subplot(s) ﬁts in to the ﬁgure area. This is an
experimental feature and may not work for some cases. It only checks the extents of ticklabels, axis labels,
and titles.
Simple Example
In matplotlib, the location of axes (including subplots) are speciﬁed in normalized ﬁgure coordinates. It can
happen that your axis labels or titles (or sometimes even ticklabels) go outside the ﬁgure area, and are thus
clipped.
plt.rcParams['savefig.facecolor'] = ""0.8""
def example_plot(ax, fontsize=12):
ax.plot([1, 2])
ax.locator_params(nbins=3)
ax.set_xlabel('x-label', fontsize=fontsize)
ax.set_ylabel('y-label', fontsize=fontsize)
40
Chapter 3. Tutorials
",0.0012459754943847,"Matplotlib, Release 2.0.2
ax3 = plt.subplot(gs[2])
ax4 = plt.subplot(gs[3])
ax1 ax2
ax3 ax4
3.1.4 Tight Layout guide
tight_layout automatically adjusts subplot params so that the subplot(s) ﬁts in to the ﬁgure area. This is an
experimental feature and may not work for some cases. It only checks the extents of ticklabels, axis labels,
and titles.
Simple Example
In matplotlib, the location of axes (including subplots) are speciﬁed in normalized ﬁgure coordinates. It can
happen that your axis labels or titles (or sometimes even ticklabels) go outside the ﬁgure area, and are thus
clipped.
plt.rcParams['savefig.facecolor'] = ""0.8""
def example_plot(ax, fontsize=12):
ax.plot([1, 2])
ax.locator_params(nbins=3)
ax.set_xlabel('x-label', fontsize=fontsize)
ax.set_ylabel('y-label', fontsize=fontsize)
40 Chapter 3. Tutorials",0.0062389373779296,matplotlib_41-61_pdf.pdf ~ 7,"
                                                                                       GridSpec with Varying Cell Sizes
By default, GridSpec creates cells of equal sizes. You can adjust relative heights and widths of rows and columns. Note that absolute values are meaningless, only their relative ratios matter.
3.1. Introductory 39
Matplotlib, Release 2.0.2
     gs = gridspec.GridSpec(2, 2,
                       width_ratios=[1, 2],
                       height_ratios=[4, 1]
                       )
ax1 = plt.subplot(gs[0])
ax2 = plt.subplot(gs[1])

",0.012327664757096702,0.09302325581395349,656,0.012327664757096702,0.09302325581395349,658,0.012327664757096702,0.09302325581395349,656
8,8.0,matplotlib_41-61_pdf.pdf ~ 8,"Matplotlib, Release 2.0.2
ax.set_title('Title', fontsize=fontsize)
plt.close('all')
fig, ax = plt.subplots()
example_plot(ax, fontsize=24)
0.0 0.5 1.0
x-label
1.0
1.5
2.0
y-label
Title
To prevent this, the location of axes needs to be adjusted. For subplots, this can be done by adjusting the
subplot params (Move the edge of an axes to make room for tick labels ). Matplotlib v1.1 introduces a new
command tight_layout() that does this automatically for you.
plt.tight_layout()
3.1. Introductory 41",0.0048990249633789,"Matplotlib, Release 2.0.2
ax.set_title('Title', fontsize=fontsize)
plt.close('all')
fig, ax = plt.subplots()
example_plot(ax, fontsize=24)
0.0
0.5
1.0
x-label
1.0
1.5
2.0
y-label
Title
To prevent this, the location of axes needs to be adjusted. For subplots, this can be done by adjusting the
subplot params (Move the edge of an axes to make room for tick labels). Matplotlib v1.1 introduces a new
command tight_layout() that does this automatically for you.
plt.tight_layout()
3.1. Introductory
41
",0.0008368492126464,"Matplotlib, Release 2.0.2
ax.set_title('Title', fontsize=fontsize)
plt.close('all')
fig, ax = plt.subplots()
example_plot(ax, fontsize=24)
0.0 0.5 1.0
x-label
1.0
1.5
2.0
y-label
Title
To prevent this, the location of axes needs to be adjusted. For subplots, this can be done by adjusting the
subplot params (Move the edge of an axes to make room for tick labels ). Matplotlib v1.1 introduces a new
command tight_layout() that does this automatically for you.
plt.tight_layout()
3.1. Introductory 41",0.0043368339538574,matplotlib_41-61_pdf.pdf ~ 8,"
Matplotlib, Release 2.0.2
     ax3 = plt.subplot(gs[2])
ax4 = plt.subplot(gs[3])
      ax2
 ax1
  ax3
ax4
3.1.4 Tight Layout guide
tight_layout automatically adjusts subplot params so that the subplot(s) fits in to the figure area. This is an experimental feature and may not work for some cases. It only checks the extents of ticklabels, axis labels, and titles.
Simple Example
In matplotlib, the location of axes (including subplots) are specified in normalized figure coordinates. It can happen that your axis labels or titles (or sometimes even ticklabels) go outside the figure area, and are thus clipped.
    plt.rcParams['savefig.facecolor'] = ""0.8""
def example_plot(ax, fontsize=12): ax.plot([1, 2])
ax.locator_params(nbins=3) ax.set_xlabel('x-label', fontsize=fontsize) ax.set_ylabel('y-label', fontsize=fontsize)
  40 Chapter3. Tutorials

",0.03810642781852366,0.14074074074074075,630,0.03741617147412555,0.13333333333333333,631,0.03810642781852366,0.14074074074074075,630
9,9.0,matplotlib_41-61_pdf.pdf ~ 9,"Matplotlib, Release 2.0.2
0.0 0.5 1.0
x-label
1.0
1.5
2.0
y-label
Title
When you have multiple subplots, often you see labels of diﬀerent axes overlapping each other.
plt.close('all')
fig, ((ax1, ax2), (ax3, ax4)) = plt.subplots(nrows=2, ncols=2)
example_plot(ax1)
example_plot(ax2)
example_plot(ax3)
example_plot(ax4)
42 Chapter 3. Tutorials",0.0037958621978759,"Matplotlib, Release 2.0.2
0.0
0.5
1.0
x-label
1.0
1.5
2.0
y-label
Title
When you have multiple subplots, often you see labels of diﬀerent axes overlapping each other.
plt.close('all')
fig, ((ax1, ax2), (ax3, ax4)) = plt.subplots(nrows=2, ncols=2)
example_plot(ax1)
example_plot(ax2)
example_plot(ax3)
example_plot(ax4)
42
Chapter 3. Tutorials
",0.0006117820739746,"Matplotlib, Release 2.0.2
0.0 0.5 1.0
x-label
1.0
1.5
2.0
y-label
Title
When you have multiple subplots, often you see labels of diﬀerent axes overlapping each other.
plt.close('all')
fig, ((ax1, ax2), (ax3, ax4)) = plt.subplots(nrows=2, ncols=2)
example_plot(ax1)
example_plot(ax2)
example_plot(ax3)
example_plot(ax4)
42 Chapter 3. Tutorials",0.0031092166900634,matplotlib_41-61_pdf.pdf ~ 9,"
To prevent this, the location of axes needs to be adjusted. For subplots, this can be done by adjusting the subplot params (Move the edge of an axes to make room for tick labels). Matplotlib v1.1 introduces a new command tight_layout() that does this automatically for you.
3.1. Introductory 41
Matplotlib, Release 2.0.2
     ax.set_title('Title', fontsize=fontsize)
plt.close('all')
fig, ax = plt.subplots() example_plot(ax, fontsize=24)
  Title
     2.0
1.5
1.0
0.0
0.5 1.0 x-label
y-label
  plt.tight_layout()

",0.05284798912749087,0.19318181818181818,395,0.05284798912749087,0.19318181818181818,395,0.05284798912749087,0.19318181818181818,395
10,10.0,matplotlib_41-61_pdf.pdf ~ 10,"Matplotlib, Release 2.0.2
0.0 0.5 1.0
x-label
1.0
1.5
2.0y-label
Title
0.0 0.5 1.0
x-label
1.0
1.5
2.0y-label
Title
0.0 0.5 1.0
x-label
1.0
1.5
2.0y-label
Title
0.0 0.5 1.0
x-label
1.0
1.5
2.0y-label
Title
tight_layout() will also adjust spacing between subplots to minimize the overlaps.
plt.tight_layout()
3.1. Introductory 43",0.0057017803192138,"Matplotlib, Release 2.0.2
0.0
0.5
1.0
x-label
1.0
1.5
2.0
y-label
Title
0.0
0.5
1.0
x-label
1.0
1.5
2.0
y-label
Title
0.0
0.5
1.0
x-label
1.0
1.5
2.0
y-label
Title
0.0
0.5
1.0
x-label
1.0
1.5
2.0
y-label
Title
tight_layout() will also adjust spacing between subplots to minimize the overlaps.
plt.tight_layout()
3.1. Introductory
43
",0.0006980895996093,"Matplotlib, Release 2.0.2
0.0 0.5 1.0
x-label
1.0
1.5
2.0y-label
Title
0.0 0.5 1.0
x-label
1.0
1.5
2.0y-label
Title
0.0 0.5 1.0
x-label
1.0
1.5
2.0y-label
Title
0.0 0.5 1.0
x-label
1.0
1.5
2.0y-label
Title
tight_layout() will also adjust spacing between subplots to minimize the overlaps.
plt.tight_layout()
3.1. Introductory 43",0.0044031143188476,matplotlib_41-61_pdf.pdf ~ 10,"
Matplotlib, Release 2.0.2
When you have multiple subplots, often you see labels of different axes overlapping each other.
42 Chapter3. Tutorials
  Title
     2.0
1.5
1.0
0.0
0.5 1.0 x-label
y-label
    plt.close('all')
fig, ((ax1, ax2), (ax3, ax4)) = plt.subplots(nrows=2, ncols=2) example_plot(ax1)
example_plot(ax2)
example_plot(ax3)
example_plot(ax4)
  
",0.07217661658783725,0.15789473684210525,266,0.06978423773483027,0.19642857142857142,270,0.07217661658783725,0.15789473684210525,266
11,11.0,matplotlib_41-61_pdf.pdf ~ 11,"Matplotlib, Release 2.0.2
0.0 0.5 1.0
x-label
1.0
1.5
2.0y-label
Title
0.0 0.5 1.0
x-label
1.0
1.5
2.0y-label
Title
0.0 0.5 1.0
x-label
1.0
1.5
2.0y-label
Title
0.0 0.5 1.0
x-label
1.0
1.5
2.0y-label
Title
tight_layout() can take keyword arguments of pad, w_pad and h_pad. These control the extra padding
around the ﬁgure border and between subplots. The pads are speciﬁed in fraction of fontsize.
plt.tight_layout(pad=0.4, w_pad=0.5, h_pad=1.0)
44 Chapter 3. Tutorials",0.0059778690338134,"Matplotlib, Release 2.0.2
0.0
0.5
1.0
x-label
1.0
1.5
2.0
y-label
Title
0.0
0.5
1.0
x-label
1.0
1.5
2.0
y-label
Title
0.0
0.5
1.0
x-label
1.0
1.5
2.0
y-label
Title
0.0
0.5
1.0
x-label
1.0
1.5
2.0
y-label
Title
tight_layout() can take keyword arguments of pad, w_pad and h_pad. These control the extra padding
around the ﬁgure border and between subplots. The pads are speciﬁed in fraction of fontsize.
plt.tight_layout(pad=0.4, w_pad=0.5, h_pad=1.0)
44
Chapter 3. Tutorials
",0.0008070468902587,"Matplotlib, Release 2.0.2
0.0 0.5 1.0
x-label
1.0
1.5
2.0y-label
Title
0.0 0.5 1.0
x-label
1.0
1.5
2.0y-label
Title
0.0 0.5 1.0
x-label
1.0
1.5
2.0y-label
Title
0.0 0.5 1.0
x-label
1.0
1.5
2.0y-label
Title
tight_layout() can take keyword arguments of pad, w_pad and h_pad. These control the extra padding
around the ﬁgure border and between subplots. The pads are speciﬁed in fraction of fontsize.
plt.tight_layout(pad=0.4, w_pad=0.5, h_pad=1.0)
44 Chapter 3. Tutorials",0.0049159526824951,matplotlib_41-61_pdf.pdf ~ 11,"  
Matplotlib, Release 2.0.2
  2.0
1.5
1.0
0.0
2.0
1.5
1.0
0.0
0.5 1.0 Title
2.0
1.5
1.0 2.0
1.5
1.0
0.0
0.5 1.0 Title
Title
Title
0.5 1.0 x-label
0.0
0.5 1.0 x-label
 y-label
 x-label
 y-label
x-label
 y-label y-label
tight_layout() will also adjust spacing between subplots to minimize the overlaps. plt.tight_layout()
    3.1. Introductory 43

",0.09763852705722964,0.20689655172413793,280,0.09740717488142714,0.24561403508771928,277,0.09763852705722964,0.20689655172413793,280
12,12.0,matplotlib_41-61_pdf.pdf ~ 12,"Matplotlib, Release 2.0.2
0.0 0.5 1.0
x-label
1.0
1.5
2.0y-label
Title
0.0 0.5 1.0
x-label
1.0
1.5
2.0y-label
Title
0.0 0.5 1.0
x-label
1.0
1.5
2.0y-label
Title
0.0 0.5 1.0
x-label
1.0
1.5
2.0y-label
Title
tight_layout() will work even if the sizes of subplots are di ﬀerent as far as their grid speciﬁcation is
compatible. In the example below, ax1 and ax2 are subplots of a 2x2 grid, while ax3 is of a 1x2 grid.
plt.close('all')
fig = plt.figure()
ax1 = plt.subplot(221)
ax2 = plt.subplot(223)
ax3 = plt.subplot(122)
example_plot(ax1)
example_plot(ax2)
example_plot(ax3)
plt.tight_layout()
3.1. Introductory 45",0.0055408477783203,"Matplotlib, Release 2.0.2
0.0
0.5
1.0
x-label
1.0
1.5
2.0
y-label
Title
0.0
0.5
1.0
x-label
1.0
1.5
2.0
y-label
Title
0.0
0.5
1.0
x-label
1.0
1.5
2.0
y-label
Title
0.0
0.5
1.0
x-label
1.0
1.5
2.0
y-label
Title
tight_layout() will work even if the sizes of subplots are diﬀerent as far as their grid speciﬁcation is
compatible. In the example below, ax1 and ax2 are subplots of a 2x2 grid, while ax3 is of a 1x2 grid.
plt.close('all')
fig = plt.figure()
ax1 = plt.subplot(221)
ax2 = plt.subplot(223)
ax3 = plt.subplot(122)
example_plot(ax1)
example_plot(ax2)
example_plot(ax3)
plt.tight_layout()
3.1. Introductory
45
",0.0009610652923583,"Matplotlib, Release 2.0.2
0.0 0.5 1.0
x-label
1.0
1.5
2.0y-label
Title
0.0 0.5 1.0
x-label
1.0
1.5
2.0y-label
Title
0.0 0.5 1.0
x-label
1.0
1.5
2.0y-label
Title
0.0 0.5 1.0
x-label
1.0
1.5
2.0y-label
Title
tight_layout() will work even if the sizes of subplots are di ﬀerent as far as their grid speciﬁcation is
compatible. In the example below, ax1 and ax2 are subplots of a 2x2 grid, while ax3 is of a 1x2 grid.
plt.close('all')
fig = plt.figure()
ax1 = plt.subplot(221)
ax2 = plt.subplot(223)
ax3 = plt.subplot(122)
example_plot(ax1)
example_plot(ax2)
example_plot(ax3)
plt.tight_layout()
3.1. Introductory 45",0.0054762363433837,matplotlib_41-61_pdf.pdf ~ 12,"
Matplotlib, Release 2.0.2
  2.0
1.5
1.0
0.0
2.0
1.5
1.0
0.0
Title
0.5 1.0 x-label
Title
0.5 1.0 x-label
2.0
1.5
1.0
2.0
1.5
1.0
0.0
Title
0.5 1.0 x-label
Title
0.5 1.0 x-label
0.0
    y-label y-label
y-label y-label
tight_layout() can take keyword arguments of pad, w_pad and h_pad. These control the extra padding around the figure border and between subplots. The pads are specified in fraction of fontsize.
plt.tight_layout(pad=0.4, w_pad=0.5, h_pad=1.0)
    44 Chapter3. Tutorials
",0.03971072732949669,0.16279069767441862,399,0.040358386668164034,0.19047619047619047,396,0.03971072732949669,0.16279069767441862,399
13,13.0,matplotlib_41-61_pdf.pdf ~ 13,"Matplotlib, Release 2.0.2
0.0 0.5 1.0
x-label
1.0
1.5
2.0y-label
Title
0.0 0.5 1.0
x-label
1.0
1.5
2.0y-label
Title
0.0 0.5 1.0
x-label
1.0
1.5
2.0y-label
Title
It works with subplots created with subplot2grid(). In general, subplots created from the gridspec (Cus-
tomizing Location of Subplot Using GridSpec) will work.
plt.close('all')
fig = plt.figure()
ax1 = plt.subplot2grid((3, 3), (0, 0))
ax2 = plt.subplot2grid((3, 3), (0, 1), colspan=2)
ax3 = plt.subplot2grid((3, 3), (1, 0), colspan=2, rowspan=2)
ax4 = plt.subplot2grid((3, 3), (1, 2), rowspan=2)
example_plot(ax1)
example_plot(ax2)
example_plot(ax3)
example_plot(ax4)
plt.tight_layout()
46 Chapter 3. Tutorials",0.005552053451538,"Matplotlib, Release 2.0.2
0.0
0.5
1.0
x-label
1.0
1.5
2.0
y-label
Title
0.0
0.5
1.0
x-label
1.0
1.5
2.0
y-label
Title
0.0
0.5
1.0
x-label
1.0
1.5
2.0
y-label
Title
It works with subplots created with subplot2grid(). In general, subplots created from the gridspec (Cus-
tomizing Location of Subplot Using GridSpec) will work.
plt.close('all')
fig = plt.figure()
ax1 = plt.subplot2grid((3, 3), (0, 0))
ax2 = plt.subplot2grid((3, 3), (0, 1), colspan=2)
ax3 = plt.subplot2grid((3, 3), (1, 0), colspan=2, rowspan=2)
ax4 = plt.subplot2grid((3, 3), (1, 2), rowspan=2)
example_plot(ax1)
example_plot(ax2)
example_plot(ax3)
example_plot(ax4)
plt.tight_layout()
46
Chapter 3. Tutorials
",0.0010061264038085,"Matplotlib, Release 2.0.2
0.0 0.5 1.0
x-label
1.0
1.5
2.0y-label
Title
0.0 0.5 1.0
x-label
1.0
1.5
2.0y-label
Title
0.0 0.5 1.0
x-label
1.0
1.5
2.0y-label
Title
It works with subplots created with subplot2grid(). In general, subplots created from the gridspec (Cus-
tomizing Location of Subplot Using GridSpec) will work.
plt.close('all')
fig = plt.figure()
ax1 = plt.subplot2grid((3, 3), (0, 0))
ax2 = plt.subplot2grid((3, 3), (0, 1), colspan=2)
ax3 = plt.subplot2grid((3, 3), (1, 0), colspan=2, rowspan=2)
ax4 = plt.subplot2grid((3, 3), (1, 2), rowspan=2)
example_plot(ax1)
example_plot(ax2)
example_plot(ax3)
example_plot(ax4)
plt.tight_layout()
46 Chapter 3. Tutorials",0.0064740180969238,matplotlib_41-61_pdf.pdf ~ 13,"
tight_layout() will work even if the sizes of subplots are different as far as their grid specification is compatible. In the example below, ax1 and ax2 are subplots of a 2x2 grid, while ax3 is of a 1x2 grid.
3.1. Introductory 45

Matplotlib, Release 2.0.2
 2.0
1.5
1.0
0.0
2.0
1.5
1.0
0.0
0.5 1.0
x-label Title
2.0
1.5
1.0
2.0
1.5
1.0
0.0
0.5 1.0
x-label Title
Title
Title
0.5 1.0 x-label
0.0
0.5 1.0 x-label
     y-label y-label
y-label y-label
    plt.close('all') fig = plt.figure()
ax1 = plt.subplot(221)
ax2 = plt.subplot(223)
ax3 = plt.subplot(122)
example_plot(ax1)
example_plot(ax2)
example_plot(ax3)
plt.tight_layout()
  
",0.16415623362747284,0.2808988764044944,509,0.1697237045037487,0.3068181818181818,516,0.16415623362747284,0.2808988764044944,509
14,14.0,matplotlib_41-61_pdf.pdf ~ 14,"Matplotlib, Release 2.0.2
0.0 0.5 1.0
x-label
1.0
1.5
2.0y-label
Title
0.0 0.5 1.0
x-label
1.0
1.5
2.0y-label
Title
0.0 0.5 1.0
x-label
1.0
1.5
2.0y-label
Title
0.0 0.5 1.0
x-label
1.0
1.5
2.0y-label
Title
Although not thoroughly tested, it seems to work for subplots with aspect != “auto” (e.g., axes with images).
arr = np.arange(100).reshape((10,10))
plt.close('all')
fig = plt.figure(figsize=(5,4))
ax = plt.subplot(111)
im = ax.imshow(arr, interpolation=""none"")
plt.tight_layout()
3.1. Introductory 47",0.0048902034759521,"Matplotlib, Release 2.0.2
0.0
0.5
1.0
x-label
1.0
1.5
2.0
y-label
Title
0.0
0.5
1.0
x-label
1.0
1.5
2.0
y-label
Title
0.0
0.5
1.0
x-label
1.0
1.5
2.0
y-label
Title
0.0
0.5
1.0
x-label
1.0
1.5
2.0
y-label
Title
Although not thoroughly tested, it seems to work for subplots with aspect != “auto” (e.g., axes with images).
arr = np.arange(100).reshape((10,10))
plt.close('all')
fig = plt.figure(figsize=(5,4))
ax = plt.subplot(111)
im = ax.imshow(arr, interpolation=""none"")
plt.tight_layout()
3.1. Introductory
47
",0.0008759498596191,"Matplotlib, Release 2.0.2
0.0 0.5 1.0
x-label
1.0
1.5
2.0y-label
Title
0.0 0.5 1.0
x-label
1.0
1.5
2.0y-label
Title
0.0 0.5 1.0
x-label
1.0
1.5
2.0y-label
Title
0.0 0.5 1.0
x-label
1.0
1.5
2.0y-label
Title
Although not thoroughly tested, it seems to work for subplots with aspect != “auto” (e.g., axes with images).
arr = np.arange(100).reshape((10,10))
plt.close('all')
fig = plt.figure(figsize=(5,4))
ax = plt.subplot(111)
im = ax.imshow(arr, interpolation=""none"")
plt.tight_layout()
3.1. Introductory 47",0.0048441886901855,matplotlib_41-61_pdf.pdf ~ 14,"  
Matplotlib, Release 2.0.2
  2.0 1.5 1.0
2.0 1.5 1.0
0.0 0.5 1.0 x-label
2.0
1.5
1.0
Title
0.0 0.5 x-label
1.0
0.0
0.5 1.0 x-label
Title
Title
       y-label
y-label
y-label
It works with subplots created with subplot2grid(). In general, subplots created from the gridspec (Cus- tomizing Location of Subplot Using GridSpec) will work.
    plt.close('all') fig = plt.figure()
ax1 = plt.subplot2grid((3, 3), (0, 0))
ax2 = plt.subplot2grid((3, 3), (0, 1), colspan=2)
ax3 = plt.subplot2grid((3, 3), (1, 0), colspan=2, rowspan=2)
ax4 = plt.subplot2grid((3, 3), (1, 2), rowspan=2)
example_plot(ax1)
example_plot(ax2)
example_plot(ax3)
example_plot(ax4)
plt.tight_layout()
  46 Chapter3. Tutorials

",0.09362435894455486,0.17647058823529413,450,0.09887012523322565,0.20238095238095238,459,0.09362435894455486,0.17647058823529413,450
15,15.0,matplotlib_41-61_pdf.pdf ~ 15,"Matplotlib, Release 2.0.2
0 2 4 6 8
0
2
4
6
8
Caveats
• tight_layout() only considers ticklabels, axis labels, and titles. Thus, other artists may be clipped
and also may overlap.
• It assumes that the extra space needed for ticklabels, axis labels, and titles is independent of original
location of axes. This is often true, but there are rare cases where it is not.
• pad=0 clips some of the texts by a few pixels. This may be a bug or a limitation of the current
algorithm and it is not clear why it happens. Meanwhile, use of pad at least larger than 0.3 is recom-
mended.
Use with GridSpec
GridSpec has its own tight_layout() method (the pyplot api tight_layout() also works).
plt.close('all')
fig = plt.figure()
import matplotlib.gridspec as gridspec
gs1 = gridspec.GridSpec(2, 1)
ax1 = fig.add_subplot(gs1[0])
ax2 = fig.add_subplot(gs1[1])
48 Chapter 3. Tutorials",0.0063228607177734,"Matplotlib, Release 2.0.2
0
2
4
6
8
0
2
4
6
8
Caveats
• tight_layout() only considers ticklabels, axis labels, and titles. Thus, other artists may be clipped
and also may overlap.
• It assumes that the extra space needed for ticklabels, axis labels, and titles is independent of original
location of axes. This is often true, but there are rare cases where it is not.
• pad=0 clips some of the texts by a few pixels. This may be a bug or a limitation of the current
algorithm and it is not clear why it happens. Meanwhile, use of pad at least larger than 0.3 is recom-
mended.
Use with GridSpec
GridSpec has its own tight_layout() method (the pyplot api tight_layout() also works).
plt.close('all')
fig = plt.figure()
import matplotlib.gridspec as gridspec
gs1 = gridspec.GridSpec(2, 1)
ax1 = fig.add_subplot(gs1[0])
ax2 = fig.add_subplot(gs1[1])
48
Chapter 3. Tutorials
",0.0011680126190185,"Matplotlib, Release 2.0.2
0 2 4 6 8
0
2
4
6
8
Caveats
• tight_layout() only considers ticklabels, axis labels, and titles. Thus, other artists may be clipped
and also may overlap.
• It assumes that the extra space needed for ticklabels, axis labels, and titles is independent of original
location of axes. This is often true, but there are rare cases where it is not.
• pad=0 clips some of the texts by a few pixels. This may be a bug or a limitation of the current
algorithm and it is not clear why it happens. Meanwhile, use of pad at least larger than 0.3 is recom-
mended.
Use with GridSpec
GridSpec has its own tight_layout() method (the pyplot api tight_layout() also works).
plt.close('all')
fig = plt.figure()
import matplotlib.gridspec as gridspec
gs1 = gridspec.GridSpec(2, 1)
ax1 = fig.add_subplot(gs1[0])
ax2 = fig.add_subplot(gs1[1])
48 Chapter 3. Tutorials",0.0057411193847656,matplotlib_41-61_pdf.pdf ~ 15,"
Although not thoroughly tested, it seems to work for subplots with aspect != “auto” (e.g., axes with images).
Matplotlib, Release 2.0.2
  2.0 1.5 1.0
0.0
2.0
1.5
1.0
Title
0.5 1.0 x-label
2.0 1.5 1.0
Title
0.0
Title
0.5 x-label
2.0
1.5
1.0
1.0
0.0
0.5 x-label
1.0
0.0
0.5 1.0 x-label
Title
        y-label y-label
y-label
y-label
    arr = np.arange(100).reshape((10,10)) plt.close('all')
fig = plt.figure(figsize=(5,4))
ax = plt.subplot(111)
im = ax.imshow(arr, interpolation=""none"")
plt.tight_layout()
  3.1. Introductory 47

",0.0123426428868291,0.07042253521126761,689,0.0123426428868291,0.07042253521126761,689,0.0123426428868291,0.07042253521126761,689
16,16.0,matplotlib_41-61_pdf.pdf ~ 16,"Matplotlib, Release 2.0.2
example_plot(ax1)
example_plot(ax2)
gs1.tight_layout(fig)
0.0 0.5 1.0
x-label
1.0
1.5
2.0y-label
Title
0.0 0.5 1.0
x-label
1.0
1.5
2.0y-label
Title
You may provide an optional rect parameter, which speciﬁes the bounding box that the subplots will be ﬁt
inside. The coordinates must be in normalized ﬁgure coordinates and the default is (0, 0, 1, 1).
gs1.tight_layout(fig, rect=[0, 0, 0.5, 1])
3.1. Introductory 49",0.0038309097290039,"Matplotlib, Release 2.0.2
example_plot(ax1)
example_plot(ax2)
gs1.tight_layout(fig)
0.0
0.5
1.0
x-label
1.0
1.5
2.0
y-label
Title
0.0
0.5
1.0
x-label
1.0
1.5
2.0
y-label
Title
You may provide an optional rect parameter, which speciﬁes the bounding box that the subplots will be ﬁt
inside. The coordinates must be in normalized ﬁgure coordinates and the default is (0, 0, 1, 1).
gs1.tight_layout(fig, rect=[0, 0, 0.5, 1])
3.1. Introductory
49
",0.0010328292846679,"Matplotlib, Release 2.0.2
example_plot(ax1)
example_plot(ax2)
gs1.tight_layout(fig)
0.0 0.5 1.0
x-label
1.0
1.5
2.0y-label
Title
0.0 0.5 1.0
x-label
1.0
1.5
2.0y-label
Title
You may provide an optional rect parameter, which speciﬁes the bounding box that the subplots will be ﬁt
inside. The coordinates must be in normalized ﬁgure coordinates and the default is (0, 0, 1, 1).
gs1.tight_layout(fig, rect=[0, 0, 0.5, 1])
3.1. Introductory 49",0.0036470890045166,matplotlib_41-61_pdf.pdf ~ 16,"
Matplotlib, Release 2.0.2
      0
2
4
6
8
 02468
Caveats
• tight_layout() only considers ticklabels, axis labels, and titles. Thus, other artists may be clipped and also may overlap.
• It assumes that the extra space needed for ticklabels, axis labels, and titles is independent of original location of axes. This is often true, but there are rare cases where it is not.
• pad=0 clips some of the texts by a few pixels. This may be a bug or a limitation of the current algorithm and it is not clear why it happens. Meanwhile, use of pad at least larger than 0.3 is recom- mended.
Use with GridSpec
GridSpec has its own tight_layout() method (the pyplot api tight_layout() also works).
    plt.close('all') fig = plt.figure()
import matplotlib.gridspec as gridspec
gs1 = gridspec.GridSpec(2, 1)
ax1 = fig.add_subplot(gs1[0])
ax2 = fig.add_subplot(gs1[1])
  48 Chapter3. Tutorials

",0.006635861423392433,0.059602649006622516,684,0.006866684104433796,0.05921052631578947,685,0.006635861423392433,0.059602649006622516,684
17,17.0,matplotlib_41-61_pdf.pdf ~ 17,"Matplotlib, Release 2.0.2
0.0 0.5 1.0
x-label
1.0
1.5
2.0y-label
Title
0.0 0.5 1.0
x-label
1.0
1.5
2.0y-label
Title
For example, this can be used for a ﬁgure with multiple gridspecs.
gs2 = gridspec.GridSpec(3, 1)
for ss in gs2:
ax = fig.add_subplot(ss)
example_plot(ax)
ax.set_title("""")
ax.set_xlabel("""")
ax.set_xlabel(""x-label"", fontsize=12)
gs2.tight_layout(fig, rect=[0.5, 0, 1, 1], h_pad=0.5)
50 Chapter 3. Tutorials",0.0050971508026123,"Matplotlib, Release 2.0.2
0.0
0.5
1.0
x-label
1.0
1.5
2.0
y-label
Title
0.0
0.5
1.0
x-label
1.0
1.5
2.0
y-label
Title
For example, this can be used for a ﬁgure with multiple gridspecs.
gs2 = gridspec.GridSpec(3, 1)
for ss in gs2:
ax = fig.add_subplot(ss)
example_plot(ax)
ax.set_title("""")
ax.set_xlabel("""")
ax.set_xlabel(""x-label"", fontsize=12)
gs2.tight_layout(fig, rect=[0.5, 0, 1, 1], h_pad=0.5)
50
Chapter 3. Tutorials
",0.0007851123809814,"Matplotlib, Release 2.0.2
0.0 0.5 1.0
x-label
1.0
1.5
2.0y-label
Title
0.0 0.5 1.0
x-label
1.0
1.5
2.0y-label
Title
For example, this can be used for a ﬁgure with multiple gridspecs.
gs2 = gridspec.GridSpec(3, 1)
for ss in gs2:
ax = fig.add_subplot(ss)
example_plot(ax)
ax.set_title("""")
ax.set_xlabel("""")
ax.set_xlabel(""x-label"", fontsize=12)
gs2.tight_layout(fig, rect=[0.5, 0, 1, 1], h_pad=0.5)
50 Chapter 3. Tutorials",0.0042319297790527,matplotlib_41-61_pdf.pdf ~ 17,"
Matplotlib, Release 2.0.2
     example_plot(ax1)
example_plot(ax2)
gs1.tight_layout(fig)
  2.0 1.5 1.0
2.0 1.5 1.0
0.0
Title
0.5 1.0 x-label
Title
0.5 1.0 x-label
0.0
          y-label y-label
You may provide an optional rect parameter, which specifies the bounding box that the subplots will be fit inside. The coordinates must be in normalized figure coordinates and the default is (0, 0, 1, 1).
gs1.tight_layout(fig, rect=[0, 0, 0.5, 1])
    3.1. Introductory 49

",0.03896842023349961,0.15294117647058825,328,0.040885255539127745,0.17857142857142858,331,0.03896842023349961,0.15294117647058825,328
18,18.0,matplotlib_41-61_pdf.pdf ~ 18,"Matplotlib, Release 2.0.2
0.0 0.5 1.0
x-label
1.0
1.5
2.0y-label
Title
0.0 0.5 1.0
x-label
1.0
1.5
2.0y-label
Title
0.0 0.5 1.0
1.0
1.5
2.0y-label
0.0 0.5 1.0
1.0
1.5
2.0y-label
0.0 0.5 1.0
x-label
1.0
1.5
2.0y-label
We may try to match the top and bottom of two grids
top = min(gs1.top, gs2.top)
bottom = max(gs1.bottom, gs2.bottom)
gs1.update(top=top, bottom=bottom)
gs2.update(top=top, bottom=bottom)
While this should be mostly good enough, adjusting top and bottom may require adjustment of hspace also.
To update hspace & vspace, we call tight_layout() again with updated rect argument. Note that the rect
argument speciﬁes the area including the ticklabels, etc. Thus, we will increase the bottom (which is 0 for
the normal case) by the di ﬀerence between the bottom from above and the bottom of each gridspec. Same
thing for the top.
top = min(gs1.top, gs2.top)
bottom = max(gs1.bottom, gs2.bottom)
gs1.tight_layout(fig, rect=[None, 0 + (bottom-gs1.bottom),
0.5, 1 - (gs1.top-top)])
gs2.tight_layout(fig, rect=[0.5, 0 + (bottom-gs2.bottom),
None, 1 - (gs2.top-top)],
h_pad=0.5)
3.1. Introductory 51",0.0074172019958496,"Matplotlib, Release 2.0.2
0.0
0.5
1.0
x-label
1.0
1.5
2.0
y-label
Title
0.0
0.5
1.0
x-label
1.0
1.5
2.0
y-label
Title
0.0
0.5
1.0
1.0
1.5
2.0
y-label
0.0
0.5
1.0
1.0
1.5
2.0
y-label
0.0
0.5
1.0
x-label
1.0
1.5
2.0
y-label
We may try to match the top and bottom of two grids
top = min(gs1.top, gs2.top)
bottom = max(gs1.bottom, gs2.bottom)
gs1.update(top=top, bottom=bottom)
gs2.update(top=top, bottom=bottom)
While this should be mostly good enough, adjusting top and bottom may require adjustment of hspace also.
To update hspace & vspace, we call tight_layout() again with updated rect argument. Note that the rect
argument speciﬁes the area including the ticklabels, etc. Thus, we will increase the bottom (which is 0 for
the normal case) by the diﬀerence between the bottom from above and the bottom of each gridspec. Same
thing for the top.
top = min(gs1.top, gs2.top)
bottom = max(gs1.bottom, gs2.bottom)
gs1.tight_layout(fig, rect=[None, 0 + (bottom-gs1.bottom),
0.5, 1 - (gs1.top-top)])
gs2.tight_layout(fig, rect=[0.5, 0 + (bottom-gs2.bottom),
None, 1 - (gs2.top-top)],
h_pad=0.5)
3.1. Introductory
51
",0.0014898777008056,"Matplotlib, Release 2.0.2
0.0 0.5 1.0
x-label
1.0
1.5
2.0y-label
Title
0.0 0.5 1.0
x-label
1.0
1.5
2.0y-label
Title
0.0 0.5 1.0
1.0
1.5
2.0y-label
0.0 0.5 1.0
1.0
1.5
2.0y-label
0.0 0.5 1.0
x-label
1.0
1.5
2.0y-label
We may try to match the top and bottom of two grids
top = min(gs1.top, gs2.top)
bottom = max(gs1.bottom, gs2.bottom)
gs1.update(top=top, bottom=bottom)
gs2.update(top=top, bottom=bottom)
While this should be mostly good enough, adjusting top and bottom may require adjustment of hspace also.
To update hspace & vspace, we call tight_layout() again with updated rect argument. Note that the rect
argument speciﬁes the area including the ticklabels, etc. Thus, we will increase the bottom (which is 0 for
the normal case) by the di ﬀerence between the bottom from above and the bottom of each gridspec. Same
thing for the top.
top = min(gs1.top, gs2.top)
bottom = max(gs1.bottom, gs2.bottom)
gs1.tight_layout(fig, rect=[None, 0 + (bottom-gs1.bottom),
0.5, 1 - (gs1.top-top)])
gs2.tight_layout(fig, rect=[0.5, 0 + (bottom-gs2.bottom),
None, 1 - (gs2.top-top)],
h_pad=0.5)
3.1. Introductory 51",0.0072252750396728,matplotlib_41-61_pdf.pdf ~ 18,"
Matplotlib, Release 2.0.2
  2.0
1.5
1.0
2.0
1.5
1.0
0.0
Title
0.5 1.0 x-label
Title
0.5 1.0 x-label
0.0
  y-label y-label
For example, this can be used for a figure with multiple gridspecs.
    gs2 = gridspec.GridSpec(3, 1)
for ss in gs2:
ax = fig.add_subplot(ss) example_plot(ax) ax.set_title("""") ax.set_xlabel("""")
ax.set_xlabel(""x-label"", fontsize=12)
gs2.tight_layout(fig, rect=[0.5, 0, 1, 1], h_pad=0.5)
  50 Chapter3. Tutorials

",0.01658088384257298,0.1328125,840,0.016758494169282424,0.15079365079365079,843,0.01658088384257298,0.1328125,840
19,19.0,matplotlib_41-61_pdf.pdf ~ 19,"Matplotlib, Release 2.0.2
0.0 0.5 1.0
x-label
1.0
1.5
2.0y-label
Title
0.0 0.5 1.0
x-label
1.0
1.5
2.0y-label
Title
0.0 0.5 1.0
1.0
1.5
2.0y-label
0.0 0.5 1.0
1.0
1.5
2.0y-label
0.0 0.5 1.0
x-label
1.0
1.5
2.0y-label
Use with AxesGrid1
While limited, the axes_grid1 toolkit is also supported.
plt.close('all')
fig = plt.figure()
from mpl_toolkits.axes_grid1 import Grid
grid = Grid(fig, rect=111, nrows_ncols=(2,2),
axes_pad=0.25, label_mode='L',
)
for ax in grid:
example_plot(ax)
ax.title.set_visible(False)
plt.tight_layout()
52 Chapter 3. Tutorials",0.0055360794067382,"Matplotlib, Release 2.0.2
0.0
0.5
1.0
x-label
1.0
1.5
2.0
y-label
Title
0.0
0.5
1.0
x-label
1.0
1.5
2.0
y-label
Title
0.0
0.5
1.0
1.0
1.5
2.0
y-label
0.0
0.5
1.0
1.0
1.5
2.0
y-label
0.0
0.5
1.0
x-label
1.0
1.5
2.0
y-label
Use with AxesGrid1
While limited, the axes_grid1 toolkit is also supported.
plt.close('all')
fig = plt.figure()
from mpl_toolkits.axes_grid1 import Grid
grid = Grid(fig, rect=111, nrows_ncols=(2,2),
axes_pad=0.25, label_mode='L',
)
for ax in grid:
example_plot(ax)
ax.title.set_visible(False)
plt.tight_layout()
52
Chapter 3. Tutorials
",0.0010051727294921,"Matplotlib, Release 2.0.2
0.0 0.5 1.0
x-label
1.0
1.5
2.0y-label
Title
0.0 0.5 1.0
x-label
1.0
1.5
2.0y-label
Title
0.0 0.5 1.0
1.0
1.5
2.0y-label
0.0 0.5 1.0
1.0
1.5
2.0y-label
0.0 0.5 1.0
x-label
1.0
1.5
2.0y-label
Use with AxesGrid1
While limited, the axes_grid1 toolkit is also supported.
plt.close('all')
fig = plt.figure()
from mpl_toolkits.axes_grid1 import Grid
grid = Grid(fig, rect=111, nrows_ncols=(2,2),
axes_pad=0.25, label_mode='L',
)
for ax in grid:
example_plot(ax)
ax.title.set_visible(False)
plt.tight_layout()
52 Chapter 3. Tutorials",0.0067420005798339,matplotlib_41-61_pdf.pdf ~ 19,"
Matplotlib, Release 2.0.2
  2.0
1.5
2.0
1.5
1.0
0.0 0.5 x-label
1.0
Title
2.0 1.5
1.0 2.0
1.5
1.0 2.0
1.5 1.0
1.0
0.0 0.5 1.0
0.0
0.0
0.0
0.5 1.0
0.5 1.0
0.5 1.0 x-label
x-label Title
     y-label y-label
y-label y-label y-label
We may try to match the top and bottom of two grids
While this should be mostly good enough, adjusting top and bottom may require adjustment of hspace also. To update hspace & vspace, we call tight_layout() again with updated rect argument. Note that the rect argument specifies the area including the ticklabels, etc. Thus, we will increase the bottom (which is 0 for the normal case) by the difference between the bottom from above and the bottom of each gridspec. Same thing for the top.
    top = min(gs1.top, gs2.top)
bottom = max(gs1.bottom, gs2.bottom)
gs1.update(top=top, bottom=bottom)
gs2.update(top=top, bottom=bottom)
     top = min(gs1.top, gs2.top)
bottom = max(gs1.bottom, gs2.bottom)
gs1.tight_layout(fig, rect=[None, 0 + (bottom-gs1.bottom),
                            0.5, 1 - (gs1.top-top)])
gs2.tight_layout(fig, rect=[0.5, 0 + (bottom-gs2.bottom),
                            None, 1 - (gs2.top-top)],
h_pad=0.5)
  3.1. Introductory 51

",0.01440558211142105,0.12307692307692308,909,0.01671166728525638,0.13953488372093023,907,0.01440558211142105,0.12307692307692308,909
41,1.0,latex_pdf.pdf ~ 1,2,0.0002338886260986,"2
",0.0005590915679931,2,0.0002171993255615,latex_pdf.pdf ~ 1,"
6
Sample PDF Document
Robert Maron
Grzegorz Grudzi  ́nski
February 20, 1999
",0.0,0.0,76,0.0,0.0,75,0.0,0.0,76
42,2.0,latex_pdf.pdf ~ 2,"Contents
1 Template 5
1.1 How to compile a.texﬁle to a.pdfﬁle. . . . . . . . . . . . .5
1.1.1 Tools . . . . . . . . . . . . . . . . . . . . . . . . . . . .5
1.1.2 How to use the tools. . . . . . . . . . . . . . . . . . . .5
1.2 How to write a document. . . . . . . . . . . . . . . . . . . . . .6
1.2.1 The main document. . . . . . . . . . . . . . . . . . . . .6
1.2.2 Chapters . . . . . . . . . . . . . . . . . . . . . . . . . .6
1.2.3 Spell-checking. . . . . . . . . . . . . . . . . . . . . . .6
1.3 LATEX and pdfLATEX capabilities. . . . . . . . . . . . . . . . . . .7
1.3.1 Overview . . . . . . . . . . . . . . . . . . . . . . . . . .7
1.3.2 LATEX . . . . . . . . . . . . . . . . . . . . . . . . . . . .7
1.3.3 pdfLATEX . . . . . . . . . . . . . . . . . . . . . . . . . .7
1.3.4 Examples . . . . . . . . . . . . . . . . . . . . . . . . . .7
3",0.0054831504821777,"Contents
1
Template
5
1.1
How to compile a .tex ﬁle to a .pdf ﬁle . . . . . . . . . . . . .
5
1.1.1
Tools
. . . . . . . . . . . . . . . . . . . . . . . . . . . .
5
1.1.2
How to use the tools
. . . . . . . . . . . . . . . . . . . .
5
1.2
How to write a document . . . . . . . . . . . . . . . . . . . . . .
6
1.2.1
The main document . . . . . . . . . . . . . . . . . . . . .
6
1.2.2
Chapters
. . . . . . . . . . . . . . . . . . . . . . . . . .
6
1.2.3
Spell-checking . . . . . . . . . . . . . . . . . . . . . . .
6
1.3
LATEX and pdfLATEX capabilities . . . . . . . . . . . . . . . . . . .
7
1.3.1
Overview . . . . . . . . . . . . . . . . . . . . . . . . . .
7
1.3.2
LATEX . . . . . . . . . . . . . . . . . . . . . . . . . . . .
7
1.3.3
pdfLATEX
. . . . . . . . . . . . . . . . . . . . . . . . . .
7
1.3.4
Examples . . . . . . . . . . . . . . . . . . . . . . . . . .
7
3
",0.0033869743347167,"Contents
1 Template 5
1.1 How to compile a.texﬁle to a.pdfﬁle. . . . . . . . . . . . .5
1.1.1 Tools . . . . . . . . . . . . . . . . . . . . . . . . . . . .5
1.1.2 How to use the tools. . . . . . . . . . . . . . . . . . . .5
1.2 How to write a document. . . . . . . . . . . . . . . . . . . . . .6
1.2.1 The main document. . . . . . . . . . . . . . . . . . . . .6
1.2.2 Chapters . . . . . . . . . . . . . . . . . . . . . . . . . .6
1.2.3 Spell-checking. . . . . . . . . . . . . . . . . . . . . . .6
1.3 LATEX and pdfLATEX capabilities. . . . . . . . . . . . . . . . . . .7
1.3.1 Overview . . . . . . . . . . . . . . . . . . . . . . . . . .7
1.3.2 LATEX . . . . . . . . . . . . . . . . . . . . . . . . . . . .7
1.3.3 pdfLATEX . . . . . . . . . . . . . . . . . . . . . . . . . .7
1.3.4 Examples . . . . . . . . . . . . . . . . . . . . . . . . . .7
3",0.0054230690002441,latex_pdf.pdf ~ 2,"
2
",0.0,0.0,842,0.0,0.0,865,0.0,0.0,842
43,3.0,latex_pdf.pdf ~ 3,4 CONTENTS,0.0002980232238769,"4
CONTENTS
",0.0004646778106689,4 CONTENTS,0.0003061294555664,latex_pdf.pdf ~ 3,"
Contents
1 Template 5
1.1 How to compile a .tex file to a .pdf file . . . . . . . . . . . . . 5
1.1.1 Tools . . . . . . . . . . . . . . . . . . . . . . . . . . . . 5
1.1.2 How to use the tools . . . . . . . . . . . . . . . . . . . . 5
1.2 How to write a document . . . . . . . . . . . . . . . . . . . . . . 6
1.2.1 The main document . . . . . . . . . . . . . . . . . . . . . 6
1.2.2 Chapters . . . . . . . . . . . . . . . . . . . . . . . . . . 6
1.2.3 Spell-checking . . . . . . . . . . . . . . . . . . . . . . . 6
1.3 LATEX and pdfLATEX capabilities . . . . . . . . . . . . . . . . . . . 7
1.3.1 Overview . . . . . . . . . . . . . . . . . . . . . . . . . . 7
1.3.2 LATEX . . . . . . . . . . . . . . . . . . . . . . . . . . . . 7
1.3.3 pdfLATEX . . . . . . . . . . . . . . . . . . . . . . . . . . 7
1.3.4 Examples . . . . . . . . . . . . . . . . . . . . . . . . . . 7
3
",0.0,0.0,865,0.0,0.0,864,0.0,0.0,865
44,4.0,latex_pdf.pdf ~ 4,"Chapter 1
Template
1.1 How to compile a.texﬁle to a.pdfﬁle
1.1.1 Tools
To process the ﬁles you (may) need:
•pdflatex(for example fromtetexpackage≥0.9-6, which you can
get fromRed Hat 5.2);
•acroread(a PDF viewer, available fromhttp://www.adobe.com/);
•ghostscript≥5.10(for example fromRed Hat Contrib) andghostview
orgv(from RedHat Linux);
•efaxpackage could be useful, if you plan to fax documents.
1.1.2 How to use the tools
Follow these steps:
1. put all source.texﬁles in one directory, then chdir to the directory (or put
some of them in the LATEXsearch path — if you know how to do this);
2. run “pdflatex file.tex” on the main ﬁle of the document three times
(three — to prepare valid table of contents);
3. to see or print the result useacroread(unfortunately some versions of
acroreadmay produce PostScript which is too complex), or
5",0.003709077835083,"Chapter 1
Template
1.1
How to compile a .tex ﬁle to a .pdf ﬁle
1.1.1
Tools
To process the ﬁles you (may) need:
• pdflatex (for example from tetex package ≥0.9-6, which you can
get from Red Hat 5.2);
• acroread (a PDF viewer, available from http://www.adobe.com/);
• ghostscript ≥5.10 (for example from Red Hat Contrib) and ghostview
or gv (from RedHat Linux);
• efax package could be useful, if you plan to fax documents.
1.1.2
How to use the tools
Follow these steps:
1. put all source .tex ﬁles in one directory, then chdir to the directory (or put
some of them in the LATEXsearch path — if you know how to do this);
2. run “pdflatex file.tex” on the main ﬁle of the document three times
(three — to prepare valid table of contents);
3. to see or print the result use acroread (unfortunately some versions of
acroread may produce PostScript which is too complex), or
5
",0.0024483203887939,"Chapter 1
Template
1.1 How to compile a.texﬁle to a.pdfﬁle
1.1.1 Tools
To process the ﬁles you (may) need:
•pdflatex(for example fromtetexpackage≥0.9-6, which you can
get fromRed Hat 5.2);
•acroread(a PDF viewer, available fromhttp://www.adobe.com/);
•ghostscript≥5.10(for example fromRed Hat Contrib) andghostview
orgv(from RedHat Linux);
•efaxpackage could be useful, if you plan to fax documents.
1.1.2 How to use the tools
Follow these steps:
1. put all source.texﬁles in one directory, then chdir to the directory (or put
some of them in the LATEXsearch path — if you know how to do this);
2. run “pdflatex file.tex” on the main ﬁle of the document three times
(three — to prepare valid table of contents);
3. to see or print the result useacroread(unfortunately some versions of
acroreadmay produce PostScript which is too complex), or
5",0.0036702156066894,latex_pdf.pdf ~ 4,"
4 CONTENTS
",0.0,0.0,836,0.0,0.0,864,0.0,0.0,836
45,5.0,latex_pdf.pdf ~ 5,"6 CHAPTER 1. TEMPLATE
4. runghostscript: “gv file.pdf” to display or:
“gs -dNOPAUSE -sDEVICE=pswrite -q -dBATCH -sOutputFile=ﬁle.ps ﬁle.pdf”
to produce a PostScript ﬁle;
5. run “fax send phone-number file.ps” as root to send a fax, or — if you
know how to do this — modify thefaxscript to be able to fax.pdfﬁles directly
(you have to insert “|%PDF*” somewhere. . . ).
1.2 How to write a document
1.2.1 The main document
Choose the name of the document, saydocument. Copy template.texto
document.tex, then edit it, change the title, the authors and set proper in-
clude(s) for all the chapters.
1.2.2 Chapters
Each chapter should be included in the main document as a separate ﬁle. You can
choose any name for the ﬁle, but we suggest adding a sufﬁx to the name of the
main ﬁle. For our example we use the ﬁle namedocument_chapter1.tex.
First, copytemplate_chapter.texto document_chapter1.tex
and add the line
\include{document_chapter1}
in thedocument.tex, then editdocument_chapter1.tex, change the
chapter title and edit the body of the chapter appropriately.
1.2.3 Spell-checking
Do use a spell-checker, please!
You may also want to check grammar, style and so on. Actually you should
do it (if you have enough spare time). But youmust check spelling!
You can use theispellpackage for this, from withinemacs, or from the
command line:
ispell -t document_chapter1.tex",0.0038280487060546,"6
CHAPTER 1. TEMPLATE
4. run ghostscript: “gv file.pdf” to display or:
“gs -dNOPAUSE -sDEVICE=pswrite -q -dBATCH -sOutputFile=ﬁle.ps ﬁle.pdf”
to produce a PostScript ﬁle;
5. run “fax send phone-number file.ps” as root to send a fax, or — if you
know how to do this — modify the fax script to be able to fax .pdf ﬁles directly
(you have to insert “|%PDF*” somewhere. . .).
1.2
How to write a document
1.2.1
The main document
Choose the name of the document, say document. Copy template.tex to
document.tex, then edit it, change the title, the authors and set proper in-
clude(s) for all the chapters.
1.2.2
Chapters
Each chapter should be included in the main document as a separate ﬁle. You can
choose any name for the ﬁle, but we suggest adding a sufﬁx to the name of the
main ﬁle. For our example we use the ﬁle name document_chapter1.tex.
First, copy template_chapter.tex to document_chapter1.tex
and add the line
\include{document_chapter1}
in the document.tex, then edit document_chapter1.tex, change the
chapter title and edit the body of the chapter appropriately.
1.2.3
Spell-checking
Do use a spell-checker, please!
You may also want to check grammar, style and so on. Actually you should
do it (if you have enough spare time). But you must check spelling!
You can use the ispell package for this, from within emacs, or from the
command line:
ispell -t document_chapter1.tex
",0.00266695022583,"6 CHAPTER 1. TEMPLATE
4. runghostscript: “gv file.pdf” to display or:
“gs -dNOPAUSE -sDEVICE=pswrite -q -dBATCH -sOutputFile=ﬁle.ps ﬁle.pdf”
to produce a PostScript ﬁle;
5. run “fax send phone-number file.ps” as root to send a fax, or — if you
know how to do this — modify thefaxscript to be able to fax.pdfﬁles directly
(you have to insert “|%PDF*” somewhere. . . ).
1.2 How to write a document
1.2.1 The main document
Choose the name of the document, saydocument. Copy template.texto
document.tex, then edit it, change the title, the authors and set proper in-
clude(s) for all the chapters.
1.2.2 Chapters
Each chapter should be included in the main document as a separate ﬁle. You can
choose any name for the ﬁle, but we suggest adding a sufﬁx to the name of the
main ﬁle. For our example we use the ﬁle namedocument_chapter1.tex.
First, copytemplate_chapter.texto document_chapter1.tex
and add the line
\include{document_chapter1}
in thedocument.tex, then editdocument_chapter1.tex, change the
chapter title and edit the body of the chapter appropriately.
1.2.3 Spell-checking
Do use a spell-checker, please!
You may also want to check grammar, style and so on. Actually you should
do it (if you have enough spare time). But youmust check spelling!
You can use theispellpackage for this, from withinemacs, or from the
command line:
ispell -t document_chapter1.tex",0.0038237571716308,latex_pdf.pdf ~ 5,"
Chapter 1
Template
1.1 How to compile a .tex file to a .pdf file
1.1.1 Tools
To process the files you (may) need:
• pdflatex (for example from tetex package ≥0.9-6, which you can
get from Red Hat 5.2);
• acroread (a PDF viewer, available from http://www.adobe.com/);
• ghostscript ≥5.10 (for example from Red Hat Contrib) and ghostview
or gv (from RedHat Linux);
• efax package could be useful, if you plan to fax documents.
1.1.2 How to use the tools
Follow these steps:
1. put all source .tex files in one directory, then chdir to the directory (or put
some of them in the LATEXsearch path — if you know how to do this);
2. run “pdflatex file.tex” on the main file of the document three times
(three — to prepare valid table of contents);
3. to see or print the result use acroread (unfortunately some versions of
acroread may produce PostScript which is too complex), or
5
",0.04903700728972376,0.1206896551724138,1037,0.04764929430660564,0.13304721030042918,1045,0.04903700728972376,0.1206896551724138,1037
46,6.0,latex_pdf.pdf ~ 6,"1.3. LATEX AND PDFL ATEX CAPABILITIES 7
1.3 LATEX and pdfLATEX capabilities
1.3.1 Overview
First you edit your source.texﬁle. In LATEX you compile it using thelatex
command to a.dviﬁle (which stands for device-independent). The.dviﬁle
can be converted to any device-dependent format you like using an appropriate
driver, for exampledvips.
When producing.pdfﬁles you should usepdflatex, which produces di-
rectly.pdfﬁles out of.texsources. Note that in the.texﬁle you may need
to use some PDF speciﬁc packages.
For viewing.texﬁles use your favourite text editor, for viewing.dviﬁles
under X Window System usexdvicommand, .psﬁles can be viewed withgv
(orghostview) and.pdfﬁles withacroread,gvorxpdf.
1.3.2 LATEX
A lot of examples can be found in this document.
You should also print
•doc/latex/general/latex2e.dviand
•doc/latex/general/lshort2e.dvi
from yourtetexdistribution (usually in
•/usr/share/texmfor
•/usr/lib/texmf/texmf).
1.3.3 pdfLATEX
Consultdoc/pdftex/manual.pdffrom yourtetexdistribution for more
details. Very useful informations can be found in thehyperrefand graphics
package manuals:
•doc/latex/hyperref/manual.pdfand
•doc/latex/graphics/grfguide.dvi.
1.3.4 Examples
References
MIMUW",0.0051031112670898,"1.3. LATEX AND PDFLATEX CAPABILITIES
7
1.3
LATEX and pdfLATEX capabilities
1.3.1
Overview
First you edit your source .tex ﬁle. In LATEX you compile it using the latex
command to a .dvi ﬁle (which stands for device-independent). The .dvi ﬁle
can be converted to any device-dependent format you like using an appropriate
driver, for example dvips.
When producing .pdf ﬁles you should use pdflatex, which produces di-
rectly .pdf ﬁles out of .tex sources. Note that in the .tex ﬁle you may need
to use some PDF speciﬁc packages.
For viewing .tex ﬁles use your favourite text editor, for viewing .dvi ﬁles
under X Window System use xdvi command, .ps ﬁles can be viewed with gv
(or ghostview) and .pdf ﬁles with acroread, gv or xpdf.
1.3.2
LATEX
A lot of examples can be found in this document.
You should also print
• doc/latex/general/latex2e.dvi and
• doc/latex/general/lshort2e.dvi
from your tetex distribution (usually in
• /usr/share/texmf or
• /usr/lib/texmf/texmf).
1.3.3
pdfLATEX
Consult doc/pdftex/manual.pdf from your tetex distribution for more
details. Very useful informations can be found in the hyperref and graphics
package manuals:
• doc/latex/hyperref/manual.pdf and
• doc/latex/graphics/grfguide.dvi.
1.3.4
Examples
References
MIMUW
",0.001866340637207,"1.3. LATEX AND PDFL ATEX CAPABILITIES 7
1.3 LATEX and pdfLATEX capabilities
1.3.1 Overview
First you edit your source.texﬁle. In LATEX you compile it using thelatex
command to a.dviﬁle (which stands for device-independent). The.dviﬁle
can be converted to any device-dependent format you like using an appropriate
driver, for exampledvips.
When producing.pdfﬁles you should usepdflatex, which produces di-
rectly.pdfﬁles out of.texsources. Note that in the.texﬁle you may need
to use some PDF speciﬁc packages.
For viewing.texﬁles use your favourite text editor, for viewing.dviﬁles
under X Window System usexdvicommand, .psﬁles can be viewed withgv
(orghostview) and.pdfﬁles withacroread,gvorxpdf.
1.3.2 LATEX
A lot of examples can be found in this document.
You should also print
•doc/latex/general/latex2e.dviand
•doc/latex/general/lshort2e.dvi
from yourtetexdistribution (usually in
•/usr/share/texmfor
•/usr/lib/texmf/texmf).
1.3.3 pdfLATEX
Consultdoc/pdftex/manual.pdffrom yourtetexdistribution for more
details. Very useful informations can be found in thehyperrefand graphics
package manuals:
•doc/latex/hyperref/manual.pdfand
•doc/latex/graphics/grfguide.dvi.
1.3.4 Examples
References
MIMUW",0.004364013671875,latex_pdf.pdf ~ 6,"
6 CHAPTER 1. TEMPLATE
4. run ghostscript: “gv file.pdf” to display or:
“gs -dNOPAUSE -sDEVICE=pswrite -q -dBATCH -sOutputFile=file.ps file.pdf”
to produce a PostScript file;
5. run “fax send phone-number file.ps” as root to send a fax, or — if you
know how to do this — modify the fax script to be able to fax .pdf files directly
(you have to insert “|%PDF*” somewhere. . . ).
1.2 How to write a document
1.2.1 The main document
Choose the name of the document, say document. Copy template.tex to
document.tex, then edit it, change the title, the authors and set proper in-
clude(s) for all the chapters.
1.2.2 Chapters
Each chapter should be included in the main document as a separate file. You can
choose any name for the file, but we suggest adding a suffix to the name of the
main file. For our example we use the file name document_chapter1.tex.
First, copy template_chapter.tex to document_chapter1.tex
and add the line
\include{document_chapter1}
in the document.tex, then edit document_chapter1.tex, change the
chapter title and edit the body of the chapter appropriately.
1.2.3 Spell-checking
Do use a spell-checker, please!
You may also want to check grammar, style and so on. Actually you should
do it (if you have enough spare time). But you must check spelling!
You can use the ispell package for this, from within emacs, or from the
command line:
ispell -t document_chapter1.tex
",0.002896220876281639,0.09016393442622951,1111,0.004688157151505825,0.112,1107,0.002896220876281639,0.09016393442622951,1111
47,7.0,latex_pdf.pdf ~ 7,"8 CHAPTER 1. TEMPLATE
Hyperlinks
This is a target.
And this is a link.
Dashes, etc.
There are three kinds of horizontal dash:
•- (use inside words; for example “home-page”, “X-rated”)
•– (use this one between numbers; for example “pages 2–22”)
•— (use this one as a sentence separator — like here)
National characters
•ó, é, í, . . .
•è, à, ì, . . .
•ô, ê, . . .
•õ, ñ, . . .
•ö, ë, . . .
• ˙ z
• ˛ a, ˛ e
•ł, ø, ß
There are other ways to do this, see the documentation forinputencpack-
age.
Reserved characters
Some characters have some special meaning, thus cannot be entered in the usual
way.
•$ & % # _ { }
•\
•˜ ˆ",0.0031180381774902,"8
CHAPTER 1. TEMPLATE
Hyperlinks
This is a target.
And this is a link.
Dashes, etc.
There are three kinds of horizontal dash:
• - (use inside words; for example “home-page”, “X-rated”)
• – (use this one between numbers; for example “pages 2–22”)
• — (use this one as a sentence separator — like here)
National characters
• ó, é, í, ...
• è, à, ì, .. .
• ô, ê, .. .
• õ, ñ, . ..
• ö, ë, .. .
• ˙z
• ˛a, ˛e
• ł, ø, ß
There are other ways to do this, see the documentation for inputenc pack-
age.
Reserved characters
Some characters have some special meaning, thus cannot be entered in the usual
way.
• $ & % # _ { }
• \
• ˜ ˆ
",0.000640869140625,"8 CHAPTER 1. TEMPLATE
Hyperlinks
This is a target.
And this is a link.
Dashes, etc.
There are three kinds of horizontal dash:
•- (use inside words; for example “home-page”, “X-rated”)
•– (use this one between numbers; for example “pages 2–22”)
•— (use this one as a sentence separator — like here)
National characters
•ó, é, í, . . .
•è, à, ì, . . .
•ô, ê, . . .
•õ, ñ, . . .
•ö, ë, . . .
• ˙ z
• ˛ a, ˛ e
•ł, ø, ß
There are other ways to do this, see the documentation forinputencpack-
age.
Reserved characters
Some characters have some special meaning, thus cannot be entered in the usual
way.
•$ & % # _ { }
•\
•˜ ˆ",0.0034809112548828,latex_pdf.pdf ~ 7,"
1.3. LATEX AND PDFLATEX CAPABILITIES 7
1.3 LATEX and pdfLATEX capabilities
1.3.1 Overview
First you edit your source .tex file. In LATEX you compile it using the latex
command to a .dvi file (which stands for device-independent). The .dvi file
can be converted to any device-dependent format you like using an appropriate
driver, for example dvips.
When producing .pdf files you should use pdflatex, which produces di-
rectly .pdf files out of .tex sources. Note that in the .tex file you may need
to use some PDF specific packages.
For viewing .tex files use your favourite text editor, for viewing .dvi files
under X Window System use xdvi command, .ps files can be viewed with gv
(or ghostview) and .pdf files with acroread, gv or xpdf.
1.3.2 LATEX
A lot of examples can be found in this document.
You should also print
• doc/latex/general/latex2e.dvi and
• doc/latex/general/lshort2e.dvi
from your tetex distribution (usually in
• /usr/share/texmf or
• /usr/lib/texmf/texmf).
1.3.3 pdfLATEX
Consult doc/pdftex/manual.pdf from your tetex distribution for more
details. Very useful informations can be found in the hyperref and graphics
package manuals:
• doc/latex/hyperref/manual.pdf and
• doc/latex/graphics/grfguide.dvi.
1.3.4 Examples
References
MIMUW
",0.0036025439813157922,0.056074766355140186,986,0.003934569109731639,0.056074766355140186,983,0.0036025439813157922,0.056074766355140186,986
48,8.0,latex_pdf.pdf ~ 8,"1.3. LATEX AND PDFL ATEX CAPABILITIES 9
Math
•12,12n, . . .
•i1,i2n, . . .
• 1
2 , 2n
2−3 , . . .
•α,β,γ,Ω, . . .
•→,⇒,≥,̸=,∈,⋆, . . .
•
√
2, . . .
•2 + 2, . . .
For more examples and symbols see chapter 3 oflshort2e.dvi.
Fonts
•Roman
•Emphasis
•Medium weight — the default
•Boldface
•Upright
•Slanted
•Sans serif
• SMALL CAPS
•Typewriter
•and sizes:
– tiny
– scriptsize
– footnotesize
– small
– normalsize",0.0058848857879638,"1.3. LATEX AND PDFLATEX CAPABILITIES
9
Math
• 12, 12n, . ..
• i1, i2n, . ..
•
1
2,
2n
2−3, ...
• α, β, γ, Ω, ...
• →, ⇒, ≥, ̸=, ∈, ⋆, ...
•
√
2, . ..
• 2 + 2, ...
For more examples and symbols see chapter 3 of lshort2e.dvi.
Fonts
• Roman
• Emphasis
• Medium weight — the default
• Boldface
• Upright
• Slanted
• Sans serif
• SMALL CAPS
• Typewriter
• and sizes:
–
tiny
– scriptsize
– footnotesize
– small
– normalsize
",0.0032908916473388,"1.3. LATEX AND PDFL ATEX CAPABILITIES 9
Math
•12,12n, . . .
•i1,i2n, . . .
• 1
2 , 2n
2−3 , . . .
•α,β,γ,Ω, . . .
•→,⇒,≥,̸=,∈,⋆, . . .
•
√
2, . . .
•2 + 2, . . .
For more examples and symbols see chapter 3 oflshort2e.dvi.
Fonts
•Roman
•Emphasis
•Medium weight — the default
•Boldface
•Upright
•Slanted
•Sans serif
• SMALL CAPS
•Typewriter
•and sizes:
– tiny
– scriptsize
– footnotesize
– small
– normalsize",0.006458044052124,latex_pdf.pdf ~ 8,"
8 CHAPTER 1. TEMPLATE
Hyperlinks
This is a target.
And this is a link.
Dashes, etc.
There are three kinds of horizontal dash:
• - (use inside words; for example “home-page”, “X-rated”)
• – (use this one between numbers; for example “pages 2–22”)
• — (use this one as a sentence separator — like here)
National characters
• ó, é, í, . . .
• è, à, ì, . . .
• ô, ê, . . .
• õ, ñ, . . .
• ö, ë, . . .
•  ̇z
•  ̨a,  ̨e
• ł, ø, ß
There are other ways to do this, see the documentation for inputenc pack-
age.
Reserved characters
Some characters have some special meaning, thus cannot be entered in the usual
way.
• $ & % # _ { }
• \
•  ̃ ˆ
",0.04795336645403359,0.04081632653061224,511,0.0025382544242827177,0.04516129032258064,505,0.04795336645403359,0.04081632653061224,511
49,9.0,latex_pdf.pdf ~ 9,"10 CHAPTER 1. TEMPLATE
– large
– Large
– LARGE
– huge
– Huge",0.0010700225830078,"10
CHAPTER 1. TEMPLATE
– large
– Large
– LARGE
– huge
– Huge
",0.0012969970703125,"10 CHAPTER 1. TEMPLATE
– large
– Large
– LARGE
– huge
– Huge",0.0011367797851562,latex_pdf.pdf ~ 9,"
1.3. LATEX AND PDFLATEX CAPABILITIES 9
Math
• 12, 12n, . . .
• i1, i2n, . . .
• 1
2 , 2n
2−3 , . . .
• α, β, γ, Ω, . . .
• →, ⇒, ≥, 6=, ∈, ?, . . .
• √2, . . .
• 2 + 2, . . .
For more examples and symbols see chapter 3 of lshort2e.dvi.
Fonts
• Roman
• Emphasis
• Medium weight — the default
• Boldface
• Upright
• Slanted
• Sans serif
• SMALL CAPS
• Typewriter
• and sizes:
– tiny
– scriptsize
– footnotesize
– small
– normalsize
",2.783716284734886e-05,0.0136986301369863,395,2.783716284734886e-05,0.0136986301369863,394,2.783716284734886e-05,0.0136986301369863,395
51,1.0,basketball_pdf.pdf ~ 1,"FromPeachBasketstoGlobalPhenomenon
ThestorybeginsinSpringfield, Massachusetts, 1891. Dr. JamesNaismith'ssimpleinventionof nailingpeachbasketstoagymnasiumwall hasevolvedintosomethingextraordinary.Today'sbasketball landscapeshowcasesasport that hasbrokenfreefromitsAmericanroots, becomingacultural forcethat bridgescontinentsandcultures. Thistransformationreflectsnot just athleticevolution, but abroaderstoryof global connectivityandsharedpassion.
TheNewFaceofProfessionalBasketball
TheNBA'stransformationtellsacompellingstoryof basketball'sglobalization. GonearethedayswhentheleaguewaspredominantlyAmerican. Today'sNBAfeaturestranscendentinternational talentslikeNikolaJokić, Joel Embiid, andGiannisAntetokounmpo–playerswhohaveredefinedexcellenceinthesport. Theirsuccessrepresentsmorethanindividualachievement; it symbolizesbasketball'spowertodiscoverandnurturetalent regardlessoforigin.
NumbersThatSpeakVolumes
Thestatisticspaint avividpictureof basketball'sglobal reach. FIBA'slatest reportsindicatethat over450millionpeopleactivelyplaybasketball worldwide. TheNBA'sglobal broadcastreaches215countriesandterritoriesin47languages. Inthe2023-24season, 125international playersfrom40countriesgracedNBArostersonopeningnight. Perhapsmoststrikingly, Chinaaloneboasts300millionbasketball players–anumberthat exceedstheentireU.S. population.
WomenBreakingBarriers
Thewomen'sgamehaswrittenitsownremarkablechapterinbasketball'sglobal story. TheWNBAcontinuestoexpanditsinternational influence, withstarslikeJonquel JonesandEziMagbegorleadingthecharge. AsWNBACommissionerCathyEngelbert notes, ""Women'sbasketball isexperiencingunprecedentedgrowth.""Thisgrowthmanifestsinincreasedviewership, engagement, andparticipationacrossdemographics, creatingnewrolemodelsforaspiringfemaleathletesworldwide.
2
",0.0258917808532714,"From Peach Baskets to Global Phenomenon
The story begins in Springfield, Massachusetts, 1891. Dr. James Naismith's simple invention
of nailing peach baskets to a gymnasium wall has evolved into something extraordinary.
Today's basketball landscape showcases a sport that has broken free from its American
roots, becoming a cultural force that bridges continents and cultures. This transformation
reflects not just athletic evolution, but a broader story of global connectivity and shared
passion.
The New Face of Professional Basketball
The NBA's transformation tells a compelling story of basketball's globalization. Gone are the
days when the league was predominantly American. Today's NBA features transcendent
international talents like Nikola Jokić, Joel Embiid, and Giannis Antetokounmpo – players
who have redefined excellence in the sport. Their success represents more than individual
achievement; it symbolizes basketball's power to discover and nurture talent regardless of
origin.
Numbers That Speak Volumes
The statistics paint a vivid picture of basketball's global reach. FIBA's latest reports indicate
that over 450 million people actively play basketball worldwide. The NBA's global broadcast
reaches 215 countries and territories in 47 languages. In the 2023-24 season, 125
international players from 40 countries graced NBA rosters on opening night. Perhaps most
strikingly, China alone boasts 300 million basketball players – a number that exceeds the
entire U.S. population.
Women Breaking Barriers
The women's game has written its own remarkable chapter in basketball's global story. The
WNBA continues to expand its international influence, with stars like Jonquel Jones and Ezi
Magbegor leading the charge. As WNBA Commissioner Cathy Engelbert notes, ""Women's
basketball is experiencing unprecedented growth."" This growth manifests in increased
viewership, engagement, and participation across demographics, creating new role models
for aspiring female athletes worldwide.
2
",0.0026991367340087,"FromPeachBasketstoGlobalPhenomenon
ThestorybeginsinSpringfield, Massachusetts, 1891. Dr. JamesNaismith'ssimpleinventionof nailingpeachbasketstoagymnasiumwall hasevolvedintosomethingextraordinary.Today'sbasketball landscapeshowcasesasport that hasbrokenfreefromitsAmericanroots, becomingacultural forcethat bridgescontinentsandcultures. Thistransformationreflectsnot just athleticevolution, but abroaderstoryof global connectivityandsharedpassion.
TheNewFaceofProfessionalBasketball
TheNBA'stransformationtellsacompellingstoryof basketball'sglobalization. GonearethedayswhentheleaguewaspredominantlyAmerican. Today'sNBAfeaturestranscendentinternational talentslikeNikolaJokić, Joel Embiid, andGiannisAntetokounmpo–playerswhohaveredefinedexcellenceinthesport. Theirsuccessrepresentsmorethanindividualachievement; it symbolizesbasketball'spowertodiscoverandnurturetalent regardlessoforigin.
NumbersThatSpeakVolumes
Thestatisticspaint avividpictureof basketball'sglobal reach. FIBA'slatest reportsindicatethat over450millionpeopleactivelyplaybasketball worldwide. TheNBA'sglobal broadcastreaches215countriesandterritoriesin47languages. Inthe2023-24season, 125international playersfrom40countriesgracedNBArostersonopeningnight. Perhapsmoststrikingly, Chinaaloneboasts300millionbasketball players–anumberthat exceedstheentireU.S. population.
WomenBreakingBarriers
Thewomen'sgamehaswrittenitsownremarkablechapterinbasketball'sglobal story. TheWNBAcontinuestoexpanditsinternational influence, withstarslikeJonquel JonesandEziMagbegorleadingthecharge. AsWNBACommissionerCathyEngelbert notes, ""Women'sbasketball isexperiencingunprecedentedgrowth.""Thisgrowthmanifestsinincreasedviewership, engagement, andparticipationacrossdemographics, creatingnewrolemodelsforaspiringfemaleathletesworldwide.
2
",0.0268669128417968,basketball_pdf.pdf ~ 1,"
The Global Game: Basketball's Unifying Power in the Modern Era


From Peach Baskets to Global Phenomenon
The New Face of Professional Basketball
Numbers That Speak Volumes
Women Breaking Barriers
The Economic Slam Dunk
Technology: The Game Changer
Youth Development: Planting Seeds for Tomorrow
Urban Renaissance Through Basketball
The Future Game
Conclusion: More Than Just a Game


























",0.0,0.0,1526,0.056001217522415866,0.0970464135021097,1712,0.0,0.0,1526
52,2.0,basketball_pdf.pdf ~ 2,"TheEconomicSlamDunk
Basketball'seconomicimpact extendsfarbeyondticket salesandbroadcastingrights. TheNBA'srevenuereached$10billioninthe2022-24season, withinternational marketsplayinganincreasinglyvital role. Thesport hascreatedeconomicecosystemsindevelopingnationsthroughtourism, youthprograms, andmerchandisesales. Investment inbasketballinfrastructureworldwidehasledtotheemergenceof prestigiouscompetitionslikeEurope'sEuroLeagueandtheAfricanBasketball League.
Technology:TheGameChanger
Moderntechnologyhasrevolutionizedhowbasketball isplayed, watched, andanalyzed.Advancedanalyticshavebecomedemocratized, allowingteamsworldwidetoaccesssophisticatedperformancemetrics. Social mediahastransformedplayerdiscovery, enablingtalentsfromremoteregionstogainglobal visibility. Virtual realityexperiencesanddigitalstreaminghavebrought fansclosertothegamethaneverbefore, creatingnewwaystoexperienceandappreciatebasketball.
YouthDevelopment:PlantingSeedsforTomorrow
Basketball'sroleinyouthdevelopment extendsbeyondthecourt. ProgramslikeBasketballWithout BordersandJr. NBAreachmillionsof youngpeopleannually, focusingnot just onathleticskillsbut onbuildingcharacter, leadership, andglobal understanding. AsCraigBrown, directorof international youthprograms, explains, ""We'rebuildingconfidence,leadershipskills, andglobal understandingthroughsport.""
3
",0.0188419818878173,"The Economic Slam Dunk
Basketball's economic impact extends far beyond ticket sales and broadcasting rights. The
NBA's revenue reached $10 billion in the 2022-24 season, with international markets playing
an increasingly vital role. The sport has created economic ecosystems in developing nations
through tourism, youth programs, and merchandise sales. Investment in basketball
infrastructure worldwide has led to the emergence of prestigious competitions like Europe's
EuroLeague and the African Basketball League.
Technology: The Game Changer
Modern technology has revolutionized how basketball is played, watched, and analyzed.
Advanced analytics have become democratized, allowing teams worldwide to access
sophisticated performance metrics. Social media has transformed player discovery, enabling
talents from remote regions to gain global visibility. Virtual reality experiences and digital
streaming have brought fans closer to the game than ever before, creating new ways to
experience and appreciate basketball.
Youth Development: Planting Seeds for Tomorrow
Basketball's role in youth development extends beyond the court. Programs like Basketball
Without Borders and Jr. NBA reach millions of young people annually, focusing not just on
athletic skills but on building character, leadership, and global understanding. As Craig
Brown, director of international youth programs, explains, ""We're building confidence,
leadership skills, and global understanding through sport.""
3
",0.0014789104461669,"TheEconomicSlamDunk
Basketball'seconomicimpact extendsfarbeyondticket salesandbroadcastingrights. TheNBA'srevenuereached$10billioninthe2022-24season, withinternational marketsplayinganincreasinglyvital role. Thesport hascreatedeconomicecosystemsindevelopingnationsthroughtourism, youthprograms, andmerchandisesales. Investment inbasketballinfrastructureworldwidehasledtotheemergenceof prestigiouscompetitionslikeEurope'sEuroLeagueandtheAfricanBasketball League.
Technology:TheGameChanger
Moderntechnologyhasrevolutionizedhowbasketball isplayed, watched, andanalyzed.Advancedanalyticshavebecomedemocratized, allowingteamsworldwidetoaccesssophisticatedperformancemetrics. Social mediahastransformedplayerdiscovery, enablingtalentsfromremoteregionstogainglobal visibility. Virtual realityexperiencesanddigitalstreaminghavebrought fansclosertothegamethaneverbefore, creatingnewwaystoexperienceandappreciatebasketball.
YouthDevelopment:PlantingSeedsforTomorrow
Basketball'sroleinyouthdevelopment extendsbeyondthecourt. ProgramslikeBasketballWithout BordersandJr. NBAreachmillionsof youngpeopleannually, focusingnot just onathleticskillsbut onbuildingcharacter, leadership, andglobal understanding. AsCraigBrown, directorof international youthprograms, explains, ""We'rebuildingconfidence,leadershipskills, andglobal understandingthroughsport.""
3
",0.018395185470581,basketball_pdf.pdf ~ 2,"
From Peach Baskets to Global Phenomenon
The story begins in Springfield, Massachusetts, 1891. Dr. James Naismith's simple invention of nailing peach baskets to a gymnasium wall has evolved into something extraordinary. Today's basketball landscape showcases a sport that has broken free from its American roots, becoming a cultural force that bridges continents and cultures. This transformation reflects not just athletic evolution, but a broader story of global connectivity and shared passion.
The New Face of Professional Basketball
The NBA's transformation tells a compelling story of basketball's globalization. Gone are the days when the league was predominantly American. Today's NBA features transcendent international talents like Nikola Jokić, Joel Embiid, and Giannis Antetokounmpo – players who have redefined excellence in the sport. Their success represents more than individual achievement; it symbolizes basketball's power to discover and nurture talent regardless of origin.

Numbers That Speak Volumes
The statistics paint a vivid picture of basketball's global reach. FIBA's latest reports indicate that over 450 million people actively play basketball worldwide. The NBA's global broadcast reaches 215 countries and territories in 47 languages. In the 2023-24 season, 125 international players from 40 countries graced NBA rosters on opening night. Perhaps most strikingly, China alone boasts 300 million basketball players – a number that exceeds the entire U.S. population.
Women Breaking Barriers
The women's game has written its own remarkable chapter in basketball's global story. The WNBA continues to expand its international influence, with stars like Jonquel Jones and Ezi Magbegor leading the charge. As WNBA Commissioner Cathy Engelbert notes, ""Women's basketball is experiencing unprecedented growth."" This growth manifests in increased viewership, engagement, and participation across demographics, creating new role models for aspiring female athletes worldwide.

",5.6684091482385315e-05,0.007692307692307693,1523,0.004480938760270248,0.10240963855421686,1488,5.6684091482385315e-05,0.007692307692307693,1523
53,3.0,basketball_pdf.pdf ~ 3,"UrbanRenaissanceThroughBasketball
Thesport'simpact onurbandevelopment deservesspecial attention. Basketball courtshavebecomeessential componentsof urbanplanningworldwide, servingascommunityhubsthatpromotesocial interactionandyouthengagement. FromHarlem'sRuckerParktoManila'sTondodistrict, thesespacestranscendtheirathleticpurposetobecomecentersofcommunitylifeandcultural exchange.
TheFutureGame
Lookingahead, basketball'strajectorysuggestscontinuedgrowthandevolution. Thesport'saccessibility, adaptabilitytolocal cultures, andabilitytounitepeopleacrossbackgroundspositionit uniquelyforfutureexpansion. Theriseof 3x3basketball asanOlympicsportopensnewcompetitiveavenuesfornationswithlimitedresources, whiletechnologicalinnovationspromisetomakethegameevenmoreengagingandaccessible.
Conclusion:MoreThanJustaGame
Basketball'sglobal journeyfromhumblebeginningstoworldwidephenomenondemonstratesthesport'suniqueabilitytotranscendcultural boundaries. Asthegamecontinuestoevolve,itspowertoinspire, unite, andtransformlivesremainsconstant. Ingymnasiums,playgrounds, andarenasacrosstheworld, basketball continuestowritenewchaptersinitsremarkablestoryof global impact andcultural unity
4
",0.0167648792266845,"Urban Renaissance Through Basketball
The sport's impact on urban development deserves special attention. Basketball courts have
become essential components of urban planning worldwide, serving as community hubs that
promote social interaction and youth engagement. From Harlem's Rucker Park to Manila's
Tondo district, these spaces transcend their athletic purpose to become centers of
community life and cultural exchange.
The Future Game
Looking ahead, basketball's trajectory suggests continued growth and evolution. The sport's
accessibility, adaptability to local cultures, and ability to unite people across backgrounds
position it uniquely for future expansion. The rise of 3x3 basketball as an Olympic sport
opens new competitive avenues for nations with limited resources, while technological
innovations promise to make the game even more engaging and accessible.
Conclusion: More Than Just a Game
Basketball's global journey from humble beginnings to worldwide phenomenon demonstrates
the sport's unique ability to transcend cultural boundaries. As the game continues to evolve,
its power to inspire, unite, and transform lives remains constant. In gymnasiums,
playgrounds, and arenas across the world, basketball continues to write new chapters in its
remarkable story of global impact and cultural unity
4
",0.0012717247009277,"UrbanRenaissanceThroughBasketball
Thesport'simpact onurbandevelopment deservesspecial attention. Basketball courtshavebecomeessential componentsof urbanplanningworldwide, servingascommunityhubsthatpromotesocial interactionandyouthengagement. FromHarlem'sRuckerParktoManila'sTondodistrict, thesespacestranscendtheirathleticpurposetobecomecentersofcommunitylifeandcultural exchange.
TheFutureGame
Lookingahead, basketball'strajectorysuggestscontinuedgrowthandevolution. Thesport'saccessibility, adaptabilitytolocal cultures, andabilitytounitepeopleacrossbackgroundspositionit uniquelyforfutureexpansion. Theriseof 3x3basketball asanOlympicsportopensnewcompetitiveavenuesfornationswithlimitedresources, whiletechnologicalinnovationspromisetomakethegameevenmoreengagingandaccessible.
Conclusion:MoreThanJustaGame
Basketball'sglobal journeyfromhumblebeginningstoworldwidephenomenondemonstratesthesport'suniqueabilitytotranscendcultural boundaries. Asthegamecontinuestoevolve,itspowertoinspire, unite, andtransformlivesremainsconstant. Ingymnasiums,playgrounds, andarenasacrosstheworld, basketball continuestowritenewchaptersinitsremarkablestoryof global impact andcultural unity
4
",0.0177280902862548,basketball_pdf.pdf ~ 3,"
The Economic Slam Dunk
Basketball's economic impact extends far beyond ticket sales and broadcasting rights. The NBA's revenue reached $10 billion in the 2022-24 season, with international markets playing an increasingly vital role. The sport has created economic ecosystems in developing nations through tourism, youth programs, and merchandise sales. Investment in basketball infrastructure worldwide has led to the emergence of prestigious competitions like Europe's EuroLeague and the African Basketball League.
Technology: The Game Changer
Modern technology has revolutionized how basketball is played, watched, and analyzed. Advanced analytics have become democratized, allowing teams worldwide to access sophisticated performance metrics. Social media has transformed player discovery, enabling talents from remote regions to gain global visibility. Virtual reality experiences and digital streaming have brought fans closer to the game than ever before, creating new ways to experience and appreciate basketball.

Youth Development: Planting Seeds for Tomorrow
Basketball's role in youth development extends beyond the court. Programs like Basketball Without Borders and Jr. NBA reach millions of young people annually, focusing not just on athletic skills but on building character, leadership, and global understanding. As Craig Brown, director of international youth programs, explains, ""We're building confidence, leadership skills, and global understanding through sport.""
Urban Renaissance Through Basketball
The sport's impact on urban development deserves special attention. Basketball courts have become essential components of urban planning worldwide, serving as community hubs that promote social interaction and youth engagement. From Harlem's Rucker Park to Manila's Tondo district, these spaces transcend their athletic purpose to become centers of community life and cultural exchange.

The Future Game
Looking ahead, basketball's trajectory suggests continued growth and evolution. The sport's accessibility, adaptability to local cultures, and ability to unite people across backgrounds position it uniquely for future expansion. The rise of 3x3 basketball as an Olympic sport opens new competitive avenues for nations with limited resources, while technological innovations promise to make the game even more engaging and accessible.
Conclusion: More Than Just a Game
Basketball's global journey from humble beginnings to worldwide phenomenon demonstrates the sport's unique ability to transcend cultural boundaries. As the game continues to evolve, its power to inspire, unite, and transform lives remains constant. In gymnasiums, playgrounds, and arenas across the world, basketball continues to write new chapters in its remarkable story of global impact and cultural unity
",4.919381270169212e-06,0.03389830508474576,1633,0.3410470042838475,0.5227272727272727,1502,4.919381270169212e-06,0.03389830508474576,1633
55,1.0,notion_pdf.pdf ~ 1,"Gen AI Intr oduction  Not es
2
First early rendition of language 
models in the pre-deep learning era
Problems?
1. Seed text might not exist in the 
training data
2. Exact phrasing might not exist.
Talked about Neural networks..(don't 
need to know for class)",0.001788854598999,"Gen AI Introduction - Notes
2
First early rendition of language 
models in the pre-deep learning era
Problems?
1. Seed text might not exist in the 
training data
2. Exact phrasing might not exist.
Talked about Neural networks..(don't 
need to know for class)
",0.0003418922424316,"Gen AI Intr oduction  Not es
2
First early rendition of language 
models in the pre-deep learning era
Problems?
1. Seed text might not exist in the 
training data
2. Exact phrasing might not exist.
Talked about Neural networks..(don't 
need to know for class)",0.0018157958984375,notion_pdf.pdf ~ 1,"
What is GenAI?                          You give the AI some data, and using
                                        that data, that AI gives you whatever 
                                        you ask it for. Main thing to know is 
                                        that itʼs a field.

What is CHATGPT?                        A revolution that almost transformed 
                                        the way we interact with computers. 
                                        What are some of it's capabilities?
                                        -Web browsing
                                        - Advanced data analysis
                                        - Image processing
                                        - Voice interaction

What are the differences between        
ChapGPT, GPTs, and LLMS?                - Large language models that 
                                        basically understand and generate 
                                        natural language.
                                        - GPT's are a type of LLM.
                                        - ChatGPT is the application built on 
                                        GPT's

What is Natural Language
Processing?                             It's a field of the idea of computers 
                                        being able to understand language. 
                                        Divided into 3 main categories:
                                        1. Things like machine translation
                                        2. Things like human senses
                                        3. Things like text-to-speech and 
                                        automatic speech recognition

What is next word prediction?           Given a sequence of words, find the 
                                        next words. Essentially chooses the 
                                        next word in a sentence just by 
                                        filtering words with the highest 
                                        probability of occurring, and 
                                        choosing the top result.

",0.0008758456646662953,0.07432432432432433,2002,0.0007808542997826807,0.08275862068965517,2003,0.0008758456646662953,0.07432432432432433,2002
57,1.0,matplotlib_1-21_pdf.pdf ~ 1,,5.1975250244140625e-05,,4.6253204345703125e-05,,5.125999450683594e-05,matplotlib_1-21_pdf.pdf ~ 1,"
 John Hunter, Darren Dale, Eric Firing, Michael Droettboom and the m
Matplotlib
Release 2.0.2
May 10, 2017
",0.0,0.0,105,0.0,0.0,105,0.0,0.0,105
58,2.0,matplotlib_1-21_pdf.pdf ~ 2,"CONTENTS
I User’s Guide 1
1 Introduction 3
2 Installing 5
3 Tutorials 11
4 Working with text 97
5 Colors 145
6 Customizing matplotlib 173
7 Interactive plots 189
8 Selected Examples 205
9 What’s new in matplotlib 239
10 GitHub Stats 339
11 License 417
12 Credits 421
II The Matplotlib API 423
13 Plotting commands summary 425
14 API Changes 433
15 The top level matplotlib module 483
16 afm (Adobe Font Metrics interface) 487
17 animation module 491
i",0.0027892589569091,"CONTENTS
I
User’s Guide
1
1
Introduction
3
2
Installing
5
3
Tutorials
11
4
Working with text
97
5
Colors
145
6
Customizing matplotlib
173
7
Interactive plots
189
8
Selected Examples
205
9
What’s new in matplotlib
239
10 GitHub Stats
339
11 License
417
12 Credits
421
II
The Matplotlib API
423
13 Plotting commands summary
425
14 API Changes
433
15 The top level matplotlib module
483
16 afm (Adobe Font Metrics interface)
487
17 animation module
491
i
",0.0011961460113525,"CONTENTS
I User’s Guide 1
1 Introduction 3
2 Installing 5
3 Tutorials 11
4 Working with text 97
5 Colors 145
6 Customizing matplotlib 173
7 Interactive plots 189
8 Selected Examples 205
9 What’s new in matplotlib 239
10 GitHub Stats 339
11 License 417
12 Credits 421
II The Matplotlib API 423
13 Plotting commands summary 425
14 API Changes 433
15 The top level matplotlib module 483
16 afm (Adobe Font Metrics interface) 487
17 animation module 491
i",0.0027999877929687,matplotlib_1-21_pdf.pdf ~ 2,"

",0.0,0.0,449,0.0,0.0,450,0.0,0.0,449
59,3.0,matplotlib_1-21_pdf.pdf ~ 3,"18 artist Module 535
19 Axes class 555
20 axis and tick API 793
21 backends 913
22 cbook 953
23 cm (colormap) 971
24 collections 975
25 colorbar 1145
26 colors 1151
27 container 1165
28 dates 1167
29 dviread 1181
30 ﬁgure 1185
31 ﬁnance 1207
32 font_manager 1219
33 gridspec 1227
34 image 1231
35 legend and legend_handler 1237
36 lines 1245
37 markers 1255
38 mathtext 1259
39 mlab 1279
40 o ﬀsetbox 1313
41 patches 1325
42 path 1367
43 pathe ﬀects 1375
44 projections 1379
ii",0.003274917602539,"18 artist Module
535
19 Axes class
555
20 axis and tick API
793
21 backends
913
22 cbook
953
23 cm (colormap)
971
24 collections
975
25 colorbar
1145
26 colors
1151
27 container
1165
28 dates
1167
29 dviread
1181
30 ﬁgure
1185
31 ﬁnance
1207
32 font_manager
1219
33 gridspec
1227
34 image
1231
35 legend and legend_handler
1237
36 lines
1245
37 markers
1255
38 mathtext
1259
39 mlab
1279
40 oﬀsetbox
1313
41 patches
1325
42 path
1367
43 patheﬀects
1375
44 projections
1379
ii
",0.0005779266357421,"18 artist Module 535
19 Axes class 555
20 axis and tick API 793
21 backends 913
22 cbook 953
23 cm (colormap) 971
24 collections 975
25 colorbar 1145
26 colors 1151
27 container 1165
28 dates 1167
29 dviread 1181
30 ﬁgure 1185
31 ﬁnance 1207
32 font_manager 1219
33 gridspec 1227
34 image 1231
35 legend and legend_handler 1237
36 lines 1245
37 markers 1255
38 mathtext 1259
39 mlab 1279
40 o ﬀsetbox 1313
41 patches 1325
42 path 1367
43 pathe ﬀects 1375
44 projections 1379
ii",0.0026099681854248,matplotlib_1-21_pdf.pdf ~ 3,"
CONTENTS
I User’s Guide 1
1 Introduction 3
2 Installing 5
3 Tutorials 11
4 Working with text 97
5 Colors 145
6 Customizing matplotlib 173
7 Interactive plots 189
8 Selected Examples 205
9 What’s new in matplotlib 239
10 GitHub Stats 339
11 License 417
12 Credits 421
II The Matplotlib API 423
13 Plotting commands summary 425
14 API Changes 433
15 The top level matplotlib module 483
16 afm (Adobe Font Metrics interface) 487
17 animation module 491
 i
",0.001965099594635175,0.006097560975609756,393,0.002009515636041994,0.006172839506172839,404,0.001965099594635175,0.006097560975609756,393
60,4.0,matplotlib_1-21_pdf.pdf ~ 4,"45 pyplot 1387
46 rcsetup 1593
47 sankey 1597
48 scale 1605
49 spines 1615
50 style 1619
51 text 1621
52 ticker 1635
53 tight_layout 1647
54 Working with transformations 1649
55 triangular grids 1671
56 type1font 1683
57 units 1685
58 widgets 1687
III The Matplotlib FAQ 1703
59 Installation 1705
60 Usage 1713
61 How-To 1725
62 Troubleshooting 1741
63 Environment Variables 1745
64 Working with Matplotlib in Virtual environments 1747
65 Working with Matplotlib on OSX 1749
IV Matplotlib AxesGrid Toolkit 1753
66 Overview of AxesGrid toolkit 1757
67 The Matplotlib AxesGrid Toolkit User’s Guide 1779
iii",0.0020399093627929,"45 pyplot
1387
46 rcsetup
1593
47 sankey
1597
48 scale
1605
49 spines
1615
50 style
1619
51 text
1621
52 ticker
1635
53 tight_layout
1647
54 Working with transformations
1649
55 triangular grids
1671
56 type1font
1683
57 units
1685
58 widgets
1687
III
The Matplotlib FAQ
1703
59 Installation
1705
60 Usage
1713
61 How-To
1725
62 Troubleshooting
1741
63 Environment Variables
1745
64 Working with Matplotlib in Virtual environments
1747
65 Working with Matplotlib on OSX
1749
IV
Matplotlib AxesGrid Toolkit
1753
66 Overview of AxesGrid toolkit
1757
67 The Matplotlib AxesGrid Toolkit User’s Guide
1779
iii
",0.0005710124969482,"45 pyplot 1387
46 rcsetup 1593
47 sankey 1597
48 scale 1605
49 spines 1615
50 style 1619
51 text 1621
52 ticker 1635
53 tight_layout 1647
54 Working with transformations 1649
55 triangular grids 1671
56 type1font 1683
57 units 1685
58 widgets 1687
III The Matplotlib FAQ 1703
59 Installation 1705
60 Usage 1713
61 How-To 1725
62 Troubleshooting 1741
63 Environment Variables 1745
64 Working with Matplotlib in Virtual environments 1747
65 Working with Matplotlib on OSX 1749
IV Matplotlib AxesGrid Toolkit 1753
66 Overview of AxesGrid toolkit 1757
67 The Matplotlib AxesGrid Toolkit User’s Guide 1779
iii",0.0019490718841552,matplotlib_1-21_pdf.pdf ~ 4,"
18 artist Module 535 19 Axes class 555 20 axis and tick API 793 21 backends 913 22 cbook 953 23 cm (colormap) 971 24 collections 975 25 colorbar 1145 26 colors 1151 27 container 1165 28 dates 1167 29 dviread 1181 30 figure 1185 31 finance 1207 32 font_manager 1219 33 gridspec 1227 34 image 1231 35 legend and legend_handler 1237 36 lines 1245 37 markers 1255 38 mathtext 1259 39 mlab 1279 40 offsetbox 1313 41 patches 1325 42 path 1367 43 patheffects 1375 44 projections 1379
 ii
",0.0,0.0,466,0.0,0.0,483,0.0,0.0,466
61,5.0,matplotlib_1-21_pdf.pdf ~ 5,"68 The Matplotlib AxesGrid Toolkit API 1795
69 The Matplotlib axes_grid1 Toolkit API 1805
V mplot3d 1823
70 Matplotlib mplot3d toolkit 1825
VI Toolkits 1879
71 Mapping Toolkits 1883
72 General Toolkits 1885
73 High-Level Plotting 1889
VII External Resources 1893
74 Books, Chapters and Articles 1895
75 Videos 1897
76 Tutorials 1899
VIII The Matplotlib Developers’ Guide 1901
77 Contributing 1903
78 Developer’s tips for testing 1911
79 Developer’s tips for documenting matplotlib 1917
80 Developer’s guide for creating scales and transformations 1929
81 Developer’s tips for writing code for Python 2 and 3 1933
82 Working with Matplotlib source code 1937
83 Reviewers guideline 1957
84 Release Guide 1959
85 Matplotlib Enhancement Proposals 1965
86 Licenses 2017
87 Default Color changes 2019
iv",0.0026760101318359,"68 The Matplotlib AxesGrid Toolkit API
1795
69 The Matplotlib axes_grid1 Toolkit API
1805
V
mplot3d
1823
70 Matplotlib mplot3d toolkit
1825
VI
Toolkits
1879
71 Mapping Toolkits
1883
72 General Toolkits
1885
73 High-Level Plotting
1889
VII
External Resources
1893
74 Books, Chapters and Articles
1895
75 Videos
1897
76 Tutorials
1899
VIII
The Matplotlib Developers’ Guide
1901
77 Contributing
1903
78 Developer’s tips for testing
1911
79 Developer’s tips for documenting matplotlib
1917
80 Developer’s guide for creating scales and transformations
1929
81 Developer’s tips for writing code for Python 2 and 3
1933
82 Working with Matplotlib source code
1937
83 Reviewers guideline
1957
84 Release Guide
1959
85 Matplotlib Enhancement Proposals
1965
86 Licenses
2017
87 Default Color changes
2019
iv
",0.0009877681732177,"68 The Matplotlib AxesGrid Toolkit API 1795
69 The Matplotlib axes_grid1 Toolkit API 1805
V mplot3d 1823
70 Matplotlib mplot3d toolkit 1825
VI Toolkits 1879
71 Mapping Toolkits 1883
72 General Toolkits 1885
73 High-Level Plotting 1889
VII External Resources 1893
74 Books, Chapters and Articles 1895
75 Videos 1897
76 Tutorials 1899
VIII The Matplotlib Developers’ Guide 1901
77 Contributing 1903
78 Developer’s tips for testing 1911
79 Developer’s tips for documenting matplotlib 1917
80 Developer’s guide for creating scales and transformations 1929
81 Developer’s tips for writing code for Python 2 and 3 1933
82 Working with Matplotlib source code 1937
83 Reviewers guideline 1957
84 Release Guide 1959
85 Matplotlib Enhancement Proposals 1965
86 Licenses 2017
87 Default Color changes 2019
iv",0.0029680728912353,matplotlib_1-21_pdf.pdf ~ 5,"
45 pyplot 1387 46 rcsetup 1593 47 sankey 1597 48 scale 1605 49 spines 1615 50 style 1619 51 text 1621 52 ticker 1635 53 tight_layout 1647 54 Working with transformations 1649 55 triangular grids 1671 56 type1font 1683 57 units 1685 58 widgets 1687
III The Matplotlib FAQ 1703 59 Installation 1705 60 Usage 1713 61 How-To 1725 62 Troubleshooting 1741 63 Environment Variables 1745 64 Working with Matplotlib in Virtual environments 1747 65 Working with Matplotlib on OSX 1749
IV Matplotlib AxesGrid Toolkit 1753 66 Overview of AxesGrid toolkit 1757 67 The Matplotlib AxesGrid Toolkit User’s Guide 1779
 iii
",0.03282402093642064,0.05,586,0.03282402093642064,0.05,604,0.03282402093642064,0.05,586
62,6.0,matplotlib_1-21_pdf.pdf ~ 6,"IX Matplotlib Examples 2023
88 animation Examples 2025
89 api Examples 2029
90 axes_grid Examples 2123
91 color Examples 2175
92 event_handling Examples 2187
93 frontpage Examples 2221
94 images_contours_and_ﬁelds Examples 2225
95 lines_bars_and_markers Examples 2237
96 misc Examples 2251
97 mplot3d Examples 2275
98 pie_and_polar_charts Examples 2323
99 pylab_examples Examples 2329
100pyplots Examples 2769
101scales Examples 2791
102shapes_and_collections Examples 2793
103showcase Examples 2799
104specialty_plots Examples 2817
105statistics Examples 2825
106style_sheets Examples 2857
107subplots_axes_and_ﬁgures Examples 2873
108tests Examples 2877
109text_labels_and_annotations Examples 2889
110ticks_and_spines Examples 2895
111units Examples 2909
112user_interfaces Examples 2935
113widgets Examples 3001
v",0.0018959045410156,"IX
Matplotlib Examples
2023
88 animation Examples
2025
89 api Examples
2029
90 axes_grid Examples
2123
91 color Examples
2175
92 event_handling Examples
2187
93 frontpage Examples
2221
94 images_contours_and_ﬁelds Examples
2225
95 lines_bars_and_markers Examples
2237
96 misc Examples
2251
97 mplot3d Examples
2275
98 pie_and_polar_charts Examples
2323
99 pylab_examples Examples
2329
100pyplots Examples
2769
101scales Examples
2791
102shapes_and_collections Examples
2793
103showcase Examples
2799
104specialty_plots Examples
2817
105statistics Examples
2825
106style_sheets Examples
2857
107subplots_axes_and_ﬁgures Examples
2873
108tests Examples
2877
109text_labels_and_annotations Examples
2889
110ticks_and_spines Examples
2895
111units Examples
2909
112user_interfaces Examples
2935
113widgets Examples
3001
v
",0.0007832050323486,"IX Matplotlib Examples 2023
88 animation Examples 2025
89 api Examples 2029
90 axes_grid Examples 2123
91 color Examples 2175
92 event_handling Examples 2187
93 frontpage Examples 2221
94 images_contours_and_ﬁelds Examples 2225
95 lines_bars_and_markers Examples 2237
96 misc Examples 2251
97 mplot3d Examples 2275
98 pie_and_polar_charts Examples 2323
99 pylab_examples Examples 2329
100pyplots Examples 2769
101scales Examples 2791
102shapes_and_collections Examples 2793
103showcase Examples 2799
104specialty_plots Examples 2817
105statistics Examples 2825
106style_sheets Examples 2857
107subplots_axes_and_ﬁgures Examples 2873
108tests Examples 2877
109text_labels_and_annotations Examples 2889
110ticks_and_spines Examples 2895
111units Examples 2909
112user_interfaces Examples 2935
113widgets Examples 3001
v",0.001889944076538,matplotlib_1-21_pdf.pdf ~ 6,"
68 The Matplotlib AxesGrid Toolkit API 1795 69 The Matplotlib axes_grid1 Toolkit API 1805
V mplot3d 1823 70 Matplotlib mplot3d toolkit 1825
VI Toolkits 1879 71 Mapping Toolkits 1883 72 General Toolkits 1885 73 High-Level Plotting 1889
VII External Resources 1893 74 Books, Chapters and Articles 1895 75 Videos 1897 76 Tutorials 1899
VIII The Matplotlib Developers’ Guide 1901 77 Contributing 1903 78 Developer’s tips for testing 1911 79 Developer’s tips for documenting matplotlib 1917 80 Developer’s guide for creating scales and transformations 1929 81 Developer’s tips for writing code for Python 2 and 3 1933 82 Working with Matplotlib source code 1937 83 Reviewers guideline 1957 84 Release Guide 1959 85 Matplotlib Enhancement Proposals 1965 86 Licenses 2017 87 DefaultColorchanges 2019
 iv
",0.0016845129578785122,0.012121212121212121,695,0.0016845129578785122,0.012121212121212121,707,0.0016845129578785122,0.012121212121212121,695
63,7.0,matplotlib_1-21_pdf.pdf ~ 7,"X Glossary 3015
Bibliography 3019
Python Module Index 3021
Index 3023
vi",0.0005390644073486,"X
Glossary
3015
Bibliography
3019
Python Module Index
3021
Index
3023
vi
",0.0001580715179443,"X Glossary 3015
Bibliography 3019
Python Module Index 3021
Index 3023
vi",0.0005109310150146,matplotlib_1-21_pdf.pdf ~ 7,"
IX Matplotlib Examples 2023 88 animation Examples 2025 89 api Examples 2029 90 axes_grid Examples 2123 91 color Examples 2175 92 event_handling Examples 2187 93 frontpage Examples 2221 94 images_contours_and_fields Examples 2225 95 lines_bars_and_markers Examples 2237 96 misc Examples 2251 97 mplot3d Examples 2275 98 pie_and_polar_charts Examples 2323 99 pylab_examples Examples 2329 100pyplots Examples 2769 101scales Examples 2791 102shapes_and_collections Examples 2793 103showcase Examples 2799 104specialty_plots Examples 2817 105statistics Examples 2825 106style_sheets Examples 2857 107subplots_axes_and_figures Examples 2873 108tests Examples 2877 109text_labels_and_annotations Examples 2889 110ticks_and_spines Examples 2895 111units Examples 2909 112user_interfaces Examples 2935 113widgets Examples 3001
 v
",0.0,0.0,769,0.0,0.0,774,0.0,0.0,769
64,8.0,matplotlib_1-21_pdf.pdf ~ 8,"Part I
User’s Guide
1",0.000392198562622,"Part I
User’s Guide
1
",0.0001122951507568,"Part I
User’s Guide
1",0.0003728866577148,matplotlib_1-21_pdf.pdf ~ 8,"
X Glossary 3015 Bibliography 3019 Python Module Index 3021 Index 3023
 vi
",0.0,0.0,66,0.0,0.0,65,0.0,0.0,66
65,9.0,matplotlib_1-21_pdf.pdf ~ 9,,5.1021575927734375e-05,,5.507469177246094e-05,,4.792213439941406e-05,matplotlib_1-21_pdf.pdf ~ 9,"
Part I User’s Guide
 1
",0.0,0.0,23,0.0,0.0,23,0.0,0.0,23
66,10.0,matplotlib_1-21_pdf.pdf ~ 10,"CHAPTER
ONE
INTRODUCTION
Matplotlib is a library for making 2D plots of arrays in Python. Although it has its origins in emulating
the MATLAB®1 graphics commands, it is independent of MATLAB, and can be used in a Pythonic, object
oriented way. Although Matplotlib is written primarily in pure Python, it makes heavy use of NumPy and
other extension code to provide good performance even for large arrays.
Matplotlib is designed with the philosophy that you should be able to create simple plots with just a few
commands, or just one! If you want to see a histogram of your data, you shouldn’t need to instantiate objects,
call methods, set properties, and so on; it should just work.
For years, I used to use MATLAB exclusively for data analysis and visualization. MATLAB excels at mak-
ing nice looking plots easy. When I began working with EEG data, I found that I needed to write applications
to interact with my data, and developed an EEG analysis application in MATLAB. As the application grew
in complexity, interacting with databases, http servers, manipulating complex data structures, I began to
strain against the limitations of MATLAB as a programming language, and decided to start over in Python.
Python more than makes up for all of MATLAB’s deﬁciencies as a programming language, but I was having
diﬃculty ﬁnding a 2D plotting package (for 3D VTK more than exceeds all of my needs).
When I went searching for a Python plotting package, I had several requirements:
• Plots should look great - publication quality. One important requirement for me is that the text looks
good (antialiased, etc.)
• Postscript output for inclusion with TeX documents
• Embeddable in a graphical user interface for application development
• Code should be easy enough that I can understand it and extend it
• Making plots should be easy
Finding no package that suited me just right, I did what any self-respecting Python programmer would do:
rolled up my sleeves and dived in. Not having any real experience with computer graphics, I decided to
emulate MATLAB’s plotting capabilities because that is something MATLAB does very well. This had the
added advantage that many people have a lot of MATLAB experience, and thus they can quickly get up to
steam plotting in python. From a developer’s perspective, having a ﬁxed user interface (the pylab interface)
has been very useful, because the guts of the code base can be redesigned without aﬀecting user code.
The Matplotlib code is conceptually divided into three parts: the pylab interface is the set of functions
provided by matplotlib.pylab which allow the user to create plots with code quite similar to MATLAB
1 MATLAB is a registered trademark of The MathWorks, Inc.
3",0.008462905883789,"CHAPTER
ONE
INTRODUCTION
Matplotlib is a library for making 2D plots of arrays in Python. Although it has its origins in emulating
the MATLAB®1 graphics commands, it is independent of MATLAB, and can be used in a Pythonic, object
oriented way. Although Matplotlib is written primarily in pure Python, it makes heavy use of NumPy and
other extension code to provide good performance even for large arrays.
Matplotlib is designed with the philosophy that you should be able to create simple plots with just a few
commands, or just one! If you want to see a histogram of your data, you shouldn’t need to instantiate objects,
call methods, set properties, and so on; it should just work.
For years, I used to use MATLAB exclusively for data analysis and visualization. MATLAB excels at mak-
ing nice looking plots easy. When I began working with EEG data, I found that I needed to write applications
to interact with my data, and developed an EEG analysis application in MATLAB. As the application grew
in complexity, interacting with databases, http servers, manipulating complex data structures, I began to
strain against the limitations of MATLAB as a programming language, and decided to start over in Python.
Python more than makes up for all of MATLAB’s deﬁciencies as a programming language, but I was having
diﬃculty ﬁnding a 2D plotting package (for 3D VTK more than exceeds all of my needs).
When I went searching for a Python plotting package, I had several requirements:
• Plots should look great - publication quality. One important requirement for me is that the text looks
good (antialiased, etc.)
• Postscript output for inclusion with TeX documents
• Embeddable in a graphical user interface for application development
• Code should be easy enough that I can understand it and extend it
• Making plots should be easy
Finding no package that suited me just right, I did what any self-respecting Python programmer would do:
rolled up my sleeves and dived in. Not having any real experience with computer graphics, I decided to
emulate MATLAB’s plotting capabilities because that is something MATLAB does very well. This had the
added advantage that many people have a lot of MATLAB experience, and thus they can quickly get up to
steam plotting in python. From a developer’s perspective, having a ﬁxed user interface (the pylab interface)
has been very useful, because the guts of the code base can be redesigned without aﬀecting user code.
The Matplotlib code is conceptually divided into three parts: the pylab interface is the set of functions
provided by matplotlib.pylab which allow the user to create plots with code quite similar to MATLAB
1 MATLAB is a registered trademark of The MathWorks, Inc.
3
",0.0044281482696533,"CHAPTER
ONE
INTRODUCTION
Matplotlib is a library for making 2D plots of arrays in Python. Although it has its origins in emulating
the MATLAB®1 graphics commands, it is independent of MATLAB, and can be used in a Pythonic, object
oriented way. Although Matplotlib is written primarily in pure Python, it makes heavy use of NumPy and
other extension code to provide good performance even for large arrays.
Matplotlib is designed with the philosophy that you should be able to create simple plots with just a few
commands, or just one! If you want to see a histogram of your data, you shouldn’t need to instantiate objects,
call methods, set properties, and so on; it should just work.
For years, I used to use MATLAB exclusively for data analysis and visualization. MATLAB excels at mak-
ing nice looking plots easy. When I began working with EEG data, I found that I needed to write applications
to interact with my data, and developed an EEG analysis application in MATLAB. As the application grew
in complexity, interacting with databases, http servers, manipulating complex data structures, I began to
strain against the limitations of MATLAB as a programming language, and decided to start over in Python.
Python more than makes up for all of MATLAB’s deﬁciencies as a programming language, but I was having
diﬃculty ﬁnding a 2D plotting package (for 3D VTK more than exceeds all of my needs).
When I went searching for a Python plotting package, I had several requirements:
• Plots should look great - publication quality. One important requirement for me is that the text looks
good (antialiased, etc.)
• Postscript output for inclusion with TeX documents
• Embeddable in a graphical user interface for application development
• Code should be easy enough that I can understand it and extend it
• Making plots should be easy
Finding no package that suited me just right, I did what any self-respecting Python programmer would do:
rolled up my sleeves and dived in. Not having any real experience with computer graphics, I decided to
emulate MATLAB’s plotting capabilities because that is something MATLAB does very well. This had the
added advantage that many people have a lot of MATLAB experience, and thus they can quickly get up to
steam plotting in python. From a developer’s perspective, having a ﬁxed user interface (the pylab interface)
has been very useful, because the guts of the code base can be redesigned without aﬀecting user code.
The Matplotlib code is conceptually divided into three parts: the pylab interface is the set of functions
provided by matplotlib.pylab which allow the user to create plots with code quite similar to MATLAB
1 MATLAB is a registered trademark of The MathWorks, Inc.
3",0.0091259479522705,matplotlib_1-21_pdf.pdf ~ 10,"

",0.0,0.0,2716,0.0,0.0,2717,0.0,0.0,2716
67,11.0,matplotlib_1-21_pdf.pdf ~ 11,"Matplotlib, Release 2.0.2
ﬁgure generating code (Pyplot tutorial). The Matplotlib frontend or Matplotlib API is the set of classes that
do the heavy lifting, creating and managing ﬁgures, text, lines, plots and so on ( Artist tutorial). This is an
abstract interface that knows nothing about output. Thebackends are device-dependent drawing devices, aka
renderers, that transform the frontend representation to hardcopy or a display device ( What is a backend?).
Example backends: PS creates PostScript ® hardcopy, SVG creates Scalable Vector Graphics hardcopy,
Agg creates PNG output using the high quality Anti-Grain Geometry library that ships with Matplotlib,
GTK embeds Matplotlib in a Gtk+ application, GTKAgg uses the Anti-Grain renderer to create a ﬁgure and
embed it in a Gtk+ application, and so on for PDF, WxWidgets, Tkinter, etc.
Matplotlib is used by many people in many diﬀerent contexts. Some people want to automatically generate
PostScript ﬁles to send to a printer or publishers. Others deploy Matplotlib on a web application server to
generate PNG output for inclusion in dynamically-generated web pages. Some use Matplotlib interactively
from the Python shell in Tkinter on Windows ™. My primary use is to embed Matplotlib in a Gtk + EEG
application that runs on Windows, Linux and Macintosh OS X.
4 Chapter 1. Introduction",0.0033447742462158,"Matplotlib, Release 2.0.2
ﬁgure generating code (Pyplot tutorial). The Matplotlib frontend or Matplotlib API is the set of classes that
do the heavy lifting, creating and managing ﬁgures, text, lines, plots and so on (Artist tutorial). This is an
abstract interface that knows nothing about output. The backends are device-dependent drawing devices, aka
renderers, that transform the frontend representation to hardcopy or a display device (What is a backend?).
Example backends: PS creates PostScript® hardcopy, SVG creates Scalable Vector Graphics hardcopy,
Agg creates PNG output using the high quality Anti-Grain Geometry library that ships with Matplotlib,
GTK embeds Matplotlib in a Gtk+ application, GTKAgg uses the Anti-Grain renderer to create a ﬁgure and
embed it in a Gtk+ application, and so on for PDF, WxWidgets, Tkinter, etc.
Matplotlib is used by many people in many diﬀerent contexts. Some people want to automatically generate
PostScript ﬁles to send to a printer or publishers. Others deploy Matplotlib on a web application server to
generate PNG output for inclusion in dynamically-generated web pages. Some use Matplotlib interactively
from the Python shell in Tkinter on Windows™. My primary use is to embed Matplotlib in a Gtk+ EEG
application that runs on Windows, Linux and Macintosh OS X.
4
Chapter 1. Introduction
",0.0011630058288574,"Matplotlib, Release 2.0.2
ﬁgure generating code (Pyplot tutorial). The Matplotlib frontend or Matplotlib API is the set of classes that
do the heavy lifting, creating and managing ﬁgures, text, lines, plots and so on ( Artist tutorial). This is an
abstract interface that knows nothing about output. Thebackends are device-dependent drawing devices, aka
renderers, that transform the frontend representation to hardcopy or a display device ( What is a backend?).
Example backends: PS creates PostScript ® hardcopy, SVG creates Scalable Vector Graphics hardcopy,
Agg creates PNG output using the high quality Anti-Grain Geometry library that ships with Matplotlib,
GTK embeds Matplotlib in a Gtk+ application, GTKAgg uses the Anti-Grain renderer to create a ﬁgure and
embed it in a Gtk+ application, and so on for PDF, WxWidgets, Tkinter, etc.
Matplotlib is used by many people in many diﬀerent contexts. Some people want to automatically generate
PostScript ﬁles to send to a printer or publishers. Others deploy Matplotlib on a web application server to
generate PNG output for inclusion in dynamically-generated web pages. Some use Matplotlib interactively
from the Python shell in Tkinter on Windows ™. My primary use is to embed Matplotlib in a Gtk + EEG
application that runs on Windows, Linux and Macintosh OS X.
4 Chapter 1. Introduction",0.0034928321838378,matplotlib_1-21_pdf.pdf ~ 11,"
 CHAPTER ONE
INTRODUCTION
Matplotlib is a library for making 2D plots of arrays in Python. Although it has its origins in emulating the MATLAB®1 graphics commands, it is independent of MATLAB, and can be used in a Pythonic, object oriented way. Although Matplotlib is written primarily in pure Python, it makes heavy use of NumPy and other extension code to provide good performance even for large arrays.
Matplotlib is designed with the philosophy that you should be able to create simple plots with just a few commands, or just one! If you want to see a histogram of your data, you shouldn’t need to instantiate objects, call methods, set properties, and so on; it should just work.
For years, I used to use MATLAB exclusively for data analysis and visualization. MATLAB excels at mak- ing nice looking plots easy. When I began working with EEG data, I found that I needed to write applications to interact with my data, and developed an EEG analysis application in MATLAB. As the application grew in complexity, interacting with databases, http servers, manipulating complex data structures, I began to strain against the limitations of MATLAB as a programming language, and decided to start over in Python. Python more than makes up for all of MATLAB’s deficiencies as a programming language, but I was having difficulty finding a 2D plotting package (for 3D VTK more than exceeds all of my needs).
When I went searching for a Python plotting package, I had several requirements:
• Plots should look great - publication quality. One important requirement for me is that the text looks good (antialiased, etc.)
• Postscript output for inclusion with TeX documents
• Embeddable in a graphical user interface for application development
• Code should be easy enough that I can understand it and extend it
• Making plots should be easy
Finding no package that suited me just right, I did what any self-respecting Python programmer would do: rolled up my sleeves and dived in. Not having any real experience with computer graphics, I decided to emulate MATLAB’s plotting capabilities because that is something MATLAB does very well. This had the added advantage that many people have a lot of MATLAB experience, and thus they can quickly get up to steam plotting in python. From a developer’s perspective, having a fixed user interface (the pylab interface) has been very useful, because the guts of the code base can be redesigned without affecting user code.
The Matplotlib code is conceptually divided into three parts: the pylab interface is the set of functions provided by matplotlib.pylab which allow the user to create plots with code quite similar to MATLAB
1 MATLAB is a registered trademark of The MathWorks, Inc.
   3
",0.011288092571503608,0.09510869565217392,2063,0.011074278558965749,0.09615384615384616,2067,0.011288092571503608,0.09510869565217392,2063
68,12.0,matplotlib_1-21_pdf.pdf ~ 12,"CHAPTER
TWO
INSTALLING
There are many diﬀerent ways to install matplotlib, and the best way depends on what operating system you
are using, what you already have installed, and how you want to use it. To avoid wading through all the
details (and potential complications) on this page, there are several convenient options.
2.1 Installing pre-built packages
2.1.1 Most platforms : scientiﬁc Python distributions
The ﬁrst option is to use one of the pre-packaged python distributions that already provide matplotlib built-in.
The Continuum.io Python distribution (Anaconda or miniconda) and the Enthought distribution (Canopy)
are both excellent choices that “just work” out of the box for Windows, OSX and common Linux platforms.
Both of these distributions include matplotlib and lots of other useful tools.
2.1.2 Linux : using your package manager
If you are on Linux, you might prefer to use your package manager. matplotlib is packaged for almost every
major Linux distribution.
• Debian / Ubuntu : sudo apt-get install python-matplotlib
• Fedora / Redhat : sudo yum install python-matplotlib
2.1.3 Mac OSX : using pip
If you are on Mac OSX you can probably install matplotlib binaries using the standard Python installation
program pip. See Installing OSX binary wheels.
2.1.4 Windows
If you don’t already have Python installed, we recommend using one of the scipy-stack compatible Python
distributions such as WinPython, Python(x,y), Enthought Canopy, or Continuum Anaconda, which have
matplotlib and many of its dependencies, plus other useful packages, preinstalled.
For standard Python installations, install matplotlib using pip:
5",0.0045580863952636,"CHAPTER
TWO
INSTALLING
There are many diﬀerent ways to install matplotlib, and the best way depends on what operating system you
are using, what you already have installed, and how you want to use it. To avoid wading through all the
details (and potential complications) on this page, there are several convenient options.
2.1 Installing pre-built packages
2.1.1 Most platforms : scientiﬁc Python distributions
The ﬁrst option is to use one of the pre-packaged python distributions that already provide matplotlib built-in.
The Continuum.io Python distribution (Anaconda or miniconda) and the Enthought distribution (Canopy)
are both excellent choices that “just work” out of the box for Windows, OSX and common Linux platforms.
Both of these distributions include matplotlib and lots of other useful tools.
2.1.2 Linux : using your package manager
If you are on Linux, you might prefer to use your package manager. matplotlib is packaged for almost every
major Linux distribution.
• Debian / Ubuntu : sudo apt-get install python-matplotlib
• Fedora / Redhat : sudo yum install python-matplotlib
2.1.3 Mac OSX : using pip
If you are on Mac OSX you can probably install matplotlib binaries using the standard Python installation
program pip. See Installing OSX binary wheels.
2.1.4 Windows
If you don’t already have Python installed, we recommend using one of the scipy-stack compatible Python
distributions such as WinPython, Python(x,y), Enthought Canopy, or Continuum Anaconda, which have
matplotlib and many of its dependencies, plus other useful packages, preinstalled.
For standard Python installations, install matplotlib using pip:
5
",0.0014500617980957,"CHAPTER
TWO
INSTALLING
There are many diﬀerent ways to install matplotlib, and the best way depends on what operating system you
are using, what you already have installed, and how you want to use it. To avoid wading through all the
details (and potential complications) on this page, there are several convenient options.
2.1 Installing pre-built packages
2.1.1 Most platforms : scientiﬁc Python distributions
The ﬁrst option is to use one of the pre-packaged python distributions that already provide matplotlib built-in.
The Continuum.io Python distribution (Anaconda or miniconda) and the Enthought distribution (Canopy)
are both excellent choices that “just work” out of the box for Windows, OSX and common Linux platforms.
Both of these distributions include matplotlib and lots of other useful tools.
2.1.2 Linux : using your package manager
If you are on Linux, you might prefer to use your package manager. matplotlib is packaged for almost every
major Linux distribution.
• Debian / Ubuntu : sudo apt-get install python-matplotlib
• Fedora / Redhat : sudo yum install python-matplotlib
2.1.3 Mac OSX : using pip
If you are on Mac OSX you can probably install matplotlib binaries using the standard Python installation
program pip. See Installing OSX binary wheels.
2.1.4 Windows
If you don’t already have Python installed, we recommend using one of the scipy-stack compatible Python
distributions such as WinPython, Python(x,y), Enthought Canopy, or Continuum Anaconda, which have
matplotlib and many of its dependencies, plus other useful packages, preinstalled.
For standard Python installations, install matplotlib using pip:
5",0.0046150684356689,matplotlib_1-21_pdf.pdf ~ 12,"
Matplotlib, Release 2.0.2
 figure generating code (Pyplot tutorial). The Matplotlib frontend or Matplotlib API is the set of classes that do the heavy lifting, creating and managing figures, text, lines, plots and so on (Artist tutorial). This is an abstract interface that knows nothing about output. The backends are device-dependent drawing devices, aka renderers, that transform the frontend representation to hardcopy or a display device (What is a backend?). Example backends: PS creates PostScript® hardcopy, SVG creates Scalable Vector Graphics hardcopy, Agg creates PNG output using the high quality Anti-Grain Geometry library that ships with Matplotlib, GTK embeds Matplotlib in a Gtk+ application, GTKAgg uses the Anti-Grain renderer to create a figure and embed it in a Gtk+ application, and so on for PDF, WxWidgets, Tkinter, etc.
Matplotlib is used by many people in many different contexts. Some people want to automatically generate PostScript files to send to a printer or publishers. Others deploy Matplotlib on a web application server to generate PNG output for inclusion in dynamically-generated web pages. Some use Matplotlib interactively from the Python shell in Tkinter on WindowsTM. My primary use is to embed Matplotlib in a Gtk+ EEG application that runs on Windows, Linux and Macintosh OS X.
 4 Chapter1. Introduction

",0.004211854055165542,0.06593406593406594,1243,0.004211854055165542,0.06593406593406594,1243,0.004211854055165542,0.06593406593406594,1243
69,13.0,matplotlib_1-21_pdf.pdf ~ 13,"Matplotlib, Release 2.0.2
python -m pip install -U pip setuptools
python -m pip install matplotlib
In case Python 2.7 or 3.4 are not installed for all users, the Microsoft Visual C++ 2008 (64 bit or 32 bit for
Python 2.7) or Microsoft Visual C++ 2010 (64 bit or 32 bit for Python 3.4) redistributable packages need to
be installed.
Matplotlib depends on Pillow for reading and saving JPEG, BMP, and TIFF image ﬁles. Matplotlib requires
MiKTeX and GhostScript for rendering text with LaTeX. FFmpeg, avconv, mencoder, or ImageMagick are
required for the animation module.
The following backends should work out of the box: agg, tkagg, ps, pdf and svg. For other backends you
may need to install pycairo, PyQt4, PyQt5, PySide, wxPython, PyGTK, Tornado, or GhostScript.
TkAgg is probably the best backend for interactive use from the standard Python shell or IPython. It is
enabled as the default backend for the oﬃcial binaries. GTK3 is not supported on Windows.
The Windows wheels ( *.whl) on the PyPI download page do not contain test data or example
code. If you want to try the many demos that come in the matplotlib source distribution, down-
load the *.tar.gz ﬁle and look in the examples subdirectory. To run the test suite, copy the
lib\matplotlib\testsand lib\mpl_toolkits\testsdirectories from the source distribution tosys.
prefix\Lib\site-packages\matplotlib and sys.prefix\Lib\site-packages\mpl_toolkits
respectively, and install nose, mock, Pillow, MiKTeX, GhostScript,ﬀmpeg, avconv, mencoder, ImageMag-
ick, and Inkscape.
2.2 Installing from source
If you are interested in contributing to matplotlib development, running the latest source code, or just like to
build everything yourself, it is not diﬃcult to build matplotlib from source. Grab the latest tar.gz release ﬁle
from the PyPI ﬁles page, or if you want to develop matplotlib or just need the latest bugﬁxed version, grab
the latest git version Source install from git.
The standard environment variables CC, CXX, PKG_CONFIG are respected. This means you can set them if
your toolchain is preﬁxed. This may be used for cross compiling.
export CC=x86_64-pc-linux-gnu-gcc
export CXX=x86_64-pc-linux-gnu-g++
export PKG_CONFIG=x86_64-pc-linux-gnu-pkg-config
Once you have satisﬁed the requirements detailed below (mainly python, numpy, libpng and freetype), you
can build matplotlib.
cd matplotlib
python setup.py build
python setup.py install
We provide a setup.cfg ﬁle that goes with setup.pywhich you can use to customize the build process. For
example, which default backend to use, whether some of the optional libraries that matplotlib ships with are
installed, and so on. This ﬁle will be particularly useful to those packaging matplotlib.
6 Chapter 2. Installing",0.0089108943939208,"Matplotlib, Release 2.0.2
python -m pip install -U pip setuptools
python -m pip install matplotlib
In case Python 2.7 or 3.4 are not installed for all users, the Microsoft Visual C++ 2008 (64 bit or 32 bit for
Python 2.7) or Microsoft Visual C++ 2010 (64 bit or 32 bit for Python 3.4) redistributable packages need to
be installed.
Matplotlib depends on Pillow for reading and saving JPEG, BMP, and TIFF image ﬁles. Matplotlib requires
MiKTeX and GhostScript for rendering text with LaTeX. FFmpeg, avconv, mencoder, or ImageMagick are
required for the animation module.
The following backends should work out of the box: agg, tkagg, ps, pdf and svg. For other backends you
may need to install pycairo, PyQt4, PyQt5, PySide, wxPython, PyGTK, Tornado, or GhostScript.
TkAgg is probably the best backend for interactive use from the standard Python shell or IPython. It is
enabled as the default backend for the oﬃcial binaries. GTK3 is not supported on Windows.
The Windows wheels (*.whl) on the PyPI download page do not contain test data or example
code.
If you want to try the many demos that come in the matplotlib source distribution, down-
load the *.tar.gz ﬁle and look in the examples subdirectory.
To run the test suite, copy the
lib\matplotlib\tests and lib\mpl_toolkits\tests directories from the source distribution to sys.
prefix\Lib\site-packages\matplotlib and sys.prefix\Lib\site-packages\mpl_toolkits
respectively, and install nose, mock, Pillow, MiKTeX, GhostScript, ﬀmpeg, avconv, mencoder, ImageMag-
ick, and Inkscape.
2.2 Installing from source
If you are interested in contributing to matplotlib development, running the latest source code, or just like to
build everything yourself, it is not diﬃcult to build matplotlib from source. Grab the latest tar.gz release ﬁle
from the PyPI ﬁles page, or if you want to develop matplotlib or just need the latest bugﬁxed version, grab
the latest git version Source install from git.
The standard environment variables CC, CXX, PKG_CONFIG are respected. This means you can set them if
your toolchain is preﬁxed. This may be used for cross compiling.
export CC=x86_64-pc-linux-gnu-gcc
export CXX=x86_64-pc-linux-gnu-g++
export PKG_CONFIG=x86_64-pc-linux-gnu-pkg-config
Once you have satisﬁed the requirements detailed below (mainly python, numpy, libpng and freetype), you
can build matplotlib.
cd matplotlib
python setup.py build
python setup.py install
We provide a setup.cfg ﬁle that goes with setup.py which you can use to customize the build process. For
example, which default backend to use, whether some of the optional libraries that matplotlib ships with are
installed, and so on. This ﬁle will be particularly useful to those packaging matplotlib.
6
Chapter 2. Installing
",0.0026390552520751,"Matplotlib, Release 2.0.2
python -m pip install -U pip setuptools
python -m pip install matplotlib
In case Python 2.7 or 3.4 are not installed for all users, the Microsoft Visual C++ 2008 (64 bit or 32 bit for
Python 2.7) or Microsoft Visual C++ 2010 (64 bit or 32 bit for Python 3.4) redistributable packages need to
be installed.
Matplotlib depends on Pillow for reading and saving JPEG, BMP, and TIFF image ﬁles. Matplotlib requires
MiKTeX and GhostScript for rendering text with LaTeX. FFmpeg, avconv, mencoder, or ImageMagick are
required for the animation module.
The following backends should work out of the box: agg, tkagg, ps, pdf and svg. For other backends you
may need to install pycairo, PyQt4, PyQt5, PySide, wxPython, PyGTK, Tornado, or GhostScript.
TkAgg is probably the best backend for interactive use from the standard Python shell or IPython. It is
enabled as the default backend for the oﬃcial binaries. GTK3 is not supported on Windows.
The Windows wheels ( *.whl) on the PyPI download page do not contain test data or example
code. If you want to try the many demos that come in the matplotlib source distribution, down-
load the *.tar.gz ﬁle and look in the examples subdirectory. To run the test suite, copy the
lib\matplotlib\testsand lib\mpl_toolkits\testsdirectories from the source distribution tosys.
prefix\Lib\site-packages\matplotlib and sys.prefix\Lib\site-packages\mpl_toolkits
respectively, and install nose, mock, Pillow, MiKTeX, GhostScript,ﬀmpeg, avconv, mencoder, ImageMag-
ick, and Inkscape.
2.2 Installing from source
If you are interested in contributing to matplotlib development, running the latest source code, or just like to
build everything yourself, it is not diﬃcult to build matplotlib from source. Grab the latest tar.gz release ﬁle
from the PyPI ﬁles page, or if you want to develop matplotlib or just need the latest bugﬁxed version, grab
the latest git version Source install from git.
The standard environment variables CC, CXX, PKG_CONFIG are respected. This means you can set them if
your toolchain is preﬁxed. This may be used for cross compiling.
export CC=x86_64-pc-linux-gnu-gcc
export CXX=x86_64-pc-linux-gnu-g++
export PKG_CONFIG=x86_64-pc-linux-gnu-pkg-config
Once you have satisﬁed the requirements detailed below (mainly python, numpy, libpng and freetype), you
can build matplotlib.
cd matplotlib
python setup.py build
python setup.py install
We provide a setup.cfg ﬁle that goes with setup.pywhich you can use to customize the build process. For
example, which default backend to use, whether some of the optional libraries that matplotlib ships with are
installed, and so on. This ﬁle will be particularly useful to those packaging matplotlib.
6 Chapter 2. Installing",0.0081081390380859,matplotlib_1-21_pdf.pdf ~ 13,"
 CHAPTER TWO
INSTALLING
There are many different ways to install matplotlib, and the best way depends on what operating system you are using, what you already have installed, and how you want to use it. To avoid wading through all the details (and potential complications) on this page, there are several convenient options.
2.1 Installing pre-built packages
2.1.1 Most platforms : scientific Python distributions
The first option is to use one of the pre-packaged python distributions that already provide matplotlib built-in. The Continuum.io Python distribution (Anaconda or miniconda) and the Enthought distribution (Canopy) are both excellent choices that “just work” out of the box for Windows, OSX and common Linux platforms. Both of these distributions include matplotlib and lots of other useful tools.
2.1.2 Linux : using your package manager
If you are on Linux, you might prefer to use your package manager. matplotlib is packaged for almost every major Linux distribution.
• Debian / Ubuntu : sudo apt-get install python-matplotlib • Fedora / Redhat : sudo yum install python-matplotlib
2.1.3 Mac OSX : using pip
If you are on Mac OSX you can probably install matplotlib binaries using the standard Python installation program pip. See Installing OSX binary wheels.
2.1.4 Windows
If you don’t already have Python installed, we recommend using one of the scipy-stack compatible Python distributions such as WinPython, Python(x,y), Enthought Canopy, or Continuum Anaconda, which have matplotlib and many of its dependencies, plus other useful packages, preinstalled.
For standard Python installations, install matplotlib using pip:
  5
",0.011941794480581134,0.11813186813186813,2029,0.011827106548301975,0.11813186813186813,2033,0.011941794480581134,0.11813186813186813,2029
70,14.0,matplotlib_1-21_pdf.pdf ~ 14,"Matplotlib, Release 2.0.2
If you have installed prerequisites to nonstandard places and need to inform matplotlib where they are,
edit setupext.py and add the base dirs to the basedir dictionary entry for your sys.platform. e.g., if
the header to some required library is in /some/path/include/someheader.h, put /some/path in the
basedirlist for your platform.
2.2.1 Build requirements
These are external packages which you will need to install before installing matplotlib. If you are building on
OSX, see Building on OSX. If you are building on Windows, seeBuilding on Windows. If you are installing
dependencies with a package manager on Linux, you may need to install the development packages (look
for a “-dev” postﬁx) in addition to the libraries themselves.
Required Dependencies
python 2.7, 3.4, 3.5 or 3.6 Download python.
numpy 1.7.1 (or later) array support for python (download numpy)
setuptools Setuptools provides extensions for python package installation.
dateutil 1.1 or later Provides extensions to python datetime handling. If using pip, easy_install or in-
stalling from source, the installer will attempt to download and installpython_dateutilfrom PyPI.
pyparsing Required for matplotlib’s mathtext math rendering support. If using pip, easy_install or in-
stalling from source, the installer will attempt to download and install pyparsingfrom PyPI.
libpng 1.2 (or later) library for loading and saving PNG ﬁles (download). libpng requires zlib.
pytz Used to manipulate time-zone aware datetimes. https://pypi.python.org/pypi/pytz
FreeType 2.3 or later Library for reading true type font ﬁles. If using pip, easy_install or installing from
source, the installer will attempt to locate FreeType in expected locations. If it cannot, try installing
pkg-conﬁg, a tool used to ﬁnd required non-python libraries.
cycler 0.10.0 or later Composable cycle class used for constructing style-cycles
six Required for compatibility between python 2 and python 3
Dependencies for python 2
functools32 Required for compatibility if running on Python 2.7.
subprocess32 Optional, unix only. Backport of the subprocess standard library from 3.2 + for Python 2.7.
It provides better error messages and timeout support.
Optional GUI framework
These are optional packages which you may want to install to use matplotlib with a user interface toolkit.
See What is a backend? for more details on the optional matplotlib backends and the capabilities they
provide.
2.2. Installing from source 7",0.0066900253295898,"Matplotlib, Release 2.0.2
If you have installed prerequisites to nonstandard places and need to inform matplotlib where they are,
edit setupext.py and add the base dirs to the basedir dictionary entry for your sys.platform. e.g., if
the header to some required library is in /some/path/include/someheader.h, put /some/path in the
basedir list for your platform.
2.2.1 Build requirements
These are external packages which you will need to install before installing matplotlib. If you are building on
OSX, see Building on OSX. If you are building on Windows, see Building on Windows. If you are installing
dependencies with a package manager on Linux, you may need to install the development packages (look
for a “-dev” postﬁx) in addition to the libraries themselves.
Required Dependencies
python 2.7, 3.4, 3.5 or 3.6 Download python.
numpy 1.7.1 (or later) array support for python (download numpy)
setuptools Setuptools provides extensions for python package installation.
dateutil 1.1 or later Provides extensions to python datetime handling. If using pip, easy_install or in-
stalling from source, the installer will attempt to download and install python_dateutil from PyPI.
pyparsing Required for matplotlib’s mathtext math rendering support. If using pip, easy_install or in-
stalling from source, the installer will attempt to download and install pyparsing from PyPI.
libpng 1.2 (or later) library for loading and saving PNG ﬁles (download). libpng requires zlib.
pytz Used to manipulate time-zone aware datetimes. https://pypi.python.org/pypi/pytz
FreeType 2.3 or later Library for reading true type font ﬁles. If using pip, easy_install or installing from
source, the installer will attempt to locate FreeType in expected locations. If it cannot, try installing
pkg-conﬁg, a tool used to ﬁnd required non-python libraries.
cycler 0.10.0 or later Composable cycle class used for constructing style-cycles
six Required for compatibility between python 2 and python 3
Dependencies for python 2
functools32 Required for compatibility if running on Python 2.7.
subprocess32 Optional, unix only. Backport of the subprocess standard library from 3.2+ for Python 2.7.
It provides better error messages and timeout support.
Optional GUI framework
These are optional packages which you may want to install to use matplotlib with a user interface toolkit.
See What is a backend? for more details on the optional matplotlib backends and the capabilities they
provide.
2.2. Installing from source
7
",0.0020391941070556,"Matplotlib, Release 2.0.2
If you have installed prerequisites to nonstandard places and need to inform matplotlib where they are,
edit setupext.py and add the base dirs to the basedir dictionary entry for your sys.platform. e.g., if
the header to some required library is in /some/path/include/someheader.h, put /some/path in the
basedirlist for your platform.
2.2.1 Build requirements
These are external packages which you will need to install before installing matplotlib. If you are building on
OSX, see Building on OSX. If you are building on Windows, seeBuilding on Windows. If you are installing
dependencies with a package manager on Linux, you may need to install the development packages (look
for a “-dev” postﬁx) in addition to the libraries themselves.
Required Dependencies
python 2.7, 3.4, 3.5 or 3.6 Download python.
numpy 1.7.1 (or later) array support for python (download numpy)
setuptools Setuptools provides extensions for python package installation.
dateutil 1.1 or later Provides extensions to python datetime handling. If using pip, easy_install or in-
stalling from source, the installer will attempt to download and installpython_dateutilfrom PyPI.
pyparsing Required for matplotlib’s mathtext math rendering support. If using pip, easy_install or in-
stalling from source, the installer will attempt to download and install pyparsingfrom PyPI.
libpng 1.2 (or later) library for loading and saving PNG ﬁles (download). libpng requires zlib.
pytz Used to manipulate time-zone aware datetimes. https://pypi.python.org/pypi/pytz
FreeType 2.3 or later Library for reading true type font ﬁles. If using pip, easy_install or installing from
source, the installer will attempt to locate FreeType in expected locations. If it cannot, try installing
pkg-conﬁg, a tool used to ﬁnd required non-python libraries.
cycler 0.10.0 or later Composable cycle class used for constructing style-cycles
six Required for compatibility between python 2 and python 3
Dependencies for python 2
functools32 Required for compatibility if running on Python 2.7.
subprocess32 Optional, unix only. Backport of the subprocess standard library from 3.2 + for Python 2.7.
It provides better error messages and timeout support.
Optional GUI framework
These are optional packages which you may want to install to use matplotlib with a user interface toolkit.
See What is a backend? for more details on the optional matplotlib backends and the capabilities they
provide.
2.2. Installing from source 7",0.0070500373840332,matplotlib_1-21_pdf.pdf ~ 14,"
Matplotlib, Release 2.0.2
     python -m pip install -U pip setuptools
python -m pip install matplotlib
 In case Python 2.7 or 3.4 are not installed for all users, the Microsoft Visual C++ 2008 (64 bit or 32 bit for Python 2.7) or Microsoft Visual C++ 2010 (64 bit or 32 bit for Python 3.4) redistributable packages need to be installed.
Matplotlib depends on Pillow for reading and saving JPEG, BMP, and TIFF image files. Matplotlib requires MiKTeX and GhostScript for rendering text with LaTeX. FFmpeg, avconv, mencoder, or ImageMagick are required for the animation module.
The following backends should work out of the box: agg, tkagg, ps, pdf and svg. For other backends you may need to install pycairo, PyQt4, PyQt5, PySide, wxPython, PyGTK, Tornado, or GhostScript.
TkAgg is probably the best backend for interactive use from the standard Python shell or IPython. It is enabled as the default backend for the official binaries. GTK3 is not supported on Windows.
The Windows wheels (*.whl) on the PyPI download page do not contain test data or example code. If you want to try the many demos that come in the matplotlib source distribution, down- load the *.tar.gz file and look in the examples subdirectory. To run the test suite, copy the lib\matplotlib\tests and lib\mpl_toolkits\tests directories from the source distribution to sys. prefix\Lib\site-packages\matplotlib and sys.prefix\Lib\site-packages\mpl_toolkits respectively, and install nose, mock, Pillow, MiKTeX, GhostScript, ffmpeg, avconv, mencoder, ImageMag- ick, and Inkscape.
2.2 Installing from source
If you are interested in contributing to matplotlib development, running the latest source code, or just like to build everything yourself, it is not difficult to build matplotlib from source. Grab the latest tar.gz release file from the PyPI files page, or if you want to develop matplotlib or just need the latest bugfixed version, grab the latest git version Source install from git.
The standard environment variables CC, CXX, PKG_CONFIG are respected. This means you can set them if your toolchain is prefixed. This may be used for cross compiling.
Once you have satisfied the requirements detailed below (mainly python, numpy, libpng and freetype), you can build matplotlib.
We provide a setup.cfg file that goes with setup.py which you can use to customize the build process. For example, which default backend to use, whether some of the optional libraries that matplotlib ships with are installed, and so on. This file will be particularly useful to those packaging matplotlib.
    export CC=x86_64-pc-linux-gnu-gcc
export CXX=x86_64-pc-linux-gnu-g++
export PKG_CONFIG=x86_64-pc-linux-gnu-pkg-config
     cd matplotlib
python setup.py build
python setup.py install
  6 Chapter2. Installing
",0.03376714161119864,0.13691931540342298,2110,0.03393723503512432,0.13793103448275862,2106,0.03376714161119864,0.13691931540342298,2110
71,15.0,matplotlib_1-21_pdf.pdf ~ 15,"Matplotlib, Release 2.0.2
tk 8.3 or later, not 8.6.0 or 8.6.1 The TCL/Tk widgets library used by the TkAgg backend.
Versions 8.6.0 and 8.6.1 are known to have issues that may result in segfaults when closing multiple
windows in the wrong order.
pyqt 4.4 or later The Qt4 widgets library python wrappers for the Qt4Agg backend
pygtk 2.4 or later The python wrappers for the GTK widgets library for use with the GTK or GTKAgg
backend
wxpython 2.8 or later The python wrappers for the wx widgets library for use with the WX or WXAgg
backend
Optional external programs
ﬀmpeg/avconv or mencoder Required for the animation module to be save out put to movie formats.
ImageMagick Required for the animation module to be able to save to animated gif.
Optional dependencies
Pillow If Pillow is installed, matplotlib can read and write a larger selection of image ﬁle formats.
pkg-conﬁg A tool used to ﬁnd required non-python libraries. This is not strictly required, but can make
installation go more smoothly if the libraries and headers are not in the expected locations.
Required libraries that ship with matplotlib
agg 2.4 The antigrain C++ rendering engine. matplotlib links against the agg template source statically, so
it will not aﬀect anything on your system outside of matplotlib.
qhull 2012.1 A library for computing Delaunay triangulations.
ttconv truetype font utility
2.2.2 Building on Linux
It is easiest to use your system package manager to install the dependencies.
If you are on Debian/Ubuntu, you can get all the dependencies required to build matplotlib with:
sudo apt-get build-dep python-matplotlib
If you are on Fedora/RedHat, you can get all the dependencies required to build matplotlib by ﬁrst installing
yum-builddepand then running:
su -c ""yum-builddep python-matplotlib""
This does not build matplotlib, but it does get the install the build dependencies, which will make building
from source easier.
8 Chapter 2. Installing",0.0066568851470947,"Matplotlib, Release 2.0.2
tk 8.3 or later, not 8.6.0 or 8.6.1 The TCL/Tk widgets library used by the TkAgg backend.
Versions 8.6.0 and 8.6.1 are known to have issues that may result in segfaults when closing multiple
windows in the wrong order.
pyqt 4.4 or later The Qt4 widgets library python wrappers for the Qt4Agg backend
pygtk 2.4 or later The python wrappers for the GTK widgets library for use with the GTK or GTKAgg
backend
wxpython 2.8 or later The python wrappers for the wx widgets library for use with the WX or WXAgg
backend
Optional external programs
ﬀmpeg/avconv or mencoder Required for the animation module to be save out put to movie formats.
ImageMagick Required for the animation module to be able to save to animated gif.
Optional dependencies
Pillow If Pillow is installed, matplotlib can read and write a larger selection of image ﬁle formats.
pkg-conﬁg A tool used to ﬁnd required non-python libraries. This is not strictly required, but can make
installation go more smoothly if the libraries and headers are not in the expected locations.
Required libraries that ship with matplotlib
agg 2.4 The antigrain C++ rendering engine. matplotlib links against the agg template source statically, so
it will not aﬀect anything on your system outside of matplotlib.
qhull 2012.1 A library for computing Delaunay triangulations.
ttconv truetype font utility
2.2.2 Building on Linux
It is easiest to use your system package manager to install the dependencies.
If you are on Debian/Ubuntu, you can get all the dependencies required to build matplotlib with:
sudo apt-get build-dep python-matplotlib
If you are on Fedora/RedHat, you can get all the dependencies required to build matplotlib by ﬁrst installing
yum-builddep and then running:
su -c ""yum-builddep python-matplotlib""
This does not build matplotlib, but it does get the install the build dependencies, which will make building
from source easier.
8
Chapter 2. Installing
",0.0018203258514404,"Matplotlib, Release 2.0.2
tk 8.3 or later, not 8.6.0 or 8.6.1 The TCL/Tk widgets library used by the TkAgg backend.
Versions 8.6.0 and 8.6.1 are known to have issues that may result in segfaults when closing multiple
windows in the wrong order.
pyqt 4.4 or later The Qt4 widgets library python wrappers for the Qt4Agg backend
pygtk 2.4 or later The python wrappers for the GTK widgets library for use with the GTK or GTKAgg
backend
wxpython 2.8 or later The python wrappers for the wx widgets library for use with the WX or WXAgg
backend
Optional external programs
ﬀmpeg/avconv or mencoder Required for the animation module to be save out put to movie formats.
ImageMagick Required for the animation module to be able to save to animated gif.
Optional dependencies
Pillow If Pillow is installed, matplotlib can read and write a larger selection of image ﬁle formats.
pkg-conﬁg A tool used to ﬁnd required non-python libraries. This is not strictly required, but can make
installation go more smoothly if the libraries and headers are not in the expected locations.
Required libraries that ship with matplotlib
agg 2.4 The antigrain C++ rendering engine. matplotlib links against the agg template source statically, so
it will not aﬀect anything on your system outside of matplotlib.
qhull 2012.1 A library for computing Delaunay triangulations.
ttconv truetype font utility
2.2.2 Building on Linux
It is easiest to use your system package manager to install the dependencies.
If you are on Debian/Ubuntu, you can get all the dependencies required to build matplotlib with:
sudo apt-get build-dep python-matplotlib
If you are on Fedora/RedHat, you can get all the dependencies required to build matplotlib by ﬁrst installing
yum-builddepand then running:
su -c ""yum-builddep python-matplotlib""
This does not build matplotlib, but it does get the install the build dependencies, which will make building
from source easier.
8 Chapter 2. Installing",0.0081129074096679,matplotlib_1-21_pdf.pdf ~ 15,"
If you have installed prerequisites to nonstandard places and need to inform matplotlib where they are, edit setupext.py and add the base dirs to the basedir dictionary entry for your sys.platform. e.g., if the header to some required library is in /some/path/include/someheader.h, put /some/path in the basedir list for your platform.
2.2.1 Build requirements
These are external packages which you will need to install before installing matplotlib. If you are building on OSX, see Building on OSX. If you are building on Windows, see Building on Windows. If you are installing dependencies with a package manager on Linux, you may need to install the development packages (look for a “-dev” postfix) in addition to the libraries themselves.
Required Dependencies
python 2.7, 3.4, 3.5 or 3.6 Download python.
numpy 1.7.1 (or later) array support for python (download numpy)
setuptools Setuptools provides extensions for python package installation.
dateutil 1.1 or later Provides extensions to python datetime handling. If using pip, easy_install or in- stalling from source, the installer will attempt to download and install python_dateutil from PyPI.
pyparsing Required for matplotlib’s mathtext math rendering support. If using pip, easy_install or in- stalling from source, the installer will attempt to download and install pyparsing from PyPI.
libpng 1.2 (or later) library for loading and saving PNG files (download). libpng requires zlib.
pytz Used to manipulate time-zone aware datetimes. https://pypi.python.org/pypi/pytz
FreeType 2.3 or later Library for reading true type font files. If using pip, easy_install or installing from source, the installer will attempt to locate FreeType in expected locations. If it cannot, try installing pkg-config, a tool used to find required non-python libraries.
cycler 0.10.0 or later Composable cycle class used for constructing style-cycles six Required for compatibility between python 2 and python 3
Dependencies for python 2
functools32 Required for compatibility if running on Python 2.7.
subprocess32 Optional, unix only. Backport of the subprocess standard library from 3.2+ for Python 2.7.
It provides better error messages and timeout support.
Optional GUI framework
These are optional packages which you may want to install to use matplotlib with a user interface toolkit. See What is a backend? for more details on the optional matplotlib backends and the capabilities they provide.
Matplotlib, Release 2.0.2
  2.2. Installingfromsource 7

",0.01736333470799253,0.15976331360946747,1864,0.01740955257741539,0.15976331360946747,1862,0.01736333470799253,0.15976331360946747,1864
72,16.0,matplotlib_1-21_pdf.pdf ~ 16,"Matplotlib, Release 2.0.2
2.2.3 Building on OSX
The build situation on OSX is complicated by the various places one can get the libpng and freetype re-
quirements (darwinports, ﬁnk, /usr/X11R6) and the di ﬀerent architectures (e.g., x86, ppc, universal) and
the diﬀerent OSX version (e.g., 10.4 and 10.5). We recommend that you build the way we do for the OSX
release: get the source from the tarball or the git repository and follow the instruction in README.osx.
2.2.4 Building on Windows
The Python shipped from https://www.python.org is compiled with Visual Studio 2008 for versions before
3.3, Visual Studio 2010 for 3.3 and 3.4, and Visual Studio 2015 for 3.5 and 3.6. Python extensions are
recommended to be compiled with the same compiler.
Since there is no canonical Windows package manager, the methods for building freetype, zlib, and libpng
from source code are documented as a build script at matplotlib-winbuild.
2.2. Installing from source 9",0.0035691261291503,"Matplotlib, Release 2.0.2
2.2.3 Building on OSX
The build situation on OSX is complicated by the various places one can get the libpng and freetype re-
quirements (darwinports, ﬁnk, /usr/X11R6) and the diﬀerent architectures (e.g., x86, ppc, universal) and
the diﬀerent OSX version (e.g., 10.4 and 10.5). We recommend that you build the way we do for the OSX
release: get the source from the tarball or the git repository and follow the instruction in README.osx.
2.2.4 Building on Windows
The Python shipped from https://www.python.org is compiled with Visual Studio 2008 for versions before
3.3, Visual Studio 2010 for 3.3 and 3.4, and Visual Studio 2015 for 3.5 and 3.6. Python extensions are
recommended to be compiled with the same compiler.
Since there is no canonical Windows package manager, the methods for building freetype, zlib, and libpng
from source code are documented as a build script at matplotlib-winbuild.
2.2. Installing from source
9
",0.0009820461273193,"Matplotlib, Release 2.0.2
2.2.3 Building on OSX
The build situation on OSX is complicated by the various places one can get the libpng and freetype re-
quirements (darwinports, ﬁnk, /usr/X11R6) and the di ﬀerent architectures (e.g., x86, ppc, universal) and
the diﬀerent OSX version (e.g., 10.4 and 10.5). We recommend that you build the way we do for the OSX
release: get the source from the tarball or the git repository and follow the instruction in README.osx.
2.2.4 Building on Windows
The Python shipped from https://www.python.org is compiled with Visual Studio 2008 for versions before
3.3, Visual Studio 2010 for 3.3 and 3.4, and Visual Studio 2015 for 3.5 and 3.6. Python extensions are
recommended to be compiled with the same compiler.
Since there is no canonical Windows package manager, the methods for building freetype, zlib, and libpng
from source code are documented as a build script at matplotlib-winbuild.
2.2. Installing from source 9",0.0030610561370849,matplotlib_1-21_pdf.pdf ~ 16,"
Matplotlib, Release 2.0.2
 tk 8.3 or later, not 8.6.0 or 8.6.1 The TCL/Tk widgets library used by the TkAgg backend.
Versions 8.6.0 and 8.6.1 are known to have issues that may result in segfaults when closing multiple
windows in the wrong order.
pyqt 4.4 or later The Qt4 widgets library python wrappers for the Qt4Agg backend
pygtk 2.4 or later The python wrappers for the GTK widgets library for use with the GTK or GTKAgg backend
wxpython 2.8 or later The python wrappers for the wx widgets library for use with the WX or WXAgg backend
Optional external programs
ffmpeg/avconv or mencoder Required for the animation module to be save out put to movie formats. ImageMagick Required for the animation module to be able to save to animated gif.
Optional dependencies
Pillow If Pillow is installed, matplotlib can read and write a larger selection of image file formats. pkg-config A tool used to find required non-python libraries. This is not strictly required, but can make
installation go more smoothly if the libraries and headers are not in the expected locations.
Required libraries that ship with matplotlib
agg 2.4 The antigrain C++ rendering engine. matplotlib links against the agg template source statically, so it will not affect anything on your system outside of matplotlib.
qhull 2012.1 A library for computing Delaunay triangulations. ttconv truetype font utility
2.2.2 Building on Linux
It is easiest to use your system package manager to install the dependencies.
If you are on Debian/Ubuntu, you can get all the dependencies required to build matplotlib with: sudo apt-get build-dep python-matplotlib
If you are on Fedora/RedHat, you can get all the dependencies required to build matplotlib by first installing yum-builddep and then running:
su -c ""yum-builddep python-matplotlib""
This does not build matplotlib, but it does get the install the build dependencies, which will make building
from source easier.
       8 Chapter2. Installing

",0.006458559786029943,0.10980392156862745,1485,0.006415673727842556,0.11067193675889328,1485,0.006458559786029943,0.10980392156862745,1485
73,17.0,matplotlib_1-21_pdf.pdf ~ 17,"Matplotlib, Release 2.0.2
10 Chapter 2. Installing",0.0004060268402099,"Matplotlib, Release 2.0.2
10
Chapter 2. Installing
",0.0001180171966552,"Matplotlib, Release 2.0.2
10 Chapter 2. Installing",0.0003426074981689,matplotlib_1-21_pdf.pdf ~ 17,"
2.2.3 Building on OSX
The build situation on OSX is complicated by the various places one can get the libpng and freetype re- quirements (darwinports, fink, /usr/X11R6) and the different architectures (e.g., x86, ppc, universal) and the different OSX version (e.g., 10.4 and 10.5). We recommend that you build the way we do for the OSX release: get the source from the tarball or the git repository and follow the instruction in README.osx.
2.2.4 Building on Windows
The Python shipped from https://www.python.org is compiled with Visual Studio 2008 for versions before 3.3, Visual Studio 2010 for 3.3 and 3.4, and Visual Studio 2015 for 3.5 and 3.6. Python extensions are recommended to be compiled with the same compiler.
Since there is no canonical Windows package manager, the methods for building freetype, zlib, and libpng from source code are documented as a build script at matplotlib-winbuild.
Matplotlib, Release 2.0.2
  2.2. Installingfromsource 9

",1.902874199296562e-10,0.02857142857142857,914,1.902874199296562e-10,0.02857142857142857,913,1.902874199296562e-10,0.02857142857142857,914
74,18.0,matplotlib_1-21_pdf.pdf ~ 18,"CHAPTER
THREE
TUTORIALS
3.1 Introductory
3.1.1 Pyplot tutorial
matplotlib.pyplot is a collection of command style functions that make matplotlib work like MATLAB.
Each pyplotfunction makes some change to a ﬁgure: e.g., creates a ﬁgure, creates a plotting area in a ﬁgure,
plots some lines in a plotting area, decorates the plot with labels, etc. Inmatplotlib.pyplot various states
are preserved across function calls, so that it keeps track of things like the current ﬁgure and plotting area,
and the plotting functions are directed to the current axes (please note that “axes” here and in most places in
the documentation refers to the axes part of a ﬁgure and not the strict mathematical term for more than one
axis).
import matplotlib.pyplot as plt
plt.plot([1,2,3,4])
plt.ylabel('some numbers')
plt.show()
11",0.0050811767578125,"CHAPTER
THREE
TUTORIALS
3.1 Introductory
3.1.1 Pyplot tutorial
matplotlib.pyplot is a collection of command style functions that make matplotlib work like MATLAB.
Each pyplot function makes some change to a ﬁgure: e.g., creates a ﬁgure, creates a plotting area in a ﬁgure,
plots some lines in a plotting area, decorates the plot with labels, etc. In matplotlib.pyplot various states
are preserved across function calls, so that it keeps track of things like the current ﬁgure and plotting area,
and the plotting functions are directed to the current axes (please note that “axes” here and in most places in
the documentation refers to the axes part of a ﬁgure and not the strict mathematical term for more than one
axis).
import matplotlib.pyplot as plt
plt.plot([1,2,3,4])
plt.ylabel('some numbers')
plt.show()
11
",0.0011200904846191,"CHAPTER
THREE
TUTORIALS
3.1 Introductory
3.1.1 Pyplot tutorial
matplotlib.pyplot is a collection of command style functions that make matplotlib work like MATLAB.
Each pyplotfunction makes some change to a ﬁgure: e.g., creates a ﬁgure, creates a plotting area in a ﬁgure,
plots some lines in a plotting area, decorates the plot with labels, etc. Inmatplotlib.pyplot various states
are preserved across function calls, so that it keeps track of things like the current ﬁgure and plotting area,
and the plotting functions are directed to the current axes (please note that “axes” here and in most places in
the documentation refers to the axes part of a ﬁgure and not the strict mathematical term for more than one
axis).
import matplotlib.pyplot as plt
plt.plot([1,2,3,4])
plt.ylabel('some numbers')
plt.show()
11",0.0049121379852294,matplotlib_1-21_pdf.pdf ~ 18,"
Matplotlib, Release 2.0.2
  10 Chapter2. Installing

 matplotlib.pyplot is a collection of command style functions that make matplotlib work like MATLAB. Each pyplot function makes some change to a figure: e.g., creates a figure, creates a plotting area in a figure, plots some lines in a plotting area, decorates the plot with labels, etc. In matplotlib.pyplot various states are preserved across function calls, so that it keeps track of things like the current figure and plotting area, and the plotting functions are directed to the current axes (please note that “axes” here and in most places in the documentation refers to the axes part of a figure and not the strict mathematical term for more than one axis).
",0.7210870470780155,0.6767676767676768,167,0.7649896080885014,0.711340206185567,166,0.7210870470780155,0.6767676767676768,167
75,19.0,matplotlib_1-21_pdf.pdf ~ 19,"Matplotlib, Release 2.0.2
0.0 0.5 1.0 1.5 2.0 2.5 3.0
1.0
1.5
2.0
2.5
3.0
3.5
4.0some numbers
You may be wondering why the x-axis ranges from 0-3 and the y-axis from 1-4. If you provide a single
list or array to the plot() command, matplotlib assumes it is a sequence of y values, and automatically
generates the x values for you. Since python ranges start with 0, the default x vector has the same length as
y but starts with 0. Hence the x data are [0,1,2,3].
plot() is a versatile command, and will take an arbitrary number of arguments. For example, to plot x
versus y, you can issue the command:
plt.plot([1, 2, 3, 4], [1, 4, 9, 16])
For every x, y pair of arguments, there is an optional third argument which is the format string that indicates
the color and line type of the plot. The letters and symbols of the format string are from MATLAB, and you
concatenate a color string with a line style string. The default format string is ‘b-‘, which is a solid blue line.
For example, to plot the above with red circles, you would issue
import matplotlib.pyplot as plt
plt.plot([1,2,3,4], [1,4,9,16], 'ro')
plt.axis([0, 6, 0, 20])
plt.show()
12 Chapter 3. Tutorials",0.0073280334472656,"Matplotlib, Release 2.0.2
0.0
0.5
1.0
1.5
2.0
2.5
3.0
1.0
1.5
2.0
2.5
3.0
3.5
4.0
some numbers
You may be wondering why the x-axis ranges from 0-3 and the y-axis from 1-4. If you provide a single
list or array to the plot() command, matplotlib assumes it is a sequence of y values, and automatically
generates the x values for you. Since python ranges start with 0, the default x vector has the same length as
y but starts with 0. Hence the x data are [0,1,2,3].
plot() is a versatile command, and will take an arbitrary number of arguments. For example, to plot x
versus y, you can issue the command:
plt.plot([1, 2, 3, 4], [1, 4, 9, 16])
For every x, y pair of arguments, there is an optional third argument which is the format string that indicates
the color and line type of the plot. The letters and symbols of the format string are from MATLAB, and you
concatenate a color string with a line style string. The default format string is ‘b-‘, which is a solid blue line.
For example, to plot the above with red circles, you would issue
import matplotlib.pyplot as plt
plt.plot([1,2,3,4], [1,4,9,16], 'ro')
plt.axis([0, 6, 0, 20])
plt.show()
12
Chapter 3. Tutorials
",0.0014421939849853,"Matplotlib, Release 2.0.2
0.0 0.5 1.0 1.5 2.0 2.5 3.0
1.0
1.5
2.0
2.5
3.0
3.5
4.0some numbers
You may be wondering why the x-axis ranges from 0-3 and the y-axis from 1-4. If you provide a single
list or array to the plot() command, matplotlib assumes it is a sequence of y values, and automatically
generates the x values for you. Since python ranges start with 0, the default x vector has the same length as
y but starts with 0. Hence the x data are [0,1,2,3].
plot() is a versatile command, and will take an arbitrary number of arguments. For example, to plot x
versus y, you can issue the command:
plt.plot([1, 2, 3, 4], [1, 4, 9, 16])
For every x, y pair of arguments, there is an optional third argument which is the format string that indicates
the color and line type of the plot. The letters and symbols of the format string are from MATLAB, and you
concatenate a color string with a line style string. The default format string is ‘b-‘, which is a solid blue line.
For example, to plot the above with red circles, you would issue
import matplotlib.pyplot as plt
plt.plot([1,2,3,4], [1,4,9,16], 'ro')
plt.axis([0, 6, 0, 20])
plt.show()
12 Chapter 3. Tutorials",0.0066769123077392,matplotlib_1-21_pdf.pdf ~ 19,"
CHAPTER THREE
TUTORIALS
 3.1 Introductory 3.1.1 Pyplot tutorial
    import matplotlib.pyplot as plt plt.plot([1,2,3,4]) plt.ylabel('some numbers') plt.show()
  11
",0.011171268004933687,0.03333333333333333,1047,0.011118196347379395,0.033112582781456956,1048,0.011171268004933687,0.03333333333333333,1047
77,1.0,chess_pdf.pdf ~ 1,"Author: Prateek   
 
  2 
 
Chess, the game of kings and queens, has captivated minds for centuries. From its 
humble beginnings in ancient India to its current status as a global phenomenon, 
chess has evolved into a complex and fascinating pursuit. Let's embark on a journey 
through time to explore the development of this royal game. 
From Chaturanga to Chess: The Birth of a Legend 
Our story begins in India, around 600 CE, with a game called chaturanga. This early ancestor of 
chess represented the four divisions of the Indian military: infantry, cavalry, elephants, and 
chariots. As trade routes expanded, so did the reach of this intriguing game. Chaturanga spread 
to Persia, where it underwent its first transformation. The Persians modified the pieces and 
rules, developing it into a game called Shatranj. From Persia, the game continued its journey, 
carried by traders and conquerors alike. 
The European Evolution: Pawns Get a Boost 
By the 10th century, chess had made its way to Europe through North Africa and the expanding 
Arabian empire. However, it wasn't until around 1200 CE that the game underwent dramatic 
changes, shaping it into the chess we know today. In Italy and Spain, innovative players 
introduced exciting new rules: 
• Pawns gained the ability to move two squares on their first move 
• Bishops became long-range pieces, dominating diagonals 
• Queens transformed into the most powerful piece on the board 
These changes injected new life into the game, setting the stage for centuries of strategic 
exploration. 
Coffee House Chess: The Game Goes Public 
During the 18th century, the chess world shifted its focus to Western Europe. Cities like London 
and Paris became hubs of chess activity, with matches played in bustling coffee houses. This 
period saw chess transition from a pastime of the nobility to a game enjoyed by a broader 
audience. ",0.0111701488494873,"Author: Prateek 
 
 
 
2
 
Chess, the game of kings and queens, has captivated minds for centuries. From its 
humble beginnings in ancient India to its current status as a global phenomenon, 
chess has evolved into a complex and fascinating pursuit. Let's embark on a journey 
through time to explore the development of this royal game. 
From Chaturanga to Chess: The Birth of a Legend 
Our story begins in India, around 600 CE, with a game called chaturanga. This early ancestor of 
chess represented the four divisions of the Indian military: infantry, cavalry, elephants, and 
chariots. As trade routes expanded, so did the reach of this intriguing game. Chaturanga spread 
to Persia, where it underwent its first transformation. The Persians modified the pieces and 
rules, developing it into a game called Shatranj. From Persia, the game continued its journey, 
carried by traders and conquerors alike. 
The European Evolution: Pawns Get a Boost 
By the 10th century, chess had made its way to Europe through North Africa and the expanding 
Arabian empire. However, it wasn't until around 1200 CE that the game underwent dramatic 
changes, shaping it into the chess we know today. In Italy and Spain, innovative players 
introduced exciting new rules: 
• Pawns gained the ability to move two squares on their first move 
• Bishops became long-range pieces, dominating diagonals 
• Queens transformed into the most powerful piece on the board 
These changes injected new life into the game, setting the stage for centuries of strategic 
exploration. 
Coffee House Chess: The Game Goes Public 
During the 18th century, the chess world shifted its focus to Western Europe. Cities like London 
and Paris became hubs of chess activity, with matches played in bustling coffee houses. This 
period saw chess transition from a pastime of the nobility to a game enjoyed by a broader 
audience. 
",0.00462007522583,"Author: Prateek   
 
  2 
 
Chess, the game of kings and queens, has captivated minds for centuries. From its 
humble beginnings in ancient India to its current status as a global phenomenon, 
chess has evolved into a complex and fascinating pursuit. Let's embark on a journey 
through time to explore the development of this royal game. 
From Chaturanga to Chess: The Birth of a Legend 
Our story begins in India, around 600 CE, with a game called chaturanga. This early ancestor of 
chess represented the four divisions of the Indian military: infantry, cavalry, elephants, and 
chariots. As trade routes expanded, so did the reach of this intriguing game. Chaturanga spread 
to Persia, where it underwent its first transformation. The Persians modified the pieces and 
rules, developing it into a game called Shatranj. From Persia, the game continued its journey, 
carried by traders and conquerors alike. 
The European Evolution: Pawns Get a Boost 
By the 10th century, chess had made its way to Europe through North Africa and the expanding 
Arabian empire. However, it wasn't until around 1200 CE that the game underwent dramatic 
changes, shaping it into the chess we know today. In Italy and Spain, innovative players 
introduced exciting new rules: 
• Pawns gained the ability to move two squares on their first move 
• Bishops became long-range pieces, dominating diagonals 
• Queens transformed into the most powerful piece on the board 
These changes injected new life into the game, setting the stage for centuries of strategic 
exploration. 
Coffee House Chess: The Game Goes Public 
During the 18th century, the chess world shifted its focus to Western Europe. Cities like London 
and Paris became hubs of chess activity, with matches played in bustling coffee houses. This 
period saw chess transition from a pastime of the nobility to a game enjoyed by a broader 
audience. ",0.0109038352966308,chess_pdf.pdf ~ 1,"
🏆 Checkmate Through Time: The Global Conquest of Chess 

 
From Chaturanga to Chess: The Birth of a Legend ........................................................... 2 
The European Evolution: Pawns Get a Boost ................................................................... 2 
Coffee House Chess: The Game Goes Public .............................................................. 2 
The Birth of Competitive Chess ..................................................................................... 3 
Chess in the Modern Era: From Grandmasters to Computers .......................................... 3 
 
  

​ 

​ 

​ 

​​ 

 

 
",0.06500665675956029,0.1,1644,0.06500665675956029,0.1,1642,0.06500665675956029,0.1,1644
78,2.0,chess_pdf.pdf ~ 2,"Author: Prateek   
 
  3 
 
The Birth of Competitive Chess 
The 19th century marked a turning point for chess as it evolved into a competitive sport: 
• 1851: The first chess tournament was held in London, won by German player Adolf 
Anderssen 
• 1886: The first official World Chess Championship took place 
As chess gained popularity, the need for standardization grew. In 1924, the World Chess 
Federation (FIDE) was founded in Paris, taking responsibility for organizing international 
competitions and awarding titles. 
Chess in the Modern Era: From Grandmasters to 
Computers 
The 20th century saw chess reach new heights of complexity and popularity: 
• 1914: Czar Nicholas II of Russia immortalized the term ""Grandmaster"" 
• 1950s-1980s: Soviet players dominated the chess world 
• 1997: IBM's Deep Blue defeated world champion Garry Kasparov, marking a milestone 
in computer chess 
Today, chess continues to evolve. Online platforms have made the game more accessible than 
ever, allowing players from around the world to compete and learn together. The royal game 
that began in India 1,500 years ago has truly conquered the world, with FIDE reporting 172 
member countries. Whether you're a beginner or a seasoned player, the rich history of chess 
adds depth to every move you make on the board. So next time you sit down for a game, 
remember you're not just playing chess – you're participating in a centuries-old tradition of 
strategy, skill, and intellectual combat. 
 ",0.009916067123413,"Author: Prateek 
 
 
 
3
 
The Birth of Competitive Chess 
The 19th century marked a turning point for chess as it evolved into a competitive sport: 
• 1851: The first chess tournament was held in London, won by German player Adolf 
Anderssen 
• 1886: The first official World Chess Championship took place 
As chess gained popularity, the need for standardization grew. In 1924, the World Chess 
Federation (FIDE) was founded in Paris, taking responsibility for organizing international 
competitions and awarding titles. 
Chess in the Modern Era: From Grandmasters to 
Computers 
The 20th century saw chess reach new heights of complexity and popularity: 
• 1914: Czar Nicholas II of Russia immortalized the term ""Grandmaster"" 
• 1950s-1980s: Soviet players dominated the chess world 
• 1997: IBM's Deep Blue defeated world champion Garry Kasparov, marking a milestone 
in computer chess 
Today, chess continues to evolve. Online platforms have made the game more accessible than 
ever, allowing players from around the world to compete and learn together. The royal game 
that began in India 1,500 years ago has truly conquered the world, with FIDE reporting 172 
member countries. Whether you're a beginner or a seasoned player, the rich history of chess 
adds depth to every move you make on the board. So next time you sit down for a game, 
remember you're not just playing chess – you're participating in a centuries-old tradition of 
strategy, skill, and intellectual combat. 
 
",0.002810001373291,"Author: Prateek   
 
  3 
 
The Birth of Competitive Chess 
The 19th century marked a turning point for chess as it evolved into a competitive sport: 
• 1851: The first chess tournament was held in London, won by German player Adolf 
Anderssen 
• 1886: The first official World Chess Championship took place 
As chess gained popularity, the need for standardization grew. In 1924, the World Chess 
Federation (FIDE) was founded in Paris, taking responsibility for organizing international 
competitions and awarding titles. 
Chess in the Modern Era: From Grandmasters to 
Computers 
The 20th century saw chess reach new heights of complexity and popularity: 
• 1914: Czar Nicholas II of Russia immortalized the term ""Grandmaster"" 
• 1950s-1980s: Soviet players dominated the chess world 
• 1997: IBM's Deep Blue defeated world champion Garry Kasparov, marking a milestone 
in computer chess 
Today, chess continues to evolve. Online platforms have made the game more accessible than 
ever, allowing players from around the world to compete and learn together. The royal game 
that began in India 1,500 years ago has truly conquered the world, with FIDE reporting 172 
member countries. Whether you're a beginner or a seasoned player, the rich history of chess 
adds depth to every move you make on the board. So next time you sit down for a game, 
remember you're not just playing chess – you're participating in a centuries-old tradition of 
strategy, skill, and intellectual combat. 
 ",0.0096468925476074,chess_pdf.pdf ~ 2,"
Chess, the game of kings and queens, has captivated minds for centuries. From its 
humble beginnings in ancient India to its current status as a global phenomenon, 
chess has evolved into a complex and fascinating pursuit. Let's embark on a journey 
through time to explore the development of this royal game. 

From Chaturanga to Chess: The Birth of a Legend 
Our story begins in India, around 600 CE, with a game called chaturanga. This early ancestor of 
chess represented the four divisions of the Indian military: infantry, cavalry, elephants, and 
chariots. As trade routes expanded, so did the reach of this intriguing game. Chaturanga spread 
to Persia, where it underwent its first transformation. The Persians modified the pieces and 
rules, developing it into a game called Shatranj. From Persia, the game continued its journey, 
carried by traders and conquerors alike. 

The European Evolution: Pawns Get a Boost 
By the 10th century, chess had made its way to Europe through North Africa and the expanding 
Arabian empire. However, it wasn't until around 1200 CE that the game underwent dramatic 
changes, shaping it into the chess we know today. In Italy and Spain, innovative players 
introduced exciting new rules: 

    Pawns gained the ability to move two squares on their first move 
    Bishops became long-range pieces, dominating diagonals 
    Queens transformed into the most powerful piece on the board 
These changes injected new life into the game, setting the stage for centuries of strategic 
exploration. 

Coffee House Chess: The Game Goes Public 
During the 18th century, the chess world shifted its focus to Western Europe. Cities like London 
and Paris became hubs of chess activity, with matches played in bustling coffee houses. This 
period saw chess transition from a pastime of the nobility to a game enjoyed by a broader 
audience. 

",0.01279575382995231,0.1162079510703364,1376,0.01279575382995231,0.1162079510703364,1376,0.01279575382995231,0.1162079510703364,1376
80,1.0,sleep_pdf.pdf ~ 1," 
 
 
 
Imagine your body as a smartphone. Just like a phone needs charging, your body needs sleep 
to recharge and function properly. When you don't get enough sleep, everything starts to 
malfunction. Let's explore what happens when we don't get enough sleep and how it affects 
our daily lives. 
What Happens When You Don't Sleep Enough? 
Your Brain Goes Fuzzy 
When you don't get enough sleep, your brain doesn't work as well as it should. It's like 
trying to use a computer with a dying battery. Here's what happens: 
• Thinking becomes difficult: Simple tasks feel much harder. 
• Memory gets weak: You might forget important things. 
• Concentration drops dramatically: Focusing on anything becomes a challenge. 
• You feel like you're walking through fog: Everything seems unclear and confusing. 
For example, if you're a student trying to study after a sleepless night, you might read the 
same paragraph over and over without understanding it. Or if you're at work, you might 
make silly mistakes that you normally wouldn’t. 
Your Emotions Go Crazy 
Lack of sleep doesn't just affect your thinking - it also messes with your feelings. Your 
emotions can become like a roller coaster: 
• You become super irritable: Little things that normally wouldn't bother you suddenly 
feel very annoying. 
• Small problems feel like huge mountains: A minor setback might feel like the end of 
the world. 
• Stress feels overwhelming: Your ability to handle pressure decreases. 
• You might feel sad or anxious more often: Sleep deprivation can worsen mood 
disorders. ",0.010059118270874," 
 
 
 
Imagine your body as a smartphone. Just like a phone needs charging, your body needs sleep 
to recharge and function properly. When you don't get enough sleep, everything starts to 
malfunction. Let's explore what happens when we don't get enough sleep and how it affects 
our daily lives. 
What Happens When You Don't Sleep Enough? 
Your Brain Goes Fuzzy 
When you don't get enough sleep, your brain doesn't work as well as it should. It's like 
trying to use a computer with a dying battery. Here's what happens: 
• Thinking becomes difficult: Simple tasks feel much harder. 
• Memory gets weak: You might forget important things. 
• Concentration drops dramatically: Focusing on anything becomes a challenge. 
• You feel like you're walking through fog: Everything seems unclear and confusing. 
For example, if you're a student trying to study after a sleepless night, you might read the 
same paragraph over and over without understanding it. Or if you're at work, you might 
make silly mistakes that you normally wouldn’t. 
Your Emotions Go Crazy 
Lack of sleep doesn't just affect your thinking - it also messes with your feelings. Your 
emotions can become like a roller coaster: 
• You become super irritable: Little things that normally wouldn't bother you suddenly 
feel very annoying. 
• Small problems feel like huge mountains: A minor setback might feel like the end of 
the world. 
• Stress feels overwhelming: Your ability to handle pressure decreases. 
• You might feel sad or anxious more often: Sleep deprivation can worsen mood 
disorders. 
",0.0048158168792724," 
 
 
 
Imagine your body as a smartphone. Just like a phone needs charging, your body needs sleep 
to recharge and function properly. When you don't get enough sleep, everything starts to 
malfunction. Let's explore what happens when we don't get enough sleep and how it affects 
our daily lives. 
What Happens When You Don't Sleep Enough? 
Your Brain Goes Fuzzy 
When you don't get enough sleep, your brain doesn't work as well as it should. It's like 
trying to use a computer with a dying battery. Here's what happens: 
• Thinking becomes difficult: Simple tasks feel much harder. 
• Memory gets weak: You might forget important things. 
• Concentration drops dramatically: Focusing on anything becomes a challenge. 
• You feel like you're walking through fog: Everything seems unclear and confusing. 
For example, if you're a student trying to study after a sleepless night, you might read the 
same paragraph over and over without understanding it. Or if you're at work, you might 
make silly mistakes that you normally wouldn’t. 
Your Emotions Go Crazy 
Lack of sleep doesn't just affect your thinking - it also messes with your feelings. Your 
emotions can become like a roller coaster: 
• You become super irritable: Little things that normally wouldn't bother you suddenly 
feel very annoying. 
• Small problems feel like huge mountains: A minor setback might feel like the end of 
the world. 
• Stress feels overwhelming: Your ability to handle pressure decreases. 
• You might feel sad or anxious more often: Sleep deprivation can worsen mood 
disorders. ",0.0103349685668945,sleep_pdf.pdf ~ 1,"
Sleep Deprivation: Your Body's Silent AlarmAlarm clocks with mouths 
 What Happens When You Don't Sleep Enough? ......................................................... 2 
Your Brain Goes Fuzzy .......................................................................................... 2 
Your Emotions Go Crazy ....................................................................................... 2 
Your Body Starts Complaining ............................................................................... 3 
Real-World Impact of Sleep Deprivation .................................................................... 3 
At Work or School  ................................................................................................ 3 
In Your Personal Life ............................................................................................. 3 
On the Road......................................................................................................... 4 
Your Appearance ................................................................................................. 4 
Quick Sleep Rescue Tips .......................................................................................... 4 
Bottom Line: Sleep is Not a Luxury ............................................................................ 5 
​ 

​ 

​ 

​ 

​ 

​ 

​ 

​ 

​​ 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 
",0.04375912057905864,0.0892018779342723,1396,0.04375912057905864,0.0892018779342723,1395,0.04375912057905864,0.0892018779342723,1396
81,2.0,sleep_pdf.pdf ~ 2,"Imagine snapping at your friend because they're chewing too loudly, or bursting into tears 
because you can't find your keys. These are examples of how lack of sleep can affect your 
emotions. 
Your Body Starts Complaining 
Your body needs sleep to repair and maintain itself. When you don't get enough, your body 
starts to show signs of wear and tear: 
• You feel tired all the time: Even after resting, you still feel exhausted. 
• Your immune system weakens: You might catch colds more easily. 
• Weight gain becomes easier: Lack of sleep messes with hormones that control 
hunger. 
• Risk of getting sick increases: Over time, sleep deprivation can lead to serious health 
problems. 
It's like trying to drive a car that hasn't had an oil change in years - eventually, things start to 
break down. 
Real-World Impact of Sleep Deprivation 
Sleep deprivation is like a sneaky thief that steals your health, happiness, and productivity. 
Here's how it can affect your daily life: 
At Work or School 
• Reduced productivity: You might take longer to finish tasks or make more mistakes. 
• Difficulty learning: New information doesn't stick as well when you're tired. 
• Poor decision-making: Lack of sleep can lead to risky or unwise choices. 
For instance, you might miss an important deadline at work because you couldn't focus, or 
fail a test at school because you couldn't remember what you studied. 
In Your Personal Life 
• Relationship problems: Being cranky all the time can strain your friendships and 
family ties. 
• Less enjoyment of activities: Your favorite hobbies might not seem as fun when 
you're exhausted. 
• Social withdrawal: You might skip social events because you're too tired. ",0.0095078945159912,"Imagine snapping at your friend because they're chewing too loudly, or bursting into tears 
because you can't find your keys. These are examples of how lack of sleep can affect your 
emotions. 
Your Body Starts Complaining 
Your body needs sleep to repair and maintain itself. When you don't get enough, your body 
starts to show signs of wear and tear: 
• You feel tired all the time: Even after resting, you still feel exhausted. 
• Your immune system weakens: You might catch colds more easily. 
• Weight gain becomes easier: Lack of sleep messes with hormones that control 
hunger. 
• Risk of getting sick increases: Over time, sleep deprivation can lead to serious health 
problems. 
It's like trying to drive a car that hasn't had an oil change in years - eventually, things start to 
break down. 
Real-World Impact of Sleep Deprivation 
Sleep deprivation is like a sneaky thief that steals your health, happiness, and productivity. 
Here's how it can affect your daily life: 
At Work or School 
• Reduced productivity: You might take longer to finish tasks or make more mistakes. 
• Difficulty learning: New information doesn't stick as well when you're tired. 
• Poor decision-making: Lack of sleep can lead to risky or unwise choices. 
For instance, you might miss an important deadline at work because you couldn't focus, or 
fail a test at school because you couldn't remember what you studied. 
In Your Personal Life 
• Relationship problems: Being cranky all the time can strain your friendships and 
family ties. 
• Less enjoyment of activities: Your favorite hobbies might not seem as fun when 
you're exhausted. 
• Social withdrawal: You might skip social events because you're too tired. 
",0.0016520023345947,"Imagine snapping at your friend because they're chewing too loudly, or bursting into tears 
because you can't find your keys. These are examples of how lack of sleep can affect your 
emotions. 
Your Body Starts Complaining 
Your body needs sleep to repair and maintain itself. When you don't get enough, your body 
starts to show signs of wear and tear: 
• You feel tired all the time: Even after resting, you still feel exhausted. 
• Your immune system weakens: You might catch colds more easily. 
• Weight gain becomes easier: Lack of sleep messes with hormones that control 
hunger. 
• Risk of getting sick increases: Over time, sleep deprivation can lead to serious health 
problems. 
It's like trying to drive a car that hasn't had an oil change in years - eventually, things start to 
break down. 
Real-World Impact of Sleep Deprivation 
Sleep deprivation is like a sneaky thief that steals your health, happiness, and productivity. 
Here's how it can affect your daily life: 
At Work or School 
• Reduced productivity: You might take longer to finish tasks or make more mistakes. 
• Difficulty learning: New information doesn't stick as well when you're tired. 
• Poor decision-making: Lack of sleep can lead to risky or unwise choices. 
For instance, you might miss an important deadline at work because you couldn't focus, or 
fail a test at school because you couldn't remember what you studied. 
In Your Personal Life 
• Relationship problems: Being cranky all the time can strain your friendships and 
family ties. 
• Less enjoyment of activities: Your favorite hobbies might not seem as fun when 
you're exhausted. 
• Social withdrawal: You might skip social events because you're too tired. ",0.0094640254974365,sleep_pdf.pdf ~ 2,"
Imagine your body as a smartphone. Just like a phone needs charging, your body needs sleep 
to recharge and function properly. When you don't get enough sleep, everything starts to 
malfunction. Let's explore what happens when we don't get enough sleep and how it affects 
our daily lives. 

What Happens When You Don't Sleep Enough? 
Your Brain Goes Fuzzy 
When you don't get enough sleep, your brain doesn't work as well as it should. It's like 
trying to use a computer with a dying battery. Here's what happens: 

    Thinking becomes difficult: Simple tasks feel much harder. 
    Memory gets weak: You might forget important things. 
    Concentration drops dramatically: Focusing on anything becomes a challenge. 
    You feel like you're walking through fog: Everything seems unclear and confusing. 
For example, if you're a student trying to study after a sleepless night, you might read 
the same paragraph over and over without understanding it. Or if you're at work, you might 
make silly mistakes that you normally wouldn’t. 

Your Emotions Go Crazy 
Lack of sleep doesn't just affect your thinking - it also messes with your feelings. Your 
emotions can become like a roller coaster: 

    You become super irritable: Little things that normally wouldn't bother you suddenly 
    feel very annoying. 
    Small problems feel like huge mountains: A minor setback might feel like the end of 
    the world. 
    Stress feels overwhelming: Your ability to handle pressure decreases. 
    You might feel sad or anxious more often: Sleep deprivation can worsen mood disorders. 
",0.05264413978645508,0.16993464052287582,1265,0.05264413978645508,0.16993464052287582,1264,0.05264413978645508,0.16993464052287582,1265
82,3.0,sleep_pdf.pdf ~ 3,"Imagine missing your best friend's birthday party because you're too exhausted, or getting 
into an argument with your partner over something trivial because you're irritable from lack 
of sleep. 
On the Road 
• Increased chance of accidents: Drowsy driving can be as dangerous as drunk driving. 
• Slower reaction times: You might not be able to brake quickly enough to avoid a 
collision. 
It's scary to think about, but many car accidents happen because drivers are too tired to 
focus on the road. 
Your Appearance 
• Premature aging: Lack of sleep can make you look older than you are. 
• Dark circles under eyes: These are a telltale sign of sleep deprivation. 
• Dull skin: Your skin needs sleep to repair itself and look healthy. 
You might notice that after a few nights of poor sleep, you look in the mirror and see a tired, 
older version of yourself staring back. 
Quick Sleep Rescue Tips 
The good news is that you can improve your sleep with some simple changes. Here are 
some easy tips to help you get better rest: 
1. Stick to a sleep schedule: Go to bed and wake up at the same time every day, even 
on weekends. 
2. Create a calm bedroom environment: Keep your room dark, quiet, and cool. 
3. Avoid screens before bedtime: The blue light from phones and computers can 
disrupt your sleep. 
4. Say no to caffeine in the evening: Coffee, tea, and soda can keep you awake if 
consumed too late. 
5. Exercise regularly: Physical activity can help you sleep better, but not too close to 
bedtime. 
6. Relax before bed: Try reading a book, listening to soft music, or doing some gentle 
stretches. 
7. Don't lie in bed awake: If you can't sleep after 20 minutes, get up and do something 
calming until you feel sleepy. 
Remember, these changes might take some time to show effect. Be patient and consistent, 
and you should start seeing improvements in your sleep quality. ",0.011110782623291,"Imagine missing your best friend's birthday party because you're too exhausted, or getting 
into an argument with your partner over something trivial because you're irritable from lack 
of sleep. 
On the Road 
• Increased chance of accidents: Drowsy driving can be as dangerous as drunk driving. 
• Slower reaction times: You might not be able to brake quickly enough to avoid a 
collision. 
It's scary to think about, but many car accidents happen because drivers are too tired to 
focus on the road. 
Your Appearance 
• Premature aging: Lack of sleep can make you look older than you are. 
• Dark circles under eyes: These are a telltale sign of sleep deprivation. 
• Dull skin: Your skin needs sleep to repair itself and look healthy. 
You might notice that after a few nights of poor sleep, you look in the mirror and see a tired, 
older version of yourself staring back. 
Quick Sleep Rescue Tips 
The good news is that you can improve your sleep with some simple changes. Here are 
some easy tips to help you get better rest: 
1. Stick to a sleep schedule: Go to bed and wake up at the same time every day, even 
on weekends. 
2. Create a calm bedroom environment: Keep your room dark, quiet, and cool. 
3. Avoid screens before bedtime: The blue light from phones and computers can 
disrupt your sleep. 
4. Say no to caffeine in the evening: Coffee, tea, and soda can keep you awake if 
consumed too late. 
5. Exercise regularly: Physical activity can help you sleep better, but not too close to 
bedtime. 
6. Relax before bed: Try reading a book, listening to soft music, or doing some gentle 
stretches. 
7. Don't lie in bed awake: If you can't sleep after 20 minutes, get up and do something 
calming until you feel sleepy. 
Remember, these changes might take some time to show effect. Be patient and consistent, 
and you should start seeing improvements in your sleep quality. 
",0.0022761821746826,"Imagine missing your best friend's birthday party because you're too exhausted, or getting 
into an argument with your partner over something trivial because you're irritable from lack 
of sleep. 
On the Road 
• Increased chance of accidents: Drowsy driving can be as dangerous as drunk driving. 
• Slower reaction times: You might not be able to brake quickly enough to avoid a 
collision. 
It's scary to think about, but many car accidents happen because drivers are too tired to 
focus on the road. 
Your Appearance 
• Premature aging: Lack of sleep can make you look older than you are. 
• Dark circles under eyes: These are a telltale sign of sleep deprivation. 
• Dull skin: Your skin needs sleep to repair itself and look healthy. 
You might notice that after a few nights of poor sleep, you look in the mirror and see a tired, 
older version of yourself staring back. 
Quick Sleep Rescue Tips 
The good news is that you can improve your sleep with some simple changes. Here are 
some easy tips to help you get better rest: 
1. Stick to a sleep schedule: Go to bed and wake up at the same time every day, even 
on weekends. 
2. Create a calm bedroom environment: Keep your room dark, quiet, and cool. 
3. Avoid screens before bedtime: The blue light from phones and computers can 
disrupt your sleep. 
4. Say no to caffeine in the evening: Coffee, tea, and soda can keep you awake if 
consumed too late. 
5. Exercise regularly: Physical activity can help you sleep better, but not too close to 
bedtime. 
6. Relax before bed: Try reading a book, listening to soft music, or doing some gentle 
stretches. 
7. Don't lie in bed awake: If you can't sleep after 20 minutes, get up and do something 
calming until you feel sleepy. 
Remember, these changes might take some time to show effect. Be patient and consistent, 
and you should start seeing improvements in your sleep quality. ",0.0102748870849609,sleep_pdf.pdf ~ 3,"
Imagine snapping at your friend because they're chewing too loudly, or bursting into tears 
because you can't find your keys. These are examples of how lack of sleep can affect your 
emotions. 

Your Body Starts Complaining 
Your body needs sleep to repair and maintain itself. When you don't get enough, your body 
starts to show signs of wear and tear: 

    You feel tired all the time: Even after resting, you still feel exhausted. 
    Your immune system weakens: You might catch colds more easily. 
    Weight gain becomes easier: Lack of sleep messes with hormones that control 
    hunger. 
    Risk of getting sick increases: Over time, sleep deprivation can lead to serious health 
    roblems. 
It's like trying to drive a car that hasn't had an oil change in years - eventually, things 
start to break down. 

Real-World Impact of Sleep Deprivation 
Sleep deprivation is like a sneaky thief that steals your health, happiness, and productivity. 
Here's how it can affect your daily life: 

At Work or School 
    Reduced productivity: You might take longer to finish tasks or make more mistakes. 
    Difficulty learning: New information doesn't stick as well when you're tired. 
    Poor decision-making: Lack of sleep can lead to risky or unwise choices. 
For instance, you might miss an important deadline at work because you couldn't focus, or 
fail a test at school because you couldn't remember what you studied. 

In Your Personal Life 
    Relationship problems: Being cranky all the time can strain your friendships and 
    family ties. 
    Less enjoyment of activities: Your favorite hobbies might not seem as fun when 
    you're exhausted. 
    Social withdrawal: You might skip social events because you're too tired. 
",0.03413501585693831,0.12466124661246612,1390,0.03413501585693831,0.12466124661246612,1389,0.03413501585693831,0.12466124661246612,1390
83,4.0,sleep_pdf.pdf ~ 4,"Bottom Line: Sleep is Not a Luxury 
In our busy world, it's easy to think of sleep as something we can cut back on to make more 
time for work, socializing, or entertainment. But the truth is, sleep is not a luxury - it's a 
necessity for our health and well-being. Think of sleep as an investment in yourself. When 
you get enough good quality sleep: 
• Your brain works better 
• Your emotions are more stable 
• Your body stays healthier 
• You look and feel younger 
• You're more productive and creative 
• You enjoy life more 
So, the next time you're tempted to stay up late binge-watching your favorite show or 
scrolling through social media, remember: your body needs that sleep. Treat it right, and it 
will thank you with better health, clearer thinking, and a happier mood. Sweet dreams! 
 ",0.0050959587097167,"Bottom Line: Sleep is Not a Luxury 
In our busy world, it's easy to think of sleep as something we can cut back on to make more 
time for work, socializing, or entertainment. But the truth is, sleep is not a luxury - it's a 
necessity for our health and well-being. Think of sleep as an investment in yourself. When 
you get enough good quality sleep: 
• Your brain works better 
• Your emotions are more stable 
• Your body stays healthier 
• You look and feel younger 
• You're more productive and creative 
• You enjoy life more 
So, the next time you're tempted to stay up late binge-watching your favorite show or 
scrolling through social media, remember: your body needs that sleep. Treat it right, and it 
will thank you with better health, clearer thinking, and a happier mood. Sweet dreams! 
 
",0.0010061264038085,"Bottom Line: Sleep is Not a Luxury 
In our busy world, it's easy to think of sleep as something we can cut back on to make more 
time for work, socializing, or entertainment. But the truth is, sleep is not a luxury - it's a 
necessity for our health and well-being. Think of sleep as an investment in yourself. When 
you get enough good quality sleep: 
• Your brain works better 
• Your emotions are more stable 
• Your body stays healthier 
• You look and feel younger 
• You're more productive and creative 
• You enjoy life more 
So, the next time you're tempted to stay up late binge-watching your favorite show or 
scrolling through social media, remember: your body needs that sleep. Treat it right, and it 
will thank you with better health, clearer thinking, and a happier mood. Sweet dreams! 
 ",0.0054268836975097,sleep_pdf.pdf ~ 4,"
Imagine missing your best friend's birthday party because you're too exhausted, or getting 
into an argument with your partner over something trivial because you're irritable from lack 
of sleep. 

On the Road 
    Increased chance of accidents: Drowsy driving can be as dangerous as drunk driving. 
    Slower reaction times: You might not be able to brake quickly enough to avoid a 
    collision. 
It's scary to think about, but many car accidents happen because drivers are too tired to 
focus on the road. 

Your Appearance 
    Premature aging: Lack of sleep can make you look older than you are. 
    Dark circles under eyes: These are a telltale sign of sleep deprivation. 
    Dull skin: Your skin needs sleep to repair itself and look healthy. 
You might notice that after a few nights of poor sleep, you look in the mirror and see a tired, 
older version of yourself staring back. 

Quick Sleep Rescue Tips 
The good news is that you can improve your sleep with some simple changes. Here are some easy tips to help you get better rest: 

    Stick to a sleep schedule: Go to bed and wake up at the same time every day, even 
    on weekends. 
    Create a calm bedroom environment: Keep your room dark, quiet, and cool. 
    Avoid screens before bedtime: The blue light from phones and computers can 
    disrupt your sleep. 
    Say no to caffeine in the evening: Coffee, tea, and soda can keep you awake if 
    consumed too late. 
    Exercise regularly: Physical activity can help you sleep better, but not too close to 
    bedtime. 
    Relax before bed: Try reading a book, listening to soft music, or doing some gentle 
    stretches. 
    Don't lie in bed awake: If you can't sleep after 20 minutes, get up and do something 
    calming until you feel sleepy. 
Remember, these changes might take some time to show effect. Be patient and consistent, 
and you should start seeing improvements in your sleep quality. 
",0.002565369060256051,0.13240418118466898,1476,0.002565369060256051,0.13240418118466898,1475,0.002565369060256051,0.13240418118466898,1476
105,1.0,genai_pdf.pdf ~ 1,"Author: Prateek Mannem   
 
  2 
 
What Exactly is Generative AI? 🤖✨ 
Think of Generative AI like a super-smart digital assistant that can create things from 
scratch. Imagine having a friend who can: 
• Write stories 
• Draw pictures 
• Compose music 
• Write computer code 
• Solve complex problems 
All by just understanding what you want! 
How Does It Actually Work? 
Picture a massive library where an AI has read EVERYTHING. When you ask it to do 
something, it: 
1. Understands your request 
2. Pulls from its enormous ""knowledge bank"" 
3. Creates something totally new 
It's like having a genius friend who can instantly combine information in unique ways. 
Real-World Examples That'll Blow Your Mind 
Art Creation 
• For example, you can type ""robot playing guitar in a space cafe"" as a prompt 
• AI instantly generates a unique image matching your description 
Writing Help 
• Need a blog post about climate change? 
• AI can draft a complete, coherent article in minutes 
Problem Solving 
• Stuck on a math problem? 
• AI can break it down, explain steps, and show solutions 
Cool Things to Know 
🌟 Generative AI learns by: 
• Studying massive amounts of data ",0.0098161697387695,"Author: Prateek Mannem 
 
 
 
2
 
What Exactly is Generative AI? 🤖✨ 
Think of Generative AI like a super-smart digital assistant that can create things from 
scratch. Imagine having a friend who can: 
• Write stories 
• Draw pictures 
• Compose music 
• Write computer code 
• Solve complex problems 
All by just understanding what you want! 
How Does It Actually Work? 
Picture a massive library where an AI has read EVERYTHING. When you ask it to do 
something, it: 
1. Understands your request 
2. Pulls from its enormous ""knowledge bank"" 
3. Creates something totally new 
It's like having a genius friend who can instantly combine information in unique ways. 
Real-World Examples That'll Blow Your Mind 
Art Creation 
• For example, you can type ""robot playing guitar in a space cafe"" as a prompt 
• AI instantly generates a unique image matching your description 
Writing Help 
• Need a blog post about climate change? 
• AI can draft a complete, coherent article in minutes 
Problem Solving 
• Stuck on a math problem? 
• AI can break it down, explain steps, and show solutions 
Cool Things to Know 
🌟 Generative AI learns by: 
• Studying massive amounts of data 
",0.0032463073730468,"Author: Prateek Mannem   
 
  2 
 
What Exactly is Generative AI? 🤖✨ 
Think of Generative AI like a super-smart digital assistant that can create things from 
scratch. Imagine having a friend who can: 
• Write stories 
• Draw pictures 
• Compose music 
• Write computer code 
• Solve complex problems 
All by just understanding what you want! 
How Does It Actually Work? 
Picture a massive library where an AI has read EVERYTHING. When you ask it to do 
something, it: 
1. Understands your request 
2. Pulls from its enormous ""knowledge bank"" 
3. Creates something totally new 
It's like having a genius friend who can instantly combine information in unique ways. 
Real-World Examples That'll Blow Your Mind 
Art Creation 
• For example, you can type ""robot playing guitar in a space cafe"" as a prompt 
• AI instantly generates a unique image matching your description 
Writing Help 
• Need a blog post about climate change? 
• AI can draft a complete, coherent article in minutes 
Problem Solving 
• Stuck on a math problem? 
• AI can break it down, explain steps, and show solutions 
Cool Things to Know 
🌟 Generative AI learns by: 
• Studying massive amounts of data ",0.0103449821472167,genai_pdf.pdf ~ 1," 
Generative AI: Your New Digital Creative CompanionConnected wire-frame lines and dots 
​​ 

​ 

​ 

What Exactly is Generative AI?____________________________________1
How Does It Actually Work?________________________________________2
Real-World Examples That'll Blow Your Mind________________________________________2
    Art Creation________________________________________2
    Writing Help________________________________________2
    Problem Solving________________________________________2
Cool Things to Know
Potential Concerns (Because Nothing's Perfect)________________________________________3
    The Good________________________________________3
    he Challenging________________________________________3
Who's Using This Magic?________________________________________3
The Future Looks Bright! 🌈________________________________________3
Quick Pro Tips________________________________________3
Want to Get Started?________________________________________3

",0.055374331349055256,0.11229946524064172,1015,0.055374331349055256,0.11229946524064172,1014,0.055374331349055256,0.11229946524064172,1015
106,2.0,genai_pdf.pdf ~ 2,"Author: Prateek Mannem   
 
  3 
 
• Recognizing patterns 
• Creating new content based on what it's learned 
🚀 It's NOT just copying - it's CREATING something original! 
Potential Concerns (Because Nothing's Perfect) 
The Good 
• Incredible productivity 
• Endless creativity 
• Solving complex problems quickly 
The Challenging 
• Potential misinformation 
• Copyright questions 
• Ethical use of technology 
Who's Using This Magic? 
• Doctors (diagnosing diseases) 
• Artists (creating new designs) 
• Programmers (writing code) 
• Businesses (solving complex problems) 
• Researchers (exploring new ideas) 
The Future Looks Bright! 🌈 
Generative AI isn't about replacing humans - it's about HELPING humans do amazing things 
faster and more creatively. Think of it like a supercharged creativity and problem-solving 
partner. 
Quick Pro Tips 
• Be specific in your requests 
• Understand it's a tool, not a replacement for human creativity 
• Experiment and have fun! 
Want to Get Started? 
Try free tools like: ",0.0091660022735595,"Author: Prateek Mannem 
 
 
 
3
 
• Recognizing patterns 
• Creating new content based on what it's learned 
🚀 It's NOT just copying - it's CREATING something original! 
Potential Concerns (Because Nothing's Perfect) 
The Good 
• Incredible productivity 
• Endless creativity 
• Solving complex problems quickly 
The Challenging 
• Potential misinformation 
• Copyright questions 
• Ethical use of technology 
Who's Using This Magic? 
• Doctors (diagnosing diseases) 
• Artists (creating new designs) 
• Programmers (writing code) 
• Businesses (solving complex problems) 
• Researchers (exploring new ideas) 
The Future Looks Bright! 🌈 
Generative AI isn't about replacing humans - it's about HELPING humans do amazing things 
faster and more creatively. Think of it like a supercharged creativity and problem-solving 
partner. 
Quick Pro Tips 
• Be specific in your requests 
• Understand it's a tool, not a replacement for human creativity 
• Experiment and have fun! 
Want to Get Started? 
Try free tools like: 
",0.0023212432861328,"Author: Prateek Mannem   
 
  3 
 
• Recognizing patterns 
• Creating new content based on what it's learned 
🚀 It's NOT just copying - it's CREATING something original! 
Potential Concerns (Because Nothing's Perfect) 
The Good 
• Incredible productivity 
• Endless creativity 
• Solving complex problems quickly 
The Challenging 
• Potential misinformation 
• Copyright questions 
• Ethical use of technology 
Who's Using This Magic? 
• Doctors (diagnosing diseases) 
• Artists (creating new designs) 
• Programmers (writing code) 
• Businesses (solving complex problems) 
• Researchers (exploring new ideas) 
The Future Looks Bright! 🌈 
Generative AI isn't about replacing humans - it's about HELPING humans do amazing things 
faster and more creatively. Think of it like a supercharged creativity and problem-solving 
partner. 
Quick Pro Tips 
• Be specific in your requests 
• Understand it's a tool, not a replacement for human creativity 
• Experiment and have fun! 
Want to Get Started? 
Try free tools like: ",0.0087652206420898,genai_pdf.pdf ~ 2,"
What Exactly is Generative AI? 🤖✨ 

Think of Generative AI like a super-smart digital assistant that can create things from scratch. 
Imagine having a friend who can: 

    Write stories 
    Draw pictures 
    Compose music 
    Write computer code 
    Solve complex problems 
All by just understanding what you want! 

How Does It Actually Work? 
Picture a massive library where an AI has read EVERYTHING. When you ask it to do 
something, it: 

    Understands your request 
    Pulls from its enormous ""knowledge bank"" 
    Creates something totally new 
    It's like having a genius friend who can instantly combine information in unique ways. 

Real-World Examples That'll Blow Your Mind 
Art Creation 
    For example, you can type ""robot playing guitar in a space cafe"" as a prompt 
    AI instantly generates a unique image matching your description 
Writing Help 
    Need a blog post about climate change? 
    AI can draft a complete, coherent article in minutes 
Problem Solving 
    Stuck on a math problem? 
    AI can break it down, explain steps, and show solutions

Cool Things to Know 
🌟 Generative AI learns by: 

    Studying massive amounts of data 
",0.005680298829202875,0.09871244635193133,888,0.005680298829202875,0.09871244635193133,887,0.005680298829202875,0.09871244635193133,888
107,3.0,genai_pdf.pdf ~ 3,"Author: Prateek Mannem   
 
  4 
 
• ChatGPT 
• DALL-E 
• Midjourney 
• Canva AI tools 
 
Remember: The more you play and experiment, the more you'll understand how incredible 
this technology can be! 🤖 Welcome to the Future of Creativity! 🚀 ",0.0029819011688232,"Author: Prateek Mannem 
 
 
 
4
 
• ChatGPT 
• DALL-E 
• Midjourney 
• Canva AI tools 
 
Remember: The more you play and experiment, the more you'll understand how incredible 
this technology can be! 🤖 Welcome to the Future of Creativity! 🚀 
",0.0003800392150878,"Author: Prateek Mannem   
 
  4 
 
• ChatGPT 
• DALL-E 
• Midjourney 
• Canva AI tools 
 
Remember: The more you play and experiment, the more you'll understand how incredible 
this technology can be! 🤖 Welcome to the Future of Creativity! 🚀 ",0.0027759075164794,genai_pdf.pdf ~ 3,"    
    Recognizing patterns 
    Creating new content based on what it's learned 
🚀 It's NOT just copying - it's CREATING something original! 

Potential Concerns (Because Nothing's Perfect) 
The Good 
    Incredible productivity 
    Endless creativity 
    Solving complex problems quickly 
The Challenging 
    Potential misinformation 
    Copyright questions 
    Ethical use of technology 
Who's Using This Magic? 
    Doctors (diagnosing diseases) 
    Artists (creating new designs)  
    Programmers (writing code) 
    Businesses (solving complex problems) 
    Researchers (exploring new ideas) 

The Future Looks Bright! 🌈 
Generative AI isn't about replacing humans - it's about HELPING humans do amazing things 
faster and more creatively. Think of it like a supercharged creativity and problem-solving 
partner. 

Quick Pro Tips 
Be specific in your requests 
Understand it's a tool, not a replacement for human creativity 
Experiment and have fun! 
Want to Get Started? 
Try free tools like: 
",0.0008181032195367647,0.07407407407407407,858,0.0008181032195367647,0.07407407407407407,859,0.0008181032195367647,0.07407407407407407,858
